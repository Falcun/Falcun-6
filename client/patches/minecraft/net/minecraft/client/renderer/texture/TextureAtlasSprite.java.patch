--- ../src-base/minecraft/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texture/TextureAtlasSprite.java
@@ -3,19 +3,23 @@
 import com.google.common.collect.Lists;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
 import java.util.concurrent.Callable;
+import net.minecraft.client.resources.IResourceManager;
 import net.minecraft.client.resources.data.AnimationFrame;
 import net.minecraft.client.resources.data.AnimationMetadataSection;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
+import net.minecraft.src.Config;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.ResourceLocation;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.optifine.SmartAnimations;
+import net.optifine.shaders.Shaders;
+import net.optifine.util.CounterInt;
+import net.optifine.util.TextureUtils;
 
-@SideOnly(Side.CLIENT)
 public class TextureAtlasSprite
 {
     private final String field_110984_i;
@@ -35,10 +39,37 @@
     protected int field_110983_h;
     private static String field_176607_p = "builtin/clock";
     private static String field_176606_q = "builtin/compass";
+    private int indexInMap = -1;
+    public float baseU;
+    public float baseV;
+    public int sheetWidth;
+    public int sheetHeight;
+    public int glSpriteTextureId = -1;
+    public TextureAtlasSprite spriteSingle = null;
+    public boolean isSpriteSingle = false;
+    public int mipmapLevels = 0;
+    public TextureAtlasSprite spriteNormal = null;
+    public TextureAtlasSprite spriteSpecular = null;
+    public boolean isShadersSprite = false;
+    public boolean isEmissive = false;
+    public TextureAtlasSprite spriteEmissive = null;
+    private int animationIndex = -1;
+    private boolean animationActive = false;
 
-    protected TextureAtlasSprite(String p_i1282_1_)
+    private TextureAtlasSprite(String p_i7_1_, boolean p_i7_2_)
     {
+        this.field_110984_i = p_i7_1_;
+        this.isSpriteSingle = p_i7_2_;
+    }
+
+    public TextureAtlasSprite(String p_i1282_1_)
+    {
         this.field_110984_i = p_i1282_1_;
+
+        if (Config.isMultiTexture())
+        {
+            this.spriteSingle = new TextureAtlasSprite(this.func_94215_i() + ".spriteSingle", true);
+        }
     }
 
     protected static TextureAtlasSprite func_176604_a(ResourceLocation p_176604_0_)
@@ -68,6 +99,23 @@
         this.field_110980_m = (float)(p_110971_3_ + this.field_130223_c) / (float)((double)p_110971_1_) - f;
         this.field_110977_n = (float)p_110971_4_ / (float)p_110971_2_ + f1;
         this.field_110978_o = (float)(p_110971_4_ + this.field_130224_d) / (float)p_110971_2_ - f1;
+        this.baseU = Math.min(this.field_110979_l, this.field_110980_m);
+        this.baseV = Math.min(this.field_110977_n, this.field_110978_o);
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_110971_a(this.field_130223_c, this.field_130224_d, 0, 0, false);
+        }
+
+        if (this.spriteNormal != null)
+        {
+            this.spriteNormal.func_94217_a(this);
+        }
+
+        if (this.spriteSpecular != null)
+        {
+            this.spriteSpecular.func_94217_a(this);
+        }
     }
 
     public void func_94217_a(TextureAtlasSprite p_94217_1_)
@@ -81,54 +129,103 @@
         this.field_110980_m = p_94217_1_.field_110980_m;
         this.field_110977_n = p_94217_1_.field_110977_n;
         this.field_110978_o = p_94217_1_.field_110978_o;
+
+        if (p_94217_1_ != Config.getTextureMap().func_174944_f())
+        {
+            this.indexInMap = p_94217_1_.indexInMap;
+        }
+
+        this.baseU = p_94217_1_.baseU;
+        this.baseV = p_94217_1_.baseV;
+        this.sheetWidth = p_94217_1_.sheetWidth;
+        this.sheetHeight = p_94217_1_.sheetHeight;
+        this.glSpriteTextureId = p_94217_1_.glSpriteTextureId;
+        this.mipmapLevels = p_94217_1_.mipmapLevels;
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_110971_a(this.field_130223_c, this.field_130224_d, 0, 0, false);
+        }
+
+        this.animationIndex = p_94217_1_.animationIndex;
     }
 
+    /**
+     * Returns the X position of this icon on its texture sheet, in pixels.
+     */
     public int func_130010_a()
     {
         return this.field_110975_c;
     }
 
+    /**
+     * Returns the Y position of this icon on its texture sheet, in pixels.
+     */
     public int func_110967_i()
     {
         return this.field_110974_d;
     }
 
+    /**
+     * Returns the width of the icon, in pixels.
+     */
     public int func_94211_a()
     {
         return this.field_130223_c;
     }
 
+    /**
+     * Returns the height of the icon, in pixels.
+     */
     public int func_94216_b()
     {
         return this.field_130224_d;
     }
 
+    /**
+     * Returns the minimum U coordinate to use when rendering with this icon.
+     */
     public float func_94209_e()
     {
         return this.field_110979_l;
     }
 
+    /**
+     * Returns the maximum U coordinate to use when rendering with this icon.
+     */
     public float func_94212_f()
     {
         return this.field_110980_m;
     }
 
+    /**
+     * Gets a U coordinate on the icon. 0 returns uMin and 16 returns uMax. Other arguments return in-between values.
+     */
     public float func_94214_a(double p_94214_1_)
     {
         float f = this.field_110980_m - this.field_110979_l;
         return this.field_110979_l + f * (float)p_94214_1_ / 16.0F;
     }
 
+    /**
+     * Returns the minimum V coordinate to use when rendering with this icon.
+     */
     public float func_94206_g()
     {
         return this.field_110977_n;
     }
 
+    /**
+     * Returns the maximum V coordinate to use when rendering with this icon.
+     */
     public float func_94210_h()
     {
         return this.field_110978_o;
     }
 
+    /**
+     * Gets a V coordinate on the icon. 0 returns vMin and 16 returns vMax. Other arguments return in-between values.
+     */
     public float func_94207_b(double p_94207_1_)
     {
         float f = this.field_110978_o - this.field_110977_n;
@@ -142,25 +239,41 @@
 
     public void func_94219_l()
     {
-        ++this.field_110983_h;
-
-        if (this.field_110983_h >= this.field_110982_k.func_110472_a(this.field_110973_g))
+        if (this.field_110982_k != null)
         {
-            int i = this.field_110982_k.func_110468_c(this.field_110973_g);
-            int j = this.field_110982_k.func_110473_c() == 0 ? this.field_110976_a.size() : this.field_110982_k.func_110473_c();
-            this.field_110973_g = (this.field_110973_g + 1) % j;
-            this.field_110983_h = 0;
-            int k = this.field_110982_k.func_110468_c(this.field_110973_g);
+            this.animationActive = SmartAnimations.isActive() ? SmartAnimations.isSpriteRendered(this.animationIndex) : true;
+            ++this.field_110983_h;
 
-            if (i != k && k >= 0 && k < this.field_110976_a.size())
+            if (this.field_110983_h >= this.field_110982_k.func_110472_a(this.field_110973_g))
             {
-                TextureUtil.func_147955_a((int[][])this.field_110976_a.get(k), this.field_130223_c, this.field_130224_d, this.field_110975_c, this.field_110974_d, false, false);
+                int i = this.field_110982_k.func_110468_c(this.field_110973_g);
+                int j = this.field_110982_k.func_110473_c() == 0 ? this.field_110976_a.size() : this.field_110982_k.func_110473_c();
+                this.field_110973_g = (this.field_110973_g + 1) % j;
+                this.field_110983_h = 0;
+                int k = this.field_110982_k.func_110468_c(this.field_110973_g);
+                boolean flag = false;
+                boolean flag1 = this.isSpriteSingle;
+
+                if (!this.animationActive)
+                {
+                    return;
+                }
+
+                if (i != k && k >= 0 && k < this.field_110976_a.size())
+                {
+                    TextureUtil.func_147955_a((int[][])((int[][])this.field_110976_a.get(k)), this.field_130223_c, this.field_130224_d, this.field_110975_c, this.field_110974_d, flag, flag1);
+                }
             }
+            else if (this.field_110982_k.func_177219_e())
+            {
+                if (!this.animationActive)
+                {
+                    return;
+                }
+
+                this.func_180599_n();
+            }
         }
-        else if (this.field_110982_k.func_177219_e())
-        {
-            this.func_180599_n();
-        }
     }
 
     private void func_180599_n()
@@ -172,8 +285,8 @@
 
         if (i != k && k >= 0 && k < this.field_110976_a.size())
         {
-            int[][] aint = (int[][])this.field_110976_a.get(i);
-            int[][] aint1 = (int[][])this.field_110976_a.get(k);
+            int[][] aint = (int[][])((int[][])this.field_110976_a.get(i));
+            int[][] aint1 = (int[][])((int[][])this.field_110976_a.get(k));
 
             if (this.field_176605_b == null || this.field_176605_b.length != aint.length)
             {
@@ -207,7 +320,7 @@
 
     public int[][] func_147965_a(int p_147965_1_)
     {
-        return (int[][])this.field_110976_a.get(p_147965_1_);
+        return (int[][])((int[][])this.field_110976_a.get(p_147965_1_));
     }
 
     public int func_110970_k()
@@ -218,11 +331,21 @@
     public void func_110966_b(int p_110966_1_)
     {
         this.field_130223_c = p_110966_1_;
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_110966_b(this.field_130223_c);
+        }
     }
 
     public void func_110969_c(int p_110969_1_)
     {
         this.field_130224_d = p_110969_1_;
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_110969_c(this.field_130224_d);
+        }
     }
 
     public void func_180598_a(BufferedImage[] p_180598_1_, AnimationMetadataSection p_180598_2_) throws IOException
@@ -232,6 +355,13 @@
         int j = p_180598_1_[0].getHeight();
         this.field_130223_c = i;
         this.field_130224_d = j;
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.field_130223_c = this.field_130223_c;
+            this.spriteSingle.field_130224_d = this.field_130224_d;
+        }
+
         int[][] aint = new int[p_180598_1_.length][];
 
         for (int k = 0; k < p_180598_1_.length; ++k)
@@ -240,6 +370,11 @@
 
             if (bufferedimage != null)
             {
+                if (this.field_130223_c >> k != bufferedimage.getWidth())
+                {
+                    bufferedimage = TextureUtils.scaleImage(bufferedimage, this.field_130223_c >> k);
+                }
+
                 if (k > 0 && (bufferedimage.getWidth() != i >> k || bufferedimage.getHeight() != j >> k))
                 {
                     throw new RuntimeException(String.format("Unable to load miplevel: %d, image is size: %dx%d, expected %dx%d", new Object[] {Integer.valueOf(k), Integer.valueOf(bufferedimage.getWidth()), Integer.valueOf(bufferedimage.getHeight()), Integer.valueOf(i >> k), Integer.valueOf(j >> k)}));
@@ -262,7 +397,7 @@
         else
         {
             int j1 = j / i;
-            int k1 = i;
+            int l1 = i;
             int l = i;
             this.field_130224_d = this.field_130223_c;
 
@@ -280,7 +415,7 @@
                     }
 
                     this.func_130099_d(i1);
-                    this.field_110976_a.set(i1, func_147962_a(aint, k1, l, i1));
+                    this.field_110976_a.set(i1, func_147962_a(aint, l1, l, i1));
                 }
 
                 this.field_110982_k = p_180598_2_;
@@ -289,15 +424,42 @@
             {
                 List<AnimationFrame> list = Lists.<AnimationFrame>newArrayList();
 
-                for (int l1 = 0; l1 < j1; ++l1)
+                for (int j2 = 0; j2 < j1; ++j2)
                 {
-                    this.field_110976_a.add(func_147962_a(aint, k1, l, l1));
-                    list.add(new AnimationFrame(l1, -1));
+                    this.field_110976_a.add(func_147962_a(aint, l1, l, j2));
+                    list.add(new AnimationFrame(j2, -1));
                 }
 
                 this.field_110982_k = new AnimationMetadataSection(list, this.field_130223_c, this.field_130224_d, p_180598_2_.func_110469_d(), p_180598_2_.func_177219_e());
             }
         }
+
+        if (!this.isShadersSprite)
+        {
+            if (Config.isShaders())
+            {
+                this.loadShadersSprites();
+            }
+
+            for (int k1 = 0; k1 < this.field_110976_a.size(); ++k1)
+            {
+                int[][] aint1 = (int[][])((int[][])this.field_110976_a.get(k1));
+
+                if (aint1 != null && !this.field_110984_i.startsWith("minecraft:blocks/leaves_"))
+                {
+                    for (int i2 = 0; i2 < aint1.length; ++i2)
+                    {
+                        int[] aint2 = aint1[i2];
+                        this.fixTransparentColor(aint2);
+                    }
+                }
+            }
+
+            if (this.spriteSingle != null)
+            {
+                this.spriteSingle.func_180598_a(p_180598_1_, p_180598_2_);
+            }
+        }
     }
 
     public void func_147963_d(int p_147963_1_)
@@ -306,7 +468,7 @@
 
         for (int i = 0; i < this.field_110976_a.size(); ++i)
         {
-            final int[][] aint = (int[][])this.field_110976_a.get(i);
+            final int[][] aint = (int[][])((int[][])this.field_110976_a.get(i));
 
             if (aint != null)
             {
@@ -344,6 +506,11 @@
         }
 
         this.func_110968_a(list);
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_147963_d(p_147963_1_);
+        }
     }
 
     private void func_130099_d(int p_130099_1_)
@@ -352,9 +519,14 @@
         {
             for (int i = this.field_110976_a.size(); i <= p_130099_1_; ++i)
             {
-                this.field_110976_a.add((int[][])null);
+                this.field_110976_a.add((int[][])((int[][])null));
             }
         }
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_130099_d(p_130099_1_);
+        }
     }
 
     private static int[][] func_147962_a(int[][] p_147962_0_, int p_147962_1_, int p_147962_2_, int p_147962_3_)
@@ -378,6 +550,11 @@
     public void func_130103_l()
     {
         this.field_110976_a.clear();
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_130103_l();
+        }
     }
 
     public boolean func_130098_m()
@@ -388,6 +565,11 @@
     public void func_110968_a(List<int[][]> p_110968_1_)
     {
         this.field_110976_a = p_110968_1_;
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_110968_a(p_110968_1_);
+        }
     }
 
     private void func_130102_n()
@@ -396,10 +578,214 @@
         this.func_110968_a(Lists.<int[][]>newArrayList());
         this.field_110973_g = 0;
         this.field_110983_h = 0;
+
+        if (this.spriteSingle != null)
+        {
+            this.spriteSingle.func_130102_n();
+        }
     }
 
     public String toString()
     {
         return "TextureAtlasSprite{name=\'" + this.field_110984_i + '\'' + ", frameCount=" + this.field_110976_a.size() + ", rotated=" + this.field_130222_e + ", x=" + this.field_110975_c + ", y=" + this.field_110974_d + ", height=" + this.field_130224_d + ", width=" + this.field_130223_c + ", u0=" + this.field_110979_l + ", u1=" + this.field_110980_m + ", v0=" + this.field_110977_n + ", v1=" + this.field_110978_o + '}';
     }
+
+    public boolean hasCustomLoader(IResourceManager p_hasCustomLoader_1_, ResourceLocation p_hasCustomLoader_2_)
+    {
+        return false;
+    }
+
+    public boolean load(IResourceManager p_load_1_, ResourceLocation p_load_2_)
+    {
+        return true;
+    }
+
+    public int getIndexInMap()
+    {
+        return this.indexInMap;
+    }
+
+    public void setIndexInMap(int p_setIndexInMap_1_)
+    {
+        this.indexInMap = p_setIndexInMap_1_;
+    }
+
+    public void updateIndexInMap(CounterInt p_updateIndexInMap_1_)
+    {
+        if (this.indexInMap < 0)
+        {
+            this.indexInMap = p_updateIndexInMap_1_.nextValue();
+        }
+    }
+
+    public int getAnimationIndex()
+    {
+        return this.animationIndex;
+    }
+
+    public void setAnimationIndex(int p_setAnimationIndex_1_)
+    {
+        this.animationIndex = p_setAnimationIndex_1_;
+
+        if (this.spriteNormal != null)
+        {
+            this.spriteNormal.setAnimationIndex(p_setAnimationIndex_1_);
+        }
+
+        if (this.spriteSpecular != null)
+        {
+            this.spriteSpecular.setAnimationIndex(p_setAnimationIndex_1_);
+        }
+    }
+
+    public boolean isAnimationActive()
+    {
+        return this.animationActive;
+    }
+
+    private void fixTransparentColor(int[] p_fixTransparentColor_1_)
+    {
+        if (p_fixTransparentColor_1_ != null)
+        {
+            long i = 0L;
+            long j = 0L;
+            long k = 0L;
+            long l = 0L;
+
+            for (int i1 = 0; i1 < p_fixTransparentColor_1_.length; ++i1)
+            {
+                int j1 = p_fixTransparentColor_1_[i1];
+                int k1 = j1 >> 24 & 255;
+
+                if (k1 >= 16)
+                {
+                    int l1 = j1 >> 16 & 255;
+                    int i2 = j1 >> 8 & 255;
+                    int j2 = j1 & 255;
+                    i += (long)l1;
+                    j += (long)i2;
+                    k += (long)j2;
+                    ++l;
+                }
+            }
+
+            if (l > 0L)
+            {
+                int l2 = (int)(i / l);
+                int i3 = (int)(j / l);
+                int j3 = (int)(k / l);
+                int k3 = l2 << 16 | i3 << 8 | j3;
+
+                for (int l3 = 0; l3 < p_fixTransparentColor_1_.length; ++l3)
+                {
+                    int i4 = p_fixTransparentColor_1_[l3];
+                    int k2 = i4 >> 24 & 255;
+
+                    if (k2 <= 16)
+                    {
+                        p_fixTransparentColor_1_[l3] = k3;
+                    }
+                }
+            }
+        }
+    }
+
+    public double getSpriteU16(float p_getSpriteU16_1_)
+    {
+        float f = this.field_110980_m - this.field_110979_l;
+        return (double)((p_getSpriteU16_1_ - this.field_110979_l) / f * 16.0F);
+    }
+
+    public double getSpriteV16(float p_getSpriteV16_1_)
+    {
+        float f = this.field_110978_o - this.field_110977_n;
+        return (double)((p_getSpriteV16_1_ - this.field_110977_n) / f * 16.0F);
+    }
+
+    public void bindSpriteTexture()
+    {
+        if (this.glSpriteTextureId < 0)
+        {
+            this.glSpriteTextureId = TextureUtil.func_110996_a();
+            TextureUtil.func_180600_a(this.glSpriteTextureId, this.mipmapLevels, this.field_130223_c, this.field_130224_d);
+            TextureUtils.applyAnisotropicLevel();
+        }
+
+        TextureUtils.bindTexture(this.glSpriteTextureId);
+    }
+
+    public void deleteSpriteTexture()
+    {
+        if (this.glSpriteTextureId >= 0)
+        {
+            TextureUtil.func_147942_a(this.glSpriteTextureId);
+            this.glSpriteTextureId = -1;
+        }
+    }
+
+    public float toSingleU(float p_toSingleU_1_)
+    {
+        p_toSingleU_1_ = p_toSingleU_1_ - this.baseU;
+        float f = (float)this.sheetWidth / (float)this.field_130223_c;
+        p_toSingleU_1_ = p_toSingleU_1_ * f;
+        return p_toSingleU_1_;
+    }
+
+    public float toSingleV(float p_toSingleV_1_)
+    {
+        p_toSingleV_1_ = p_toSingleV_1_ - this.baseV;
+        float f = (float)this.sheetHeight / (float)this.field_130224_d;
+        p_toSingleV_1_ = p_toSingleV_1_ * f;
+        return p_toSingleV_1_;
+    }
+
+    public List<int[][]> getFramesTextureData()
+    {
+        List<int[][]> list = new ArrayList();
+        list.addAll(this.field_110976_a);
+        return list;
+    }
+
+    public AnimationMetadataSection getAnimationMetadata()
+    {
+        return this.field_110982_k;
+    }
+
+    public void setAnimationMetadata(AnimationMetadataSection p_setAnimationMetadata_1_)
+    {
+        this.field_110982_k = p_setAnimationMetadata_1_;
+    }
+
+    private void loadShadersSprites()
+    {
+        if (Shaders.configNormalMap)
+        {
+            String s = this.field_110984_i + "_n";
+            ResourceLocation resourcelocation = new ResourceLocation(s);
+            resourcelocation = Config.getTextureMap().completeResourceLocation(resourcelocation);
+
+            if (Config.hasResource(resourcelocation))
+            {
+                this.spriteNormal = new TextureAtlasSprite(s);
+                this.spriteNormal.isShadersSprite = true;
+                this.spriteNormal.func_94217_a(this);
+                this.spriteNormal.func_147963_d(this.mipmapLevels);
+            }
+        }
+
+        if (Shaders.configSpecularMap)
+        {
+            String s1 = this.field_110984_i + "_s";
+            ResourceLocation resourcelocation1 = new ResourceLocation(s1);
+            resourcelocation1 = Config.getTextureMap().completeResourceLocation(resourcelocation1);
+
+            if (Config.hasResource(resourcelocation1))
+            {
+                this.spriteSpecular = new TextureAtlasSprite(s1);
+                this.spriteSpecular.isShadersSprite = true;
+                this.spriteSpecular.func_94217_a(this);
+                this.spriteSpecular.func_147963_d(this.mipmapLevels);
+            }
+        }
+    }
 }
