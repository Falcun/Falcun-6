--- ../src-base/minecraft/net/minecraft/client/renderer/OpenGlHelper.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/OpenGlHelper.java
@@ -3,10 +3,13 @@
 import java.nio.ByteBuffer;
 import java.nio.FloatBuffer;
 import java.nio.IntBuffer;
+import java.util.ArrayList;
+import java.util.List;
 import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.GuiMainMenu;
 import net.minecraft.client.settings.GameSettings;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.minecraft.src.Config;
+import org.lwjgl.opengl.ARBCopyBuffer;
 import org.lwjgl.opengl.ARBFramebufferObject;
 import org.lwjgl.opengl.ARBMultitexture;
 import org.lwjgl.opengl.ARBShaderObjects;
@@ -21,11 +24,11 @@
 import org.lwjgl.opengl.GL15;
 import org.lwjgl.opengl.GL20;
 import org.lwjgl.opengl.GL30;
+import org.lwjgl.opengl.GL31;
 import org.lwjgl.opengl.GLContext;
 import oshi.SystemInfo;
 import oshi.hardware.Processor;
 
-@SideOnly(Side.CLIENT)
 public class OpenGlHelper
 {
     public static boolean field_153197_d;
@@ -48,7 +51,17 @@
     public static int field_153209_q;
     public static int field_153210_r;
     private static boolean field_153215_z;
+
+    /**
+     * An OpenGL constant corresponding to GL_TEXTURE0, used when setting data pertaining to auxiliary OpenGL texture
+     * units.
+     */
     public static int field_77478_a;
+
+    /**
+     * An OpenGL constant corresponding to GL_TEXTURE1, used when setting data pertaining to auxiliary OpenGL texture
+     * units.
+     */
     public static int field_77476_b;
     public static int field_176096_r;
     private static boolean field_176088_V;
@@ -82,13 +95,60 @@
     private static boolean field_176090_Y;
     public static int field_176089_P;
     public static int field_148826_e;
+    public static float lastBrightnessX = 0.0F;
+    public static float lastBrightnessY = 0.0F;
+    public static boolean openGL31;
+    public static boolean vboRegions;
+    public static int GL_COPY_READ_BUFFER;
+    public static int GL_COPY_WRITE_BUFFER;
+    public static final int GL_QUADS = 7;
+    public static final int GL_TRIANGLES = 4;
 
+    /**
+     * Initializes the texture constants to be used when rendering lightmap values
+     */
     public static void func_77474_a()
     {
+        Config.initDisplay();
         ContextCapabilities contextcapabilities = GLContext.getCapabilities();
         field_153215_z = contextcapabilities.GL_ARB_multitexture && !contextcapabilities.OpenGL13;
         field_176088_V = contextcapabilities.GL_ARB_texture_env_combine && !contextcapabilities.OpenGL13;
+        openGL31 = contextcapabilities.OpenGL31;
 
+        if (openGL31)
+        {
+            GL_COPY_READ_BUFFER = 36662;
+            GL_COPY_WRITE_BUFFER = 36663;
+        }
+        else
+        {
+            GL_COPY_READ_BUFFER = 36662;
+            GL_COPY_WRITE_BUFFER = 36663;
+        }
+
+        boolean flag = openGL31 || contextcapabilities.GL_ARB_copy_buffer;
+        boolean flag1 = contextcapabilities.OpenGL14;
+        vboRegions = flag && flag1;
+
+        if (!vboRegions)
+        {
+            List<String> list = new ArrayList();
+
+            if (!flag)
+            {
+                list.add("OpenGL 1.3, ARB_copy_buffer");
+            }
+
+            if (!flag1)
+            {
+                list.add("OpenGL 1.4");
+            }
+
+            String s = "VboRegions not supported, missing: " + Config.listToString(list);
+            Config.dbg(s);
+            field_153196_B = field_153196_B + s + "\n";
+        }
+
         if (field_153215_z)
         {
             field_153196_B = field_153196_B + "Using ARB_multitexture.\n";
@@ -246,8 +306,8 @@
         }
 
         field_148824_g = field_148823_f && field_153213_x;
-        String s = GL11.glGetString(GL11.GL_VENDOR).toLowerCase();
-        field_153197_d = s.contains("nvidia");
+        String s1 = GL11.glGetString(GL11.GL_VENDOR).toLowerCase();
+        field_153197_d = s1.contains("nvidia");
         field_176090_Y = !contextcapabilities.OpenGL15 && contextcapabilities.GL_ARB_vertex_buffer_object;
         field_176083_O = contextcapabilities.OpenGL15 || field_176090_Y;
         field_153196_B = field_153196_B + "VBOs are " + (field_176083_O ? "" : "not ") + "available because ";
@@ -268,7 +328,7 @@
             }
         }
 
-        field_181063_b = s.contains("ati");
+        field_181063_b = s1.contains("ati");
 
         if (field_181063_b)
         {
@@ -287,7 +347,7 @@
             Processor[] aprocessor = (new SystemInfo()).getHardware().getProcessors();
             field_183030_aa = String.format("%dx %s", new Object[] {Integer.valueOf(aprocessor.length), aprocessor[0]}).replaceAll("\\s+", " ");
         }
-        catch (Throwable var3)
+        catch (Throwable var5)
         {
             ;
         }
@@ -332,6 +392,9 @@
         }
     }
 
+    /**
+     * creates a shader with the given mode and returns the GL id. params: mode
+     */
     public static int func_153195_b(int p_153195_0_)
     {
         return field_153214_y ? ARBShaderObjects.glCreateShaderObjectARB(p_153195_0_) : GL20.glCreateShader(p_153195_0_);
@@ -614,7 +677,7 @@
 
     public static boolean func_176075_f()
     {
-        return field_176083_O && Minecraft.func_71410_x().field_71474_y.field_178881_t;
+        return Config.isMultiTexture() ? false : (Config.isRenderRegions() && !vboRegions ? false : field_176083_O && Minecraft.func_71410_x().field_71474_y.field_178881_t);
     }
 
     public static void func_153171_g(int p_153171_0_, int p_153171_1_)
@@ -626,9 +689,11 @@
                 case 0:
                     GL30.glBindFramebuffer(p_153171_0_, p_153171_1_);
                     break;
+
                 case 1:
                     ARBFramebufferObject.glBindFramebuffer(p_153171_0_, p_153171_1_);
                     break;
+
                 case 2:
                     EXTFramebufferObject.glBindFramebufferEXT(p_153171_0_, p_153171_1_);
             }
@@ -644,9 +709,11 @@
                 case 0:
                     GL30.glBindRenderbuffer(p_153176_0_, p_153176_1_);
                     break;
+
                 case 1:
                     ARBFramebufferObject.glBindRenderbuffer(p_153176_0_, p_153176_1_);
                     break;
+
                 case 2:
                     EXTFramebufferObject.glBindRenderbufferEXT(p_153176_0_, p_153176_1_);
             }
@@ -662,9 +729,11 @@
                 case 0:
                     GL30.glDeleteRenderbuffers(p_153184_0_);
                     break;
+
                 case 1:
                     ARBFramebufferObject.glDeleteRenderbuffers(p_153184_0_);
                     break;
+
                 case 2:
                     EXTFramebufferObject.glDeleteRenderbuffersEXT(p_153184_0_);
             }
@@ -680,15 +749,20 @@
                 case 0:
                     GL30.glDeleteFramebuffers(p_153174_0_);
                     break;
+
                 case 1:
                     ARBFramebufferObject.glDeleteFramebuffers(p_153174_0_);
                     break;
+
                 case 2:
                     EXTFramebufferObject.glDeleteFramebuffersEXT(p_153174_0_);
             }
         }
     }
 
+    /**
+     * Calls the appropriate glGenFramebuffers method and returns the newly created fbo, or returns -1 if not supported.
+     */
     public static int func_153165_e()
     {
         if (!field_148823_f)
@@ -701,10 +775,13 @@
             {
                 case 0:
                     return GL30.glGenFramebuffers();
+
                 case 1:
                     return ARBFramebufferObject.glGenFramebuffers();
+
                 case 2:
                     return EXTFramebufferObject.glGenFramebuffersEXT();
+
                 default:
                     return -1;
             }
@@ -723,10 +800,13 @@
             {
                 case 0:
                     return GL30.glGenRenderbuffers();
+
                 case 1:
                     return ARBFramebufferObject.glGenRenderbuffers();
+
                 case 2:
                     return EXTFramebufferObject.glGenRenderbuffersEXT();
+
                 default:
                     return -1;
             }
@@ -742,9 +822,11 @@
                 case 0:
                     GL30.glRenderbufferStorage(p_153186_0_, p_153186_1_, p_153186_2_, p_153186_3_);
                     break;
+
                 case 1:
                     ARBFramebufferObject.glRenderbufferStorage(p_153186_0_, p_153186_1_, p_153186_2_, p_153186_3_);
                     break;
+
                 case 2:
                     EXTFramebufferObject.glRenderbufferStorageEXT(p_153186_0_, p_153186_1_, p_153186_2_, p_153186_3_);
             }
@@ -760,9 +842,11 @@
                 case 0:
                     GL30.glFramebufferRenderbuffer(p_153190_0_, p_153190_1_, p_153190_2_, p_153190_3_);
                     break;
+
                 case 1:
                     ARBFramebufferObject.glFramebufferRenderbuffer(p_153190_0_, p_153190_1_, p_153190_2_, p_153190_3_);
                     break;
+
                 case 2:
                     EXTFramebufferObject.glFramebufferRenderbufferEXT(p_153190_0_, p_153190_1_, p_153190_2_, p_153190_3_);
             }
@@ -781,10 +865,13 @@
             {
                 case 0:
                     return GL30.glCheckFramebufferStatus(p_153167_0_);
+
                 case 1:
                     return ARBFramebufferObject.glCheckFramebufferStatus(p_153167_0_);
+
                 case 2:
                     return EXTFramebufferObject.glCheckFramebufferStatusEXT(p_153167_0_);
+
                 default:
                     return -1;
             }
@@ -800,15 +887,20 @@
                 case 0:
                     GL30.glFramebufferTexture2D(p_153188_0_, p_153188_1_, p_153188_2_, p_153188_3_, p_153188_4_);
                     break;
+
                 case 1:
                     ARBFramebufferObject.glFramebufferTexture2D(p_153188_0_, p_153188_1_, p_153188_2_, p_153188_3_, p_153188_4_);
                     break;
+
                 case 2:
                     EXTFramebufferObject.glFramebufferTexture2DEXT(p_153188_0_, p_153188_1_, p_153188_2_, p_153188_3_, p_153188_4_);
             }
         }
     }
 
+    /**
+     * Sets the current lightmap texture to the specified OpenGL constant
+     */
     public static void func_77473_a(int p_77473_0_)
     {
         if (field_153215_z)
@@ -821,6 +913,9 @@
         }
     }
 
+    /**
+     * Sets the current lightmap texture to the specified OpenGL constant
+     */
     public static void func_77472_b(int p_77472_0_)
     {
         if (field_153215_z)
@@ -833,6 +928,9 @@
         }
     }
 
+    /**
+     * Sets the current coordinates of the given lightmap texture
+     */
     public static void func_77475_a(int p_77475_0_, float p_77475_1_, float p_77475_2_)
     {
         if (field_153215_z)
@@ -843,6 +941,12 @@
         {
             GL13.glMultiTexCoord2f(p_77475_0_, p_77475_1_, p_77475_2_);
         }
+
+        if (p_77475_0_ == field_77476_b)
+        {
+            lastBrightnessX = p_77475_1_;
+            lastBrightnessY = p_77475_2_;
+        }
     }
 
     public static void func_148821_a(int p_148821_0_, int p_148821_1_, int p_148821_2_, int p_148821_3_)
@@ -866,9 +970,49 @@
 
     public static boolean func_148822_b()
     {
-        return field_148823_f && Minecraft.func_71410_x().field_71474_y.field_151448_g;
+    	if (!(Minecraft.func_71410_x().field_71462_r instanceof GuiMainMenu)) {
+            return Config.isFastRender() ? false : (Config.isAntialiasing() ? false : field_148823_f && Minecraft.func_71410_x().field_71474_y.field_151448_g);
+    	} else {
+            return (Config.isAntialiasing() ? false : field_148823_f && Minecraft.func_71410_x().field_71474_y.field_151448_g);	
+    	}
     }
 
+    public static void glBufferData(int p_glBufferData_0_, long p_glBufferData_1_, int p_glBufferData_3_)
+    {
+        if (field_176090_Y)
+        {
+            ARBVertexBufferObject.glBufferDataARB(p_glBufferData_0_, p_glBufferData_1_, p_glBufferData_3_);
+        }
+        else
+        {
+            GL15.glBufferData(p_glBufferData_0_, p_glBufferData_1_, p_glBufferData_3_);
+        }
+    }
+
+    public static void glBufferSubData(int p_glBufferSubData_0_, long p_glBufferSubData_1_, ByteBuffer p_glBufferSubData_3_)
+    {
+        if (field_176090_Y)
+        {
+            ARBVertexBufferObject.glBufferSubDataARB(p_glBufferSubData_0_, p_glBufferSubData_1_, p_glBufferSubData_3_);
+        }
+        else
+        {
+            GL15.glBufferSubData(p_glBufferSubData_0_, p_glBufferSubData_1_, p_glBufferSubData_3_);
+        }
+    }
+
+    public static void glCopyBufferSubData(int p_glCopyBufferSubData_0_, int p_glCopyBufferSubData_1_, long p_glCopyBufferSubData_2_, long p_glCopyBufferSubData_4_, long p_glCopyBufferSubData_6_)
+    {
+        if (openGL31)
+        {
+            GL31.glCopyBufferSubData(p_glCopyBufferSubData_0_, p_glCopyBufferSubData_1_, p_glCopyBufferSubData_2_, p_glCopyBufferSubData_4_, p_glCopyBufferSubData_6_);
+        }
+        else
+        {
+            ARBCopyBuffer.glCopyBufferSubData(p_glCopyBufferSubData_0_, p_glCopyBufferSubData_1_, p_glCopyBufferSubData_2_, p_glCopyBufferSubData_4_, p_glCopyBufferSubData_6_);
+        }
+    }
+
     public static String func_183029_j()
     {
         return field_183030_aa == null ? "<unknown>" : field_183030_aa;
