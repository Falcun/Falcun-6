--- ../src-base/minecraft/net/minecraft/client/entity/AbstractClientPlayer.java
+++ ../src-work/minecraft/net/minecraft/client/entity/AbstractClientPlayer.java
@@ -1,7 +1,10 @@
 package net.minecraft.client.entity;
 
-import com.mojang.authlib.GameProfile;
 import java.io.File;
+
+import com.mojang.authlib.GameProfile;
+
+import net.mattbenson.Wrapper;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.network.NetworkPlayerInfo;
 import net.minecraft.client.renderer.ImageBufferDownload;
@@ -15,33 +18,55 @@
 import net.minecraft.init.Items;
 import net.minecraft.util.ResourceLocation;
 import net.minecraft.util.StringUtils;
+import net.minecraft.util.Vec3;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldSettings;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.optifine.player.PlayerConfigurations;
+import net.optifine.reflect.Reflector;
 
-@SideOnly(Side.CLIENT)
 public abstract class AbstractClientPlayer extends EntityPlayer
 {
     private NetworkPlayerInfo field_175157_a;
-
+    public ResourceLocation locationOfCape = null;
+    private long reloadCapeTimeMs = 0L;
+    private boolean elytraOfCape = false;
+    private String nameClear = null;
+    private static final ResourceLocation TEXTURE_ELYTRA = new ResourceLocation("textures/entity/elytra.png");
+    public ResourceLocation capeOverride = null;
+    
     public AbstractClientPlayer(World p_i45074_1_, GameProfile p_i45074_2_)
     {
         super(p_i45074_1_, p_i45074_2_);
+        this.nameClear = p_i45074_2_.getName();
+
+        if (this.nameClear != null && !this.nameClear.isEmpty())
+        {
+            this.nameClear = StringUtils.func_76338_a(this.nameClear);
+        }
+
+        //Matt
+        //CapeUtils.downloadCape(this);
+        PlayerConfigurations.getPlayerConfiguration(this);
     }
 
+    /**
+     * Returns true if the player is in spectator mode.
+     */
     public boolean func_175149_v()
     {
         NetworkPlayerInfo networkplayerinfo = Minecraft.func_71410_x().func_147114_u().func_175102_a(this.func_146103_bH().getId());
         return networkplayerinfo != null && networkplayerinfo.func_178848_b() == WorldSettings.GameType.SPECTATOR;
     }
 
+    /**
+     * Checks if this instance of AbstractClientPlayer has any associated player data.
+     */
     public boolean func_152122_n()
     {
         return this.func_175155_b() != null;
     }
 
-    protected NetworkPlayerInfo func_175155_b()
+    public NetworkPlayerInfo func_175155_b()
     {
         if (this.field_175157_a == null)
         {
@@ -51,12 +76,18 @@
         return this.field_175157_a;
     }
 
+    /**
+     * Returns true if the player has an associated skin.
+     */
     public boolean func_152123_o()
     {
         NetworkPlayerInfo networkplayerinfo = this.func_175155_b();
         return networkplayerinfo != null && networkplayerinfo.func_178856_e();
     }
 
+    /**
+     * Returns true if the player instance has an associated skin.
+     */
     public ResourceLocation func_110306_p()
     {
         NetworkPlayerInfo networkplayerinfo = this.func_175155_b();
@@ -65,8 +96,35 @@
 
     public ResourceLocation func_110303_q()
     {
-        NetworkPlayerInfo networkplayerinfo = this.func_175155_b();
-        return networkplayerinfo == null ? null : networkplayerinfo.func_178861_h();
+    	if(capeOverride != null) {
+    		return capeOverride;
+    	}
+    	
+    	return Wrapper.getInstance().getLocationCape(this);
+    	/*
+        if (!Config.isShowCapes())
+        {
+            return null;
+        }
+        else
+        {
+            if (this.reloadCapeTimeMs != 0L && System.currentTimeMillis() > this.reloadCapeTimeMs)
+            {
+                CapeUtils.reloadCape(this);
+                this.reloadCapeTimeMs = 0L;
+            }
+
+            if (this.locationOfCape != null)
+            {
+                return this.locationOfCape;
+            }
+            else
+            {
+                NetworkPlayerInfo networkplayerinfo = this.getPlayerInfo();
+                return networkplayerinfo == null ? null : networkplayerinfo.getLocationCape();
+            }
+        }
+        */
     }
 
     public static ThreadDownloadImageData func_110304_a(ResourceLocation p_110304_0_, String p_110304_1_)
@@ -83,6 +141,11 @@
         return (ThreadDownloadImageData)itextureobject;
     }
 
+    /**
+     * Returns true if the username has an associated skin.
+     *  
+     * @param username The username of the player being checked.
+     */
     public static ResourceLocation func_110311_f(String p_110311_0_)
     {
         return new ResourceLocation("skins/" + StringUtils.func_76338_a(p_110311_0_));
@@ -128,6 +191,59 @@
             f *= 1.0F - f1 * 0.15F;
         }
 
-        return f;
+        return Reflector.ForgeHooksClient_getOffsetFOV.exists() ? Reflector.callFloat(Reflector.ForgeHooksClient_getOffsetFOV, new Object[] {this, Float.valueOf(f)}): f;
     }
+
+    public String getNameClear()
+    {
+        return this.nameClear;
+    }
+
+    public ResourceLocation getLocationOfCape()
+    {
+        return this.locationOfCape;
+    }
+
+    public void setLocationOfCape(ResourceLocation p_setLocationOfCape_1_)
+    {
+        this.locationOfCape = p_setLocationOfCape_1_;
+    }
+
+    public boolean hasElytraCape()
+    {
+        ResourceLocation resourcelocation = this.func_110303_q();
+        return resourcelocation == null ? false : (resourcelocation == this.locationOfCape ? this.elytraOfCape : true);
+    }
+
+    public void setElytraOfCape(boolean p_setElytraOfCape_1_)
+    {
+        this.elytraOfCape = p_setElytraOfCape_1_;
+    }
+
+    public boolean isElytraOfCape()
+    {
+        return this.elytraOfCape;
+    }
+
+    public long getReloadCapeTimeMs()
+    {
+        return this.reloadCapeTimeMs;
+    }
+
+    public void setReloadCapeTimeMs(long p_setReloadCapeTimeMs_1_)
+    {
+        this.reloadCapeTimeMs = p_setReloadCapeTimeMs_1_;
+    }
+
+    /**
+     * interpolated look vector
+     */
+    public Vec3 func_70676_i(float partialTicks)
+    {
+        return this.func_174806_f(this.field_70125_A, this.field_70177_z);
+    }
+
+	public ResourceLocation getBandana() {
+		return Wrapper.getInstance().getBandana(this);
+	}
 }
