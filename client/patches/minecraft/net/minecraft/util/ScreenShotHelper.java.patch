--- ../src-base/minecraft/net/minecraft/util/ScreenShotHelper.java
+++ ../src-work/minecraft/net/minecraft/util/ScreenShotHelper.java
@@ -1,57 +1,87 @@
 package net.minecraft.util;
 
-import java.awt.image.BufferedImage;
 import java.io.File;
 import java.nio.IntBuffer;
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
-import javax.imageio.ImageIO;
-import net.minecraft.client.renderer.GlStateManager;
-import net.minecraft.client.renderer.OpenGlHelper;
-import net.minecraft.client.renderer.texture.TextureUtil;
-import net.minecraft.client.shader.Framebuffer;
-import net.minecraft.event.ClickEvent;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import java.util.concurrent.CompletableFuture;
+
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.BufferUtils;
 import org.lwjgl.opengl.GL11;
 import org.lwjgl.opengl.GL12;
 
-@SideOnly(Side.CLIENT)
+import net.mattbenson.utils.AsyncScreenshots;
+import net.minecraft.client.Minecraft;
+import net.minecraft.client.gui.ScaledResolution;
+import net.minecraft.client.renderer.GlStateManager;
+import net.minecraft.client.renderer.OpenGlHelper;
+import net.minecraft.client.shader.Framebuffer;
+import net.minecraft.src.Config;
+
 public class ScreenShotHelper
 {
     private static final Logger field_148261_a = LogManager.getLogger();
     private static final DateFormat field_74295_a = new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss");
+
+    /** A buffer to hold pixel values returned by OpenGL. */
     private static IntBuffer field_74293_b;
+
+    /**
+     * The built-up array that contains all the pixel values returned by OpenGL.
+     */
     private static int[] field_74294_c;
 
+    /**
+     * Saves a screenshot in the game directory with a time-stamped filename.  Args: gameDirectory,
+     * requestedWidthInPixels, requestedHeightInPixels, frameBuffer
+     */
     public static IChatComponent func_148260_a(File p_148260_0_, int p_148260_1_, int p_148260_2_, Framebuffer p_148260_3_)
     {
         return func_148259_a(p_148260_0_, (String)null, p_148260_1_, p_148260_2_, p_148260_3_);
     }
 
+    /**
+     * Saves a screenshot in the game directory with the given file name (or null to generate a time-stamped name).
+     * Args: gameDirectory, fileName, requestedWidthInPixels, requestedHeightInPixels, frameBuffer
+     */
     public static IChatComponent func_148259_a(File p_148259_0_, String p_148259_1_, int p_148259_2_, int p_148259_3_, Framebuffer p_148259_4_)
     {
         try
         {
             File file1 = new File(p_148259_0_, "screenshots");
             file1.mkdir();
+            Minecraft minecraft = Minecraft.func_71410_x();
+            int i = Config.getGameSettings().field_74335_Z;
+            ScaledResolution scaledresolution = new ScaledResolution(minecraft);
+            int j = scaledresolution.func_78325_e();
+            int k = Config.getScreenshotSize();
+            boolean flag = OpenGlHelper.func_148822_b() && k > 1;
 
+            if (flag)
+            {
+                Config.getGameSettings().field_74335_Z = j * k;
+                resize(p_148259_2_ * k, p_148259_3_ * k);
+                GlStateManager.func_179094_E();
+                GlStateManager.func_179086_m(16640);
+                minecraft.func_147110_a().func_147610_a(true);
+                minecraft.field_71460_t.func_181560_a(Config.renderPartialTicks, System.nanoTime());
+            }
+
             if (OpenGlHelper.func_148822_b())
             {
                 p_148259_2_ = p_148259_4_.field_147622_a;
                 p_148259_3_ = p_148259_4_.field_147620_b;
             }
 
-            int i = p_148259_2_ * p_148259_3_;
+            int l = p_148259_2_ * p_148259_3_;
 
-            if (field_74293_b == null || field_74293_b.capacity() < i)
+            if (field_74293_b == null || field_74293_b.capacity() < l)
             {
-                field_74293_b = BufferUtils.createIntBuffer(i);
-                field_74294_c = new int[i];
+                field_74293_b = BufferUtils.createIntBuffer(l);
+                field_74294_c = new int[l];
             }
 
             GL11.glPixelStorei(GL11.GL_PACK_ALIGNMENT, 1);
@@ -69,44 +99,60 @@
             }
 
             field_74293_b.get(field_74294_c);
-            TextureUtil.func_147953_a(field_74294_c, p_148259_2_, p_148259_3_);
+            
+            /*
+            TextureUtil.processPixelValues(pixelValues, width, height);
             BufferedImage bufferedimage = null;
 
-            if (OpenGlHelper.func_148822_b())
+            if (OpenGlHelper.isFramebufferEnabled())
             {
-                bufferedimage = new BufferedImage(p_148259_4_.field_147621_c, p_148259_4_.field_147618_d, 1);
-                int j = p_148259_4_.field_147620_b - p_148259_4_.field_147618_d;
+                bufferedimage = new BufferedImage(buffer.framebufferWidth, buffer.framebufferHeight, 1);
+                int i1 = buffer.framebufferTextureHeight - buffer.framebufferHeight;
 
-                for (int k = j; k < p_148259_4_.field_147620_b; ++k)
+                for (int j1 = i1; j1 < buffer.framebufferTextureHeight; ++j1)
                 {
-                    for (int l = 0; l < p_148259_4_.field_147621_c; ++l)
+                    for (int k1 = 0; k1 < buffer.framebufferWidth; ++k1)
                     {
-                        bufferedimage.setRGB(l, k - j, field_74294_c[k * p_148259_4_.field_147622_a + l]);
+                        bufferedimage.setRGB(k1, j1 - i1, pixelValues[j1 * buffer.framebufferTextureWidth + k1]);
                     }
                 }
             }
             else
             {
-                bufferedimage = new BufferedImage(p_148259_2_, p_148259_3_, 1);
-                bufferedimage.setRGB(0, 0, p_148259_2_, p_148259_3_, field_74294_c, 0, p_148259_2_);
+                bufferedimage = new BufferedImage(width, height, 1);
+                bufferedimage.setRGB(0, 0, width, height, pixelValues, 0, width);
             }
 
+            if (flag)
+            {
+                minecraft.getFramebuffer().unbindFramebuffer();
+                GlStateManager.popMatrix();
+                Config.getGameSettings().guiScale = i;
+                resize(width, height);
+            }
+
             File file2;
 
-            if (p_148259_1_ == null)
+            if (screenshotName == null)
             {
-                file2 = func_74290_a(file1);
+                file2 = getTimestampedPNGFileForDirectory(file1);
             }
             else
             {
-                file2 = new File(file1, p_148259_1_);
+                file2 = new File(file1, screenshotName);
             }
 
+            file2 = file2.getCanonicalFile();
             ImageIO.write(bufferedimage, "png", (File)file2);
             IChatComponent ichatcomponent = new ChatComponentText(file2.getName());
-            ichatcomponent.func_150256_b().func_150241_a(new ClickEvent(ClickEvent.Action.OPEN_FILE, file2.getAbsolutePath()));
-            ichatcomponent.func_150256_b().func_150228_d(Boolean.valueOf(true));
+            ichatcomponent.getChatStyle().setChatClickEvent(new ClickEvent(ClickEvent.Action.OPEN_FILE, file2.getAbsolutePath()));
+            ichatcomponent.getChatStyle().setUnderlined(Boolean.valueOf(true));
             return new ChatComponentTranslation("screenshot.success", new Object[] {ichatcomponent});
+            */
+            
+        	CompletableFuture.runAsync((Runnable)new AsyncScreenshots(p_148259_2_, p_148259_3_, field_74294_c, p_148259_4_, file1));
+ 	       
+    		return new ChatComponentText("Taking screenshot... Please wait a few!");
         }
         catch (Exception exception)
         {
@@ -115,7 +161,13 @@
         }
     }
 
-    private static File func_74290_a(File p_74290_0_)
+    /**
+     * Creates a unique PNG file in the given directory named by a timestamp.  Handles cases where the timestamp alone
+     * is not enough to create a uniquely named file, though it still might suffer from an unlikely race condition where
+     * the filename was unique when this method was called, but another process or thread created a file at the same
+     * path immediately after this method returned.
+     */
+    public static File func_74290_a(File p_74290_0_)
     {
         String s = field_74295_a.format(new Date()).toString();
         int i = 1;
@@ -132,4 +184,30 @@
             ++i;
         }
     }
+
+    private static void resize(int p_resize_0_, int p_resize_1_)
+    {
+        Minecraft minecraft = Minecraft.func_71410_x();
+        minecraft.field_71443_c = Math.max(1, p_resize_0_);
+        minecraft.field_71440_d = Math.max(1, p_resize_1_);
+
+        if (minecraft.field_71462_r != null)
+        {
+            ScaledResolution scaledresolution = new ScaledResolution(minecraft);
+            minecraft.field_71462_r.func_175273_b(minecraft, scaledresolution.func_78326_a(), scaledresolution.func_78328_b());
+        }
+
+        updateFramebufferSize();
+    }
+
+    private static void updateFramebufferSize()
+    {
+        Minecraft minecraft = Minecraft.func_71410_x();
+        minecraft.func_147110_a().func_147613_a(minecraft.field_71443_c, minecraft.field_71440_d);
+
+        if (minecraft.field_71460_t != null)
+        {
+            minecraft.field_71460_t.func_147704_a(minecraft.field_71443_c, minecraft.field_71440_d);
+        }
+    }
 }
