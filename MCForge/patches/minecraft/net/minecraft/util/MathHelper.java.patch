--- ../src-base/minecraft/net/minecraft/util/MathHelper.java
+++ ../src-work/minecraft/net/minecraft/util/MathHelper.java
@@ -2,26 +2,54 @@
 
 import java.util.Random;
 import java.util.UUID;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.optifine.util.MathUtils;
 
 public class MathHelper
 {
     public static final float field_180189_a = func_76129_c(2.0F);
+    private static final int SIN_BITS = 12;
+    private static final int SIN_MASK = 4095;
+    private static final int SIN_COUNT = 4096;
+    private static final int SIN_COUNT_D4 = 1024;
+    public static final float PI = MathUtils.roundToFloat(Math.PI);
+    public static final float PI2 = MathUtils.roundToFloat((Math.PI * 2D));
+    public static final float PId2 = MathUtils.roundToFloat((Math.PI / 2D));
+    private static final float radToIndex = MathUtils.roundToFloat(651.8986469044033D);
+    public static final float deg2Rad = MathUtils.roundToFloat(0.017453292519943295D);
+    private static final float[] SIN_TABLE_FAST = new float[4096];
+    public static boolean fastMath = false;
+
+    /**
+     * A table of sin values computed from 0 (inclusive) to 2*pi (exclusive), with steps of 2*PI / 65536.
+     */
     private static final float[] field_76144_a = new float[65536];
+
+    /**
+     * Though it looks like an array, this is really more like a mapping.  Key (index of this array) is the upper 5 bits
+     * of the result of multiplying a 32-bit unsigned integer by the B(2, 5) De Bruijn sequence 0x077CB531.  Value
+     * (value stored in the array) is the unique index (from the right) of the leftmost one-bit in a 32-bit unsigned
+     * integer that can cause the upper 5 bits to get that value.  Used for highly optimized "find the log-base-2 of
+     * this number" calculations.
+     */
     private static final int[] field_151242_b;
     private static final double field_181163_d;
     private static final double[] field_181164_e;
     private static final double[] field_181165_f;
 
+    /**
+     * sin looked up in a table
+     */
     public static float func_76126_a(float p_76126_0_)
     {
-        return field_76144_a[(int)(p_76126_0_ * 10430.378F) & 65535];
+        return fastMath ? SIN_TABLE_FAST[(int)(p_76126_0_ * radToIndex) & 4095] : field_76144_a[(int)(p_76126_0_ * 10430.378F) & 65535];
     }
 
+    /**
+     * cos looked up in the sin table with the appropriate offset
+     */
     public static float func_76134_b(float p_76134_0_)
     {
-        return field_76144_a[(int)(p_76134_0_ * 10430.378F + 16384.0F) & 65535];
+        return fastMath ? SIN_TABLE_FAST[(int)(p_76134_0_ * radToIndex + 1024.0F) & 4095] : field_76144_a[(int)(p_76134_0_ * 10430.378F + 16384.0F) & 65535];
     }
 
     public static float func_76129_c(float p_76129_0_)
@@ -34,31 +62,41 @@
         return (float)Math.sqrt(p_76133_0_);
     }
 
+    /**
+     * Returns the greatest integer less than or equal to the float argument
+     */
     public static int func_76141_d(float p_76141_0_)
     {
         int i = (int)p_76141_0_;
         return p_76141_0_ < (float)i ? i - 1 : i;
     }
 
-    @SideOnly(Side.CLIENT)
+    /**
+     * returns par0 cast as an int, and no greater than Integer.MAX_VALUE-1024
+     */
     public static int func_76140_b(double p_76140_0_)
     {
         return (int)(p_76140_0_ + 1024.0D) - 1024;
     }
 
+    /**
+     * Returns the greatest integer less than or equal to the double argument
+     */
     public static int func_76128_c(double p_76128_0_)
     {
         int i = (int)p_76128_0_;
         return p_76128_0_ < (double)i ? i - 1 : i;
     }
 
+    /**
+     * Long version of floor_double
+     */
     public static long func_76124_d(double p_76124_0_)
     {
         long i = (long)p_76124_0_;
         return p_76124_0_ < (double)i ? i - 1L : i;
     }
 
-    @SideOnly(Side.CLIENT)
     public static int func_154353_e(double p_154353_0_)
     {
         return (int)(p_154353_0_ >= 0.0D ? p_154353_0_ : -p_154353_0_ + 1.0D);
@@ -69,6 +107,9 @@
         return p_76135_0_ >= 0.0F ? p_76135_0_ : -p_76135_0_;
     }
 
+    /**
+     * Returns the unsigned value of an int.
+     */
     public static int func_76130_a(int p_76130_0_)
     {
         return p_76130_0_ >= 0 ? p_76130_0_ : -p_76130_0_;
@@ -86,11 +127,19 @@
         return p_76143_0_ > (double)i ? i + 1 : i;
     }
 
+    /**
+     * Returns the value of the first parameter, clamped to be within the lower and upper limits given by the second and
+     * third parameters.
+     */
     public static int func_76125_a(int p_76125_0_, int p_76125_1_, int p_76125_2_)
     {
         return p_76125_0_ < p_76125_1_ ? p_76125_1_ : (p_76125_0_ > p_76125_2_ ? p_76125_2_ : p_76125_0_);
     }
 
+    /**
+     * Returns the value of the first parameter, clamped to be within the lower and upper limits given by the second and
+     * third parameters
+     */
     public static float func_76131_a(float p_76131_0_, float p_76131_1_, float p_76131_2_)
     {
         return p_76131_0_ < p_76131_1_ ? p_76131_1_ : (p_76131_0_ > p_76131_2_ ? p_76131_2_ : p_76131_0_);
@@ -106,6 +155,9 @@
         return p_151238_4_ < 0.0D ? p_151238_0_ : (p_151238_4_ > 1.0D ? p_151238_2_ : p_151238_0_ + (p_151238_2_ - p_151238_0_) * p_151238_4_);
     }
 
+    /**
+     * Maximum of the absolute value of two numbers.
+     */
     public static double func_76132_a(double p_76132_0_, double p_76132_2_)
     {
         if (p_76132_0_ < 0.0D)
@@ -121,7 +173,9 @@
         return p_76132_0_ > p_76132_2_ ? p_76132_0_ : p_76132_2_;
     }
 
-    @SideOnly(Side.CLIENT)
+    /**
+     * Buckets an integer with specifed bucket sizes.  Args: i, bucketSize
+     */
     public static int func_76137_a(int p_76137_0_, int p_76137_1_)
     {
         return p_76137_0_ < 0 ? -((-p_76137_0_ - 1) / p_76137_1_) - 1 : p_76137_0_ / p_76137_1_;
@@ -154,18 +208,19 @@
         return (double)i / (double)p_76127_0_.length;
     }
 
-    @SideOnly(Side.CLIENT)
     public static boolean func_180185_a(float p_180185_0_, float p_180185_1_)
     {
         return func_76135_e(p_180185_1_ - p_180185_0_) < 1.0E-5F;
     }
 
-    @SideOnly(Side.CLIENT)
     public static int func_180184_b(int p_180184_0_, int p_180184_1_)
     {
         return (p_180184_0_ % p_180184_1_ + p_180184_1_) % p_180184_1_;
     }
 
+    /**
+     * the angle is reduced to an angle between -180 and +180 by mod, and a 360 check
+     */
     public static float func_76142_g(float p_76142_0_)
     {
         p_76142_0_ = p_76142_0_ % 360.0F;
@@ -183,6 +238,9 @@
         return p_76142_0_;
     }
 
+    /**
+     * the angle is reduced to an angle between -180 and +180 by mod, and a 360 check
+     */
     public static double func_76138_g(double p_76138_0_)
     {
         p_76138_0_ = p_76138_0_ % 360.0D;
@@ -200,6 +258,9 @@
         return p_76138_0_;
     }
 
+    /**
+     * parses the string as integer or returns the second parameter if it fails
+     */
     public static int func_82715_a(String p_82715_0_, int p_82715_1_)
     {
         try
@@ -212,11 +273,17 @@
         }
     }
 
+    /**
+     * parses the string as integer or returns the second parameter if it fails. this value is capped to par2
+     */
     public static int func_82714_a(String p_82714_0_, int p_82714_1_, int p_82714_2_)
     {
         return Math.max(p_82714_2_, func_82715_a(p_82714_0_, p_82714_1_));
     }
 
+    /**
+     * parses the string as double or returns the second parameter if it fails.
+     */
     public static double func_82712_a(String p_82712_0_, double p_82712_1_)
     {
         try
@@ -234,6 +301,9 @@
         return Math.max(p_82713_3_, func_82712_a(p_82713_0_, p_82713_1_));
     }
 
+    /**
+     * Returns the input value rounded up to the next highest power of two.
+     */
     public static int func_151236_b(int p_151236_0_)
     {
         int i = p_151236_0_ - 1;
@@ -245,17 +315,29 @@
         return i + 1;
     }
 
+    /**
+     * Is the given value a power of two?  (1, 2, 4, 8, 16, ...)
+     */
     private static boolean func_151235_d(int p_151235_0_)
     {
         return p_151235_0_ != 0 && (p_151235_0_ & p_151235_0_ - 1) == 0;
     }
 
+    /**
+     * Uses a B(2, 5) De Bruijn sequence and a lookup table to efficiently calculate the log-base-two of the given
+     * value.  Optimized for cases where the input value is a power-of-two.  If the input value is not a power-of-two,
+     * then subtract 1 from the return value.
+     */
     private static int func_151241_e(int p_151241_0_)
     {
         p_151241_0_ = func_151235_d(p_151241_0_) ? p_151241_0_ : func_151236_b(p_151241_0_);
         return field_151242_b[(int)((long)p_151241_0_ * 125613361L >> 27) & 31];
     }
 
+    /**
+     * Efficiently calculates the floor of the base-2 log of an integer value.  This is effectively the index of the
+     * highest bit that is set.  For example, if the number in binary is 0...100101, this will return 5.
+     */
     public static int func_151239_c(int p_151239_0_)
     {
         return func_151241_e(p_151239_0_) - (func_151235_d(p_151239_0_) ? 0 : 1);
@@ -283,21 +365,18 @@
         }
     }
 
-    @SideOnly(Side.CLIENT)
     public static int func_180183_b(float p_180183_0_, float p_180183_1_, float p_180183_2_)
     {
         return func_180181_b(func_76141_d(p_180183_0_ * 255.0F), func_76141_d(p_180183_1_ * 255.0F), func_76141_d(p_180183_2_ * 255.0F));
     }
 
-    @SideOnly(Side.CLIENT)
     public static int func_180181_b(int p_180181_0_, int p_180181_1_, int p_180181_2_)
     {
-        int lvt_3_1_ = (p_180181_0_ << 8) + p_180181_1_;
-        lvt_3_1_ = (lvt_3_1_ << 8) + p_180181_2_;
-        return lvt_3_1_;
+        int i = (p_180181_0_ << 8) + p_180181_1_;
+        i = (i << 8) + p_180181_2_;
+        return i;
     }
 
-    @SideOnly(Side.CLIENT)
     public static int func_180188_d(int p_180188_0_, int p_180188_1_)
     {
         int i = (p_180188_0_ & 16711680) >> 16;
@@ -312,26 +391,16 @@
         return p_180188_0_ & -16777216 | k1 << 16 | l1 << 8 | i2;
     }
 
-    @SideOnly(Side.CLIENT)
     public static double func_181162_h(double p_181162_0_)
     {
         return p_181162_0_ - Math.floor(p_181162_0_);
     }
 
-    @SideOnly(Side.CLIENT)
     public static long func_180186_a(Vec3i p_180186_0_)
     {
         return func_180187_c(p_180186_0_.func_177958_n(), p_180186_0_.func_177956_o(), p_180186_0_.func_177952_p());
     }
 
-    public static UUID func_180182_a(Random p_180182_0_)
-    {
-        long i = p_180182_0_.nextLong() & -61441L | 16384L;
-        long j = p_180182_0_.nextLong() & 4611686018427387903L | Long.MIN_VALUE;
-        return new UUID(i, j);
-    }
-
-    @SideOnly(Side.CLIENT)
     public static long func_180187_c(int p_180187_0_, int p_180187_1_, int p_180187_2_)
     {
         long i = (long)(p_180187_0_ * 3129871) ^ (long)p_180187_2_ * 116129781L ^ (long)p_180187_1_;
@@ -339,6 +408,13 @@
         return i;
     }
 
+    public static UUID func_180182_a(Random p_180182_0_)
+    {
+        long i = p_180182_0_.nextLong() & -61441L | 16384L;
+        long j = p_180182_0_.nextLong() & 4611686018427387903L | Long.MIN_VALUE;
+        return new UUID(i, j);
+    }
+
     public static double func_181160_c(double p_181160_0_, double p_181160_2_, double p_181160_4_)
     {
         return (p_181160_0_ - p_181160_2_) / (p_181160_4_ - p_181160_2_);
@@ -418,7 +494,6 @@
         return p_181161_0_;
     }
 
-    @SideOnly(Side.CLIENT)
     public static int func_181758_c(float p_181758_0_, float p_181758_1_, float p_181758_2_)
     {
         int i = (int)(p_181758_0_ * 6.0F) % 6;
@@ -437,31 +512,37 @@
                 f5 = f3;
                 f6 = f1;
                 break;
+
             case 1:
                 f4 = f2;
                 f5 = p_181758_2_;
                 f6 = f1;
                 break;
+
             case 2:
                 f4 = f1;
                 f5 = p_181758_2_;
                 f6 = f3;
                 break;
+
             case 3:
                 f4 = f1;
                 f5 = f2;
                 f6 = p_181758_2_;
                 break;
+
             case 4:
                 f4 = f3;
                 f5 = f1;
                 f6 = p_181758_2_;
                 break;
+
             case 5:
                 f4 = p_181758_2_;
                 f5 = f1;
                 f6 = f2;
                 break;
+
             default:
                 throw new RuntimeException("Something went wrong when converting from HSV to RGB. Input was " + p_181758_0_ + ", " + p_181758_1_ + ", " + p_181758_2_);
         }
@@ -479,17 +560,22 @@
             field_76144_a[i] = (float)Math.sin((double)i * Math.PI * 2.0D / 65536.0D);
         }
 
+        for (int j = 0; j < SIN_TABLE_FAST.length; ++j)
+        {
+            SIN_TABLE_FAST[j] = MathUtils.roundToFloat(Math.sin((double)j * Math.PI * 2.0D / 4096.0D));
+        }
+
         field_151242_b = new int[] {0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9};
         field_181163_d = Double.longBitsToDouble(4805340802404319232L);
         field_181164_e = new double[257];
         field_181165_f = new double[257];
 
-        for (int j = 0; j < 257; ++j)
+        for (int k = 0; k < 257; ++k)
         {
-            double d0 = (double)j / 256.0D;
+            double d0 = (double)k / 256.0D;
             double d1 = Math.asin(d0);
-            field_181165_f[j] = Math.cos(d1);
-            field_181164_e[j] = d1;
+            field_181165_f[k] = Math.cos(d1);
+            field_181164_e[k] = d1;
         }
     }
 }
