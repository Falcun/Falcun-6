--- ../src-base/minecraft/net/minecraft/block/BlockAir.java
+++ ../src-work/minecraft/net/minecraft/block/BlockAir.java
@@ -1,5 +1,7 @@
 package net.minecraft.block;
 
+import java.util.IdentityHashMap;
+import java.util.Map;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.util.AxisAlignedBB;
@@ -8,11 +10,16 @@
 
 public class BlockAir extends Block
 {
+    private static Map mapOriginalOpacity = new IdentityHashMap();
+
     protected BlockAir()
     {
         super(Material.field_151579_a);
     }
 
+    /**
+     * The type of render function called. 3 for standard block models, 2 for TESR's, 1 for liquids, -1 is no render
+     */
     public int func_149645_b()
     {
         return -1;
@@ -23,6 +30,9 @@
         return null;
     }
 
+    /**
+     * Used to determine ambient occlusion and culling when rebuilding chunks for render
+     */
     public boolean func_149662_c()
     {
         return false;
@@ -33,12 +43,40 @@
         return false;
     }
 
+    /**
+     * Spawns this Block's drops into the World as EntityItems.
+     *  
+     * @param chance The chance that each Item is actually spawned (1.0 = always, 0.0 = never)
+     * @param fortune The player's fortune level
+     */
     public void func_180653_a(World p_180653_1_, BlockPos p_180653_2_, IBlockState p_180653_3_, float p_180653_4_, int p_180653_5_)
     {
     }
 
+    /**
+     * Whether this Block can be replaced directly by other blocks (true for e.g. tall grass)
+     */
     public boolean func_176200_f(World p_176200_1_, BlockPos p_176200_2_)
     {
         return true;
     }
+
+    public static void setLightOpacity(Block p_setLightOpacity_0_, int p_setLightOpacity_1_)
+    {
+        if (!mapOriginalOpacity.containsKey(p_setLightOpacity_0_))
+        {
+            mapOriginalOpacity.put(p_setLightOpacity_0_, Integer.valueOf(p_setLightOpacity_0_.field_149786_r));
+        }
+
+        p_setLightOpacity_0_.field_149786_r = p_setLightOpacity_1_;
+    }
+
+    public static void restoreLightOpacity(Block p_restoreLightOpacity_0_)
+    {
+        if (mapOriginalOpacity.containsKey(p_restoreLightOpacity_0_))
+        {
+            int i = ((Integer)mapOriginalOpacity.get(p_restoreLightOpacity_0_)).intValue();
+            setLightOpacity(p_restoreLightOpacity_0_, i);
+        }
+    }
 }
