--- ../src-base/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
+++ ../src-work/minecraft/net/minecraft/client/renderer/texture/TextureMap.java
@@ -2,14 +2,19 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import java.awt.Dimension;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
+import java.io.InputStream;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
+import java.util.TreeSet;
 import java.util.Map.Entry;
 import java.util.concurrent.Callable;
-import net.minecraft.client.Minecraft;
+import net.minecraft.client.renderer.GlStateManager;
 import net.minecraft.client.renderer.StitcherException;
 import net.minecraft.client.resources.IResource;
 import net.minecraft.client.resources.IResourceManager;
@@ -17,17 +22,26 @@
 import net.minecraft.client.resources.data.TextureMetadataSection;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
+import net.minecraft.src.Config;
 import net.minecraft.util.MathHelper;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.ResourceLocation;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.optifine.BetterGrass;
+import net.optifine.ConnectedTextures;
+import net.optifine.CustomItems;
+import net.optifine.EmissiveTextures;
+import net.optifine.SmartAnimations;
+import net.optifine.reflect.Reflector;
+import net.optifine.reflect.ReflectorForge;
+import net.optifine.shaders.ShadersTex;
+import net.optifine.util.CounterInt;
+import net.optifine.util.TextureUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-@SideOnly(Side.CLIENT)
 public class TextureMap extends AbstractTexture implements ITickableTextureObject
 {
+    private static final boolean ENABLE_SKIP = Boolean.parseBoolean(System.getProperty("fml.skipFirstTextureLoad", "true"));
     private static final Logger field_147635_d = LogManager.getLogger();
     public static final ResourceLocation field_174945_f = new ResourceLocation("missingno");
     public static final ResourceLocation field_110575_b = new ResourceLocation("textures/atlas/blocks.png");
@@ -38,30 +52,65 @@
     private final IIconCreator field_174946_m;
     private int field_147636_j;
     private final TextureAtlasSprite field_94249_f;
+    private boolean skipFirst;
+    private TextureAtlasSprite[] iconGrid;
+    private int iconGridSize;
+    private int iconGridCountX;
+    private int iconGridCountY;
+    private double iconGridSizeU;
+    private double iconGridSizeV;
+    private CounterInt counterIndexInMap;
+    public int atlasWidth;
+    public int atlasHeight;
+    private int countAnimationsActive;
+    private int frameCountAnimations;
 
     public TextureMap(String p_i46099_1_)
     {
         this(p_i46099_1_, (IIconCreator)null);
     }
 
+    public TextureMap(String p_i5_1_, boolean p_i5_2_)
+    {
+        this(p_i5_1_, (IIconCreator)null, p_i5_2_);
+    }
+
     public TextureMap(String p_i46100_1_, IIconCreator p_i46100_2_)
     {
+        this(p_i46100_1_, p_i46100_2_, false);
+    }
+
+    public TextureMap(String p_i6_1_, IIconCreator p_i6_2_, boolean p_i6_3_)
+    {
+        this.skipFirst = false;
+        this.iconGrid = null;
+        this.iconGridSize = -1;
+        this.iconGridCountX = -1;
+        this.iconGridCountY = -1;
+        this.iconGridSizeU = -1.0D;
+        this.iconGridSizeV = -1.0D;
+        this.counterIndexInMap = new CounterInt(0);
+        this.atlasWidth = 0;
+        this.atlasHeight = 0;
         this.field_94258_i = Lists.<TextureAtlasSprite>newArrayList();
         this.field_110574_e = Maps.<String, TextureAtlasSprite>newHashMap();
         this.field_94252_e = Maps.<String, TextureAtlasSprite>newHashMap();
         this.field_94249_f = new TextureAtlasSprite("missingno");
-        this.field_94254_c = p_i46100_1_;
-        this.field_174946_m = p_i46100_2_;
+        this.field_94254_c = p_i6_1_;
+        this.field_174946_m = p_i6_2_;
+        this.skipFirst = p_i6_3_ && ENABLE_SKIP;
     }
 
     private void func_110569_e()
     {
-        int[] aint = TextureUtil.field_110999_b;
-        this.field_94249_f.func_110966_b(16);
-        this.field_94249_f.func_110969_c(16);
+        int i = this.getMinSpriteSize();
+        int[] aint = this.getMissingImageData(i);
+        this.field_94249_f.func_110966_b(i);
+        this.field_94249_f.func_110969_c(i);
         int[][] aint1 = new int[this.field_147636_j + 1][];
         aint1[0] = aint;
         this.field_94249_f.func_110968_a(Lists.newArrayList(new int[][][] {aint1}));
+        this.field_94249_f.setIndexInMap(this.counterIndexInMap.nextValue());
     }
 
     public void func_110551_a(IResourceManager p_110551_1_) throws IOException
@@ -75,7 +124,15 @@
     public void func_174943_a(IResourceManager p_174943_1_, IIconCreator p_174943_2_)
     {
         this.field_110574_e.clear();
+        this.counterIndexInMap.reset();
         p_174943_2_.func_177059_a(this);
+
+        if (this.field_147636_j >= 4)
+        {
+            this.field_147636_j = this.detectMaxMipmapLevel(this.field_110574_e, p_174943_1_);
+            Config.log("Mipmap levels: " + this.field_147636_j);
+        }
+
         this.func_110569_e();
         this.func_147631_c();
         this.func_110571_b(p_174943_1_);
@@ -83,186 +140,365 @@
 
     public void func_110571_b(IResourceManager p_110571_1_)
     {
-        int i = Minecraft.func_71369_N();
-        Stitcher stitcher = new Stitcher(i, i, true, 0, this.field_147636_j);
+        Config.dbg("Multitexture: " + Config.isMultiTexture());
+
+        if (Config.isMultiTexture())
+        {
+            for (TextureAtlasSprite textureatlassprite : this.field_94252_e.values())
+            {
+                textureatlassprite.deleteSpriteTexture();
+            }
+        }
+
+        ConnectedTextures.updateIcons(this);
+        CustomItems.updateIcons(this);
+        BetterGrass.updateIcons(this);
+        int i2 = TextureUtils.getGLMaximumTextureSize();
+        Stitcher stitcher = new Stitcher(i2, i2, true, 0, this.field_147636_j);
         this.field_94252_e.clear();
         this.field_94258_i.clear();
-        int j = Integer.MAX_VALUE;
+        int i = Integer.MAX_VALUE;
+        Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPre, new Object[] {this});
+        int j = this.getMinSpriteSize();
+        this.iconGridSize = j;
         int k = 1 << this.field_147636_j;
+        int l = 0;
+        int i1 = 0;
+        Iterator iterator = this.field_110574_e.entrySet().iterator();
 
-        for (Entry<String, TextureAtlasSprite> entry : this.field_110574_e.entrySet())
+        while (true)
         {
-            TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)entry.getValue();
-            ResourceLocation resourcelocation = new ResourceLocation(textureatlassprite.func_94215_i());
-            ResourceLocation resourcelocation1 = this.func_147634_a(resourcelocation, 0);
-
-            try
+            if (iterator.hasNext())
             {
-                IResource iresource = p_110571_1_.func_110536_a(resourcelocation1);
-                BufferedImage[] abufferedimage = new BufferedImage[1 + this.field_147636_j];
-                abufferedimage[0] = TextureUtil.func_177053_a(iresource.func_110527_b());
-                TextureMetadataSection texturemetadatasection = (TextureMetadataSection)iresource.func_110526_a("texture");
+                Entry<String, TextureAtlasSprite> entry = (Entry)iterator.next();
 
-                if (texturemetadatasection != null)
+                if (!this.skipFirst)
                 {
-                    List<Integer> list = texturemetadatasection.func_148535_c();
+                    TextureAtlasSprite textureatlassprite3 = (TextureAtlasSprite)entry.getValue();
+                    ResourceLocation resourcelocation1 = new ResourceLocation(textureatlassprite3.func_94215_i());
+                    ResourceLocation resourcelocation2 = this.func_147634_a(resourcelocation1, 0);
+                    textureatlassprite3.updateIndexInMap(this.counterIndexInMap);
 
-                    if (!list.isEmpty())
+                    if (textureatlassprite3.hasCustomLoader(p_110571_1_, resourcelocation1))
                     {
-                        int l = abufferedimage[0].getWidth();
-                        int i1 = abufferedimage[0].getHeight();
-
-                        if (MathHelper.func_151236_b(l) != l || MathHelper.func_151236_b(i1) != i1)
+                        if (!textureatlassprite3.load(p_110571_1_, resourcelocation1))
                         {
-                            throw new RuntimeException("Unable to load extra miplevels, source-texture is not power of two");
+                            i = Math.min(i, Math.min(textureatlassprite3.func_94211_a(), textureatlassprite3.func_94216_b()));
+                            stitcher.func_110934_a(textureatlassprite3);
+                            Config.detail("Custom loader (skipped): " + textureatlassprite3);
+                            ++i1;
                         }
+
+                        Config.detail("Custom loader: " + textureatlassprite3);
+                        ++l;
+                        continue;
                     }
 
-                    Iterator iterator = list.iterator();
-
-                    while (iterator.hasNext())
+                    try
                     {
-                        int i2 = ((Integer)iterator.next()).intValue();
+                        IResource iresource = p_110571_1_.func_110536_a(resourcelocation2);
+                        BufferedImage[] abufferedimage = new BufferedImage[1 + this.field_147636_j];
+                        abufferedimage[0] = TextureUtil.func_177053_a(iresource.func_110527_b());
+                        int k3 = abufferedimage[0].getWidth();
+                        int l3 = abufferedimage[0].getHeight();
 
-                        if (i2 > 0 && i2 < abufferedimage.length - 1 && abufferedimage[i2] == null)
+                        if (k3 < 1 || l3 < 1)
                         {
-                            ResourceLocation resourcelocation2 = this.func_147634_a(resourcelocation, i2);
+                            Config.warn("Invalid sprite size: " + textureatlassprite3);
+                            continue;
+                        }
 
-                            try
+                        if (k3 < j || this.field_147636_j > 0)
+                        {
+                            int i4 = this.field_147636_j > 0 ? TextureUtils.scaleToGrid(k3, j) : TextureUtils.scaleToMin(k3, j);
+
+                            if (i4 != k3)
                             {
-                                abufferedimage[i2] = TextureUtil.func_177053_a(p_110571_1_.func_110536_a(resourcelocation2).func_110527_b());
+                                if (!TextureUtils.isPowerOfTwo(k3))
+                                {
+                                    Config.log("Scaled non power of 2: " + textureatlassprite3.func_94215_i() + ", " + k3 + " -> " + i4);
+                                }
+                                else
+                                {
+                                    Config.log("Scaled too small texture: " + textureatlassprite3.func_94215_i() + ", " + k3 + " -> " + i4);
+                                }
+
+                                int j1 = l3 * i4 / k3;
+                                abufferedimage[0] = TextureUtils.scaleImage(abufferedimage[0], i4);
                             }
-                            catch (IOException ioexception)
+                        }
+
+                        TextureMetadataSection texturemetadatasection = (TextureMetadataSection)iresource.func_110526_a("texture");
+
+                        if (texturemetadatasection != null)
+                        {
+                            List<Integer> list1 = texturemetadatasection.func_148535_c();
+
+                            if (!list1.isEmpty())
                             {
-                                field_147635_d.error("Unable to load miplevel {} from: {}", new Object[] {Integer.valueOf(i2), resourcelocation2, ioexception});
+                                int k1 = abufferedimage[0].getWidth();
+                                int l1 = abufferedimage[0].getHeight();
+
+                                if (MathHelper.func_151236_b(k1) != k1 || MathHelper.func_151236_b(l1) != l1)
+                                {
+                                    throw new RuntimeException("Unable to load extra miplevels, source-texture is not power of two");
+                                }
                             }
+
+                            Iterator iterator1 = list1.iterator();
+
+                            while (iterator1.hasNext())
+                            {
+                                int j4 = ((Integer)iterator1.next()).intValue();
+
+                                if (j4 > 0 && j4 < abufferedimage.length - 1 && abufferedimage[j4] == null)
+                                {
+                                    ResourceLocation resourcelocation = this.func_147634_a(resourcelocation1, j4);
+
+                                    try
+                                    {
+                                        abufferedimage[j4] = TextureUtil.func_177053_a(p_110571_1_.func_110536_a(resourcelocation).func_110527_b());
+                                    }
+                                    catch (IOException ioexception)
+                                    {
+                                        field_147635_d.error("Unable to load miplevel {} from: {}", new Object[] {Integer.valueOf(j4), resourcelocation, ioexception});
+                                    }
+                                }
+                            }
                         }
+
+                        AnimationMetadataSection animationmetadatasection = (AnimationMetadataSection)iresource.func_110526_a("animation");
+                        textureatlassprite3.func_180598_a(abufferedimage, animationmetadatasection);
                     }
-                }
+                    catch (RuntimeException runtimeexception)
+                    {
+                        field_147635_d.error((String)("Unable to parse metadata from " + resourcelocation2), (Throwable)runtimeexception);
+                        ReflectorForge.FMLClientHandler_trackBrokenTexture(resourcelocation2, runtimeexception.getMessage());
+                        continue;
+                    }
+                    catch (IOException ioexception1)
+                    {
+                        field_147635_d.error("Using missing texture, unable to load " + resourcelocation2 + ", " + ioexception1.getClass().getName());
+                        ReflectorForge.FMLClientHandler_trackMissingTexture(resourcelocation2);
+                        continue;
+                    }
 
-                AnimationMetadataSection animationmetadatasection = (AnimationMetadataSection)iresource.func_110526_a("animation");
-                textureatlassprite.func_180598_a(abufferedimage, animationmetadatasection);
+                    i = Math.min(i, Math.min(textureatlassprite3.func_94211_a(), textureatlassprite3.func_94216_b()));
+                    int j3 = Math.min(Integer.lowestOneBit(textureatlassprite3.func_94211_a()), Integer.lowestOneBit(textureatlassprite3.func_94216_b()));
+
+                    if (j3 < k)
+                    {
+                        field_147635_d.warn("Texture {} with size {}x{} limits mip level from {} to {}", new Object[] {resourcelocation2, Integer.valueOf(textureatlassprite3.func_94211_a()), Integer.valueOf(textureatlassprite3.func_94216_b()), Integer.valueOf(MathHelper.func_151239_c(k)), Integer.valueOf(MathHelper.func_151239_c(j3))});
+                        k = j3;
+                    }
+
+                    stitcher.func_110934_a(textureatlassprite3);
+                    continue;
+                }
             }
-            catch (RuntimeException runtimeexception)
+
+            if (l > 0)
             {
-                field_147635_d.error((String)("Unable to parse metadata from " + resourcelocation1), (Throwable)runtimeexception);
-                continue;
+                Config.dbg("Custom loader sprites: " + l);
             }
-            catch (IOException ioexception1)
+
+            if (i1 > 0)
             {
-                field_147635_d.error((String)("Using missing texture, unable to load " + resourcelocation1), (Throwable)ioexception1);
-                continue;
+                Config.dbg("Custom loader sprites (skipped): " + i1);
             }
 
-            j = Math.min(j, Math.min(textureatlassprite.func_94211_a(), textureatlassprite.func_94216_b()));
-            int l1 = Math.min(Integer.lowestOneBit(textureatlassprite.func_94211_a()), Integer.lowestOneBit(textureatlassprite.func_94216_b()));
+            int j2 = Math.min(i, k);
+            int k2 = MathHelper.func_151239_c(j2);
 
-            if (l1 < k)
+            if (k2 < 0)
             {
-                field_147635_d.warn("Texture {} with size {}x{} limits mip level from {} to {}", new Object[] {resourcelocation1, Integer.valueOf(textureatlassprite.func_94211_a()), Integer.valueOf(textureatlassprite.func_94216_b()), Integer.valueOf(MathHelper.func_151239_c(k)), Integer.valueOf(MathHelper.func_151239_c(l1))});
-                k = l1;
+                k2 = 0;
             }
 
-            stitcher.func_110934_a(textureatlassprite);
-        }
+            if (k2 < this.field_147636_j)
+            {
+                field_147635_d.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", new Object[] {this.field_94254_c, Integer.valueOf(this.field_147636_j), Integer.valueOf(k2), Integer.valueOf(j2)});
+                this.field_147636_j = k2;
+            }
 
-        int j1 = Math.min(j, k);
-        int k1 = MathHelper.func_151239_c(j1);
+            for (final TextureAtlasSprite textureatlassprite1 : this.field_110574_e.values())
+            {
+                if (this.skipFirst)
+                {
+                    break;
+                }
 
-        if (k1 < this.field_147636_j)
-        {
-            field_147635_d.warn("{}: dropping miplevel from {} to {}, because of minimum power of two: {}", new Object[] {this.field_94254_c, Integer.valueOf(this.field_147636_j), Integer.valueOf(k1), Integer.valueOf(j1)});
-            this.field_147636_j = k1;
-        }
+                try
+                {
+                    textureatlassprite1.func_147963_d(this.field_147636_j);
+                }
+                catch (Throwable throwable1)
+                {
+                    CrashReport crashreport = CrashReport.func_85055_a(throwable1, "Applying mipmap");
+                    CrashReportCategory crashreportcategory = crashreport.func_85058_a("Sprite being mipmapped");
+                    crashreportcategory.func_71500_a("Sprite name", new Callable<String>()
+                    {
+                        public String call() throws Exception
+                        {
+                            return textureatlassprite1.func_94215_i();
+                        }
+                    });
+                    crashreportcategory.func_71500_a("Sprite size", new Callable<String>()
+                    {
+                        public String call() throws Exception
+                        {
+                            return textureatlassprite1.func_94211_a() + " x " + textureatlassprite1.func_94216_b();
+                        }
+                    });
+                    crashreportcategory.func_71500_a("Sprite frames", new Callable<String>()
+                    {
+                        public String call() throws Exception
+                        {
+                            return textureatlassprite1.func_110970_k() + " frames";
+                        }
+                    });
+                    crashreportcategory.func_71507_a("Mipmap levels", Integer.valueOf(this.field_147636_j));
+                    throw new ReportedException(crashreport);
+                }
+            }
 
-        for (final TextureAtlasSprite textureatlassprite1 : this.field_110574_e.values())
-        {
+            this.field_94249_f.func_147963_d(this.field_147636_j);
+            stitcher.func_110934_a(this.field_94249_f);
+            this.skipFirst = false;
+
             try
             {
-                textureatlassprite1.func_147963_d(this.field_147636_j);
+                stitcher.func_94305_f();
             }
-            catch (Throwable throwable1)
+            catch (StitcherException stitcherexception)
             {
-                CrashReport crashreport = CrashReport.func_85055_a(throwable1, "Applying mipmap");
-                CrashReportCategory crashreportcategory = crashreport.func_85058_a("Sprite being mipmapped");
-                crashreportcategory.func_71500_a("Sprite name", new Callable<String>()
+                throw stitcherexception;
+            }
+
+            field_147635_d.info("Created: {}x{} {}-atlas", new Object[] {Integer.valueOf(stitcher.func_110935_a()), Integer.valueOf(stitcher.func_110936_b()), this.field_94254_c});
+
+            if (Config.isShaders())
+            {
+                ShadersTex.allocateTextureMap(this.func_110552_b(), this.field_147636_j, stitcher.func_110935_a(), stitcher.func_110936_b(), stitcher, this);
+            }
+            else
+            {
+                TextureUtil.func_180600_a(this.func_110552_b(), this.field_147636_j, stitcher.func_110935_a(), stitcher.func_110936_b());
+            }
+
+            Map<String, TextureAtlasSprite> map = Maps.<String, TextureAtlasSprite>newHashMap(this.field_110574_e);
+
+            for (TextureAtlasSprite textureatlassprite2 : stitcher.func_94309_g())
+            {
+                String s = textureatlassprite2.func_94215_i();
+                map.remove(s);
+                this.field_94252_e.put(s, textureatlassprite2);
+
+                try
                 {
-                    public String call() throws Exception
+                    if (Config.isShaders())
                     {
-                        return textureatlassprite1.func_94215_i();
+                        ShadersTex.uploadTexSubForLoadAtlas(this, textureatlassprite2.func_94215_i(), textureatlassprite2.func_147965_a(0), textureatlassprite2.func_94211_a(), textureatlassprite2.func_94216_b(), textureatlassprite2.func_130010_a(), textureatlassprite2.func_110967_i(), false, false);
                     }
-                });
-                crashreportcategory.func_71500_a("Sprite size", new Callable<String>()
-                {
-                    public String call() throws Exception
+                    else
                     {
-                        return textureatlassprite1.func_94211_a() + " x " + textureatlassprite1.func_94216_b();
+                        TextureUtil.func_147955_a(textureatlassprite2.func_147965_a(0), textureatlassprite2.func_94211_a(), textureatlassprite2.func_94216_b(), textureatlassprite2.func_130010_a(), textureatlassprite2.func_110967_i(), false, false);
                     }
-                });
-                crashreportcategory.func_71500_a("Sprite frames", new Callable<String>()
+                }
+                catch (Throwable throwable)
                 {
-                    public String call() throws Exception
-                    {
-                        return textureatlassprite1.func_110970_k() + " frames";
-                    }
-                });
-                crashreportcategory.func_71507_a("Mipmap levels", Integer.valueOf(this.field_147636_j));
-                throw new ReportedException(crashreport);
+                    CrashReport crashreport1 = CrashReport.func_85055_a(throwable, "Stitching texture atlas");
+                    CrashReportCategory crashreportcategory1 = crashreport1.func_85058_a("Texture being stitched together");
+                    crashreportcategory1.func_71507_a("Atlas path", this.field_94254_c);
+                    crashreportcategory1.func_71507_a("Sprite", textureatlassprite2);
+                    throw new ReportedException(crashreport1);
+                }
+
+                if (textureatlassprite2.func_130098_m())
+                {
+                    textureatlassprite2.setAnimationIndex(this.field_94258_i.size());
+                    this.field_94258_i.add(textureatlassprite2);
+                }
             }
-        }
 
-        this.field_94249_f.func_147963_d(this.field_147636_j);
-        stitcher.func_110934_a(this.field_94249_f);
+            for (TextureAtlasSprite textureatlassprite4 : map.values())
+            {
+                textureatlassprite4.func_94217_a(this.field_94249_f);
+            }
 
-        try
-        {
-            stitcher.func_94305_f();
-        }
-        catch (StitcherException stitcherexception)
-        {
-            throw stitcherexception;
-        }
+            Config.log("Animated sprites: " + this.field_94258_i.size());
 
-        field_147635_d.info("Created: {}x{} {}-atlas", new Object[] {Integer.valueOf(stitcher.func_110935_a()), Integer.valueOf(stitcher.func_110936_b()), this.field_94254_c});
-        TextureUtil.func_180600_a(this.func_110552_b(), this.field_147636_j, stitcher.func_110935_a(), stitcher.func_110936_b());
-        Map<String, TextureAtlasSprite> map = Maps.<String, TextureAtlasSprite>newHashMap(this.field_110574_e);
+            if (Config.isMultiTexture())
+            {
+                int l2 = stitcher.func_110935_a();
+                int i3 = stitcher.func_110936_b();
 
-        for (TextureAtlasSprite textureatlassprite2 : stitcher.func_94309_g())
-        {
-            String s = textureatlassprite2.func_94215_i();
-            map.remove(s);
-            this.field_94252_e.put(s, textureatlassprite2);
+                for (TextureAtlasSprite textureatlassprite5 : stitcher.func_94309_g())
+                {
+                    textureatlassprite5.sheetWidth = l2;
+                    textureatlassprite5.sheetHeight = i3;
+                    textureatlassprite5.mipmapLevels = this.field_147636_j;
+                    TextureAtlasSprite textureatlassprite6 = textureatlassprite5.spriteSingle;
 
-            try
-            {
-                TextureUtil.func_147955_a(textureatlassprite2.func_147965_a(0), textureatlassprite2.func_94211_a(), textureatlassprite2.func_94216_b(), textureatlassprite2.func_130010_a(), textureatlassprite2.func_110967_i(), false, false);
+                    if (textureatlassprite6 != null)
+                    {
+                        if (textureatlassprite6.func_94211_a() <= 0)
+                        {
+                            textureatlassprite6.func_110966_b(textureatlassprite5.func_94211_a());
+                            textureatlassprite6.func_110969_c(textureatlassprite5.func_94216_b());
+                            textureatlassprite6.func_110971_a(textureatlassprite5.func_94211_a(), textureatlassprite5.func_94216_b(), 0, 0, false);
+                            textureatlassprite6.func_130103_l();
+                            List<int[][]> list = textureatlassprite5.getFramesTextureData();
+                            textureatlassprite6.func_110968_a(list);
+                            textureatlassprite6.setAnimationMetadata(textureatlassprite5.getAnimationMetadata());
+                        }
+
+                        textureatlassprite6.sheetWidth = l2;
+                        textureatlassprite6.sheetHeight = i3;
+                        textureatlassprite6.mipmapLevels = this.field_147636_j;
+                        textureatlassprite6.setAnimationIndex(textureatlassprite5.getAnimationIndex());
+                        textureatlassprite5.bindSpriteTexture();
+                        boolean flag1 = false;
+                        boolean flag = true;
+
+                        try
+                        {
+                            TextureUtil.func_147955_a(textureatlassprite6.func_147965_a(0), textureatlassprite6.func_94211_a(), textureatlassprite6.func_94216_b(), textureatlassprite6.func_130010_a(), textureatlassprite6.func_110967_i(), flag1, flag);
+                        }
+                        catch (Exception exception)
+                        {
+                            Config.dbg("Error uploading sprite single: " + textureatlassprite6 + ", parent: " + textureatlassprite5);
+                            exception.printStackTrace();
+                        }
+                    }
+                }
+
+                Config.getMinecraft().func_110434_K().func_110577_a(field_110575_b);
             }
-            catch (Throwable throwable)
-            {
-                CrashReport crashreport1 = CrashReport.func_85055_a(throwable, "Stitching texture atlas");
-                CrashReportCategory crashreportcategory1 = crashreport1.func_85058_a("Texture being stitched together");
-                crashreportcategory1.func_71507_a("Atlas path", this.field_94254_c);
-                crashreportcategory1.func_71507_a("Sprite", textureatlassprite2);
-                throw new ReportedException(crashreport1);
-            }
 
-            if (textureatlassprite2.func_130098_m())
+            Reflector.callVoid(Reflector.ForgeHooksClient_onTextureStitchedPost, new Object[] {this});
+            this.updateIconGrid(stitcher.func_110935_a(), stitcher.func_110936_b());
+
+            if (Config.equals(System.getProperty("saveTextureMap"), "true"))
             {
-                this.field_94258_i.add(textureatlassprite2);
+                Config.dbg("Exporting texture map: " + this.field_94254_c);
+                TextureUtils.saveGlTexture("debug/" + this.field_94254_c.replaceAll("/", "_"), this.func_110552_b(), this.field_147636_j, stitcher.func_110935_a(), stitcher.func_110936_b());
             }
-        }
 
-        for (TextureAtlasSprite textureatlassprite3 : map.values())
-        {
-            textureatlassprite3.func_94217_a(this.field_94249_f);
+            return;
         }
     }
 
-    private ResourceLocation func_147634_a(ResourceLocation p_147634_1_, int p_147634_2_)
+    public ResourceLocation completeResourceLocation(ResourceLocation p_completeResourceLocation_1_)
     {
-        return p_147634_2_ == 0 ? new ResourceLocation(p_147634_1_.func_110624_b(), String.format("%s/%s%s", new Object[] {this.field_94254_c, p_147634_1_.func_110623_a(), ".png"})): new ResourceLocation(p_147634_1_.func_110624_b(), String.format("%s/mipmaps/%s.%d%s", new Object[] {this.field_94254_c, p_147634_1_.func_110623_a(), Integer.valueOf(p_147634_2_), ".png"}));
+        return this.func_147634_a(p_completeResourceLocation_1_, 0);
     }
 
+    public ResourceLocation func_147634_a(ResourceLocation p_147634_1_, int p_147634_2_)
+    {
+        return this.isAbsoluteLocation(p_147634_1_) ? new ResourceLocation(p_147634_1_.func_110624_b(), p_147634_1_.func_110623_a() + ".png") : (p_147634_2_ == 0 ? new ResourceLocation(p_147634_1_.func_110624_b(), String.format("%s/%s%s", new Object[] {this.field_94254_c, p_147634_1_.func_110623_a(), ".png"})): new ResourceLocation(p_147634_1_.func_110624_b(), String.format("%s/mipmaps/%s.%d%s", new Object[] {this.field_94254_c, p_147634_1_.func_110623_a(), Integer.valueOf(p_147634_2_), ".png"})));
+    }
+
     public TextureAtlasSprite func_110572_b(String p_110572_1_)
     {
         TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.field_94252_e.get(p_110572_1_);
@@ -277,12 +513,129 @@
 
     public void func_94248_c()
     {
+        boolean flag = false;
+        boolean flag1 = false;
         TextureUtil.func_94277_a(this.func_110552_b());
+        int i = 0;
 
         for (TextureAtlasSprite textureatlassprite : this.field_94258_i)
         {
-            textureatlassprite.func_94219_l();
+            if (this.isTerrainAnimationActive(textureatlassprite))
+            {
+                textureatlassprite.func_94219_l();
+
+                if (textureatlassprite.isAnimationActive())
+                {
+                    ++i;
+                }
+
+                if (textureatlassprite.spriteNormal != null)
+                {
+                    flag = true;
+                }
+
+                if (textureatlassprite.spriteSpecular != null)
+                {
+                    flag1 = true;
+                }
+            }
         }
+
+        if (Config.isMultiTexture())
+        {
+            for (TextureAtlasSprite textureatlassprite2 : this.field_94258_i)
+            {
+                if (this.isTerrainAnimationActive(textureatlassprite2))
+                {
+                    TextureAtlasSprite textureatlassprite1 = textureatlassprite2.spriteSingle;
+
+                    if (textureatlassprite1 != null)
+                    {
+                        if (textureatlassprite2 == TextureUtils.iconClock || textureatlassprite2 == TextureUtils.iconCompass)
+                        {
+                            textureatlassprite1.field_110973_g = textureatlassprite2.field_110973_g;
+                        }
+
+                        textureatlassprite2.bindSpriteTexture();
+                        textureatlassprite1.func_94219_l();
+
+                        if (textureatlassprite1.isAnimationActive())
+                        {
+                            ++i;
+                        }
+                    }
+                }
+            }
+
+            TextureUtil.func_94277_a(this.func_110552_b());
+        }
+
+        if (Config.isShaders())
+        {
+            if (flag)
+            {
+                TextureUtil.func_94277_a(this.getMultiTexID().norm);
+
+                for (TextureAtlasSprite textureatlassprite3 : this.field_94258_i)
+                {
+                    if (textureatlassprite3.spriteNormal != null && this.isTerrainAnimationActive(textureatlassprite3))
+                    {
+                        if (textureatlassprite3 == TextureUtils.iconClock || textureatlassprite3 == TextureUtils.iconCompass)
+                        {
+                            textureatlassprite3.spriteNormal.field_110973_g = textureatlassprite3.field_110973_g;
+                        }
+
+                        textureatlassprite3.spriteNormal.func_94219_l();
+
+                        if (textureatlassprite3.spriteNormal.isAnimationActive())
+                        {
+                            ++i;
+                        }
+                    }
+                }
+            }
+
+            if (flag1)
+            {
+                TextureUtil.func_94277_a(this.getMultiTexID().spec);
+
+                for (TextureAtlasSprite textureatlassprite4 : this.field_94258_i)
+                {
+                    if (textureatlassprite4.spriteSpecular != null && this.isTerrainAnimationActive(textureatlassprite4))
+                    {
+                        if (textureatlassprite4 == TextureUtils.iconClock || textureatlassprite4 == TextureUtils.iconCompass)
+                        {
+                            textureatlassprite4.spriteNormal.field_110973_g = textureatlassprite4.field_110973_g;
+                        }
+
+                        textureatlassprite4.spriteSpecular.func_94219_l();
+
+                        if (textureatlassprite4.spriteSpecular.isAnimationActive())
+                        {
+                            ++i;
+                        }
+                    }
+                }
+            }
+
+            if (flag || flag1)
+            {
+                TextureUtil.func_94277_a(this.func_110552_b());
+            }
+        }
+
+        int j = Config.getMinecraft().field_71460_t.field_175084_ae;
+
+        if (j != this.frameCountAnimations)
+        {
+            this.countAnimationsActive = i;
+            this.frameCountAnimations = j;
+        }
+
+        if (SmartAnimations.isActive())
+        {
+            SmartAnimations.resetSpritesRendered();
+        }
     }
 
     public TextureAtlasSprite func_174942_a(ResourceLocation p_174942_1_)
@@ -293,12 +646,18 @@
         }
         else
         {
-            TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.field_110574_e.get(p_174942_1_);
+            TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)this.field_110574_e.get(p_174942_1_.toString());
 
             if (textureatlassprite == null)
             {
                 textureatlassprite = TextureAtlasSprite.func_176604_a(p_174942_1_);
                 this.field_110574_e.put(p_174942_1_.toString(), textureatlassprite);
+                textureatlassprite.updateIndexInMap(this.counterIndexInMap);
+
+                if (Config.isEmissiveTextures())
+                {
+                    this.checkEmissive(p_174942_1_, textureatlassprite);
+                }
             }
 
             return textureatlassprite;
@@ -319,4 +678,311 @@
     {
         return this.field_94249_f;
     }
+
+    public TextureAtlasSprite getTextureExtry(String p_getTextureExtry_1_)
+    {
+        return (TextureAtlasSprite)this.field_110574_e.get(p_getTextureExtry_1_);
+    }
+
+    public boolean setTextureEntry(String p_setTextureEntry_1_, TextureAtlasSprite p_setTextureEntry_2_)
+    {
+        if (!this.field_110574_e.containsKey(p_setTextureEntry_1_))
+        {
+            this.field_110574_e.put(p_setTextureEntry_1_, p_setTextureEntry_2_);
+            p_setTextureEntry_2_.updateIndexInMap(this.counterIndexInMap);
+            return true;
+        }
+        else
+        {
+            return false;
+        }
+    }
+
+    public boolean setTextureEntry(TextureAtlasSprite p_setTextureEntry_1_)
+    {
+        return this.setTextureEntry(p_setTextureEntry_1_.func_94215_i(), p_setTextureEntry_1_);
+    }
+
+    public String getBasePath()
+    {
+        return this.field_94254_c;
+    }
+
+    public int getMipmapLevels()
+    {
+        return this.field_147636_j;
+    }
+
+    private boolean isAbsoluteLocation(ResourceLocation p_isAbsoluteLocation_1_)
+    {
+        String s = p_isAbsoluteLocation_1_.func_110623_a();
+        return this.isAbsoluteLocationPath(s);
+    }
+
+    private boolean isAbsoluteLocationPath(String p_isAbsoluteLocationPath_1_)
+    {
+        String s = p_isAbsoluteLocationPath_1_.toLowerCase();
+        return s.startsWith("mcpatcher/") || s.startsWith("optifine/");
+    }
+
+    public TextureAtlasSprite getSpriteSafe(String p_getSpriteSafe_1_)
+    {
+        ResourceLocation resourcelocation = new ResourceLocation(p_getSpriteSafe_1_);
+        return (TextureAtlasSprite)this.field_110574_e.get(resourcelocation.toString());
+    }
+
+    public TextureAtlasSprite getRegisteredSprite(ResourceLocation p_getRegisteredSprite_1_)
+    {
+        return (TextureAtlasSprite)this.field_110574_e.get(p_getRegisteredSprite_1_.toString());
+    }
+
+    private boolean isTerrainAnimationActive(TextureAtlasSprite p_isTerrainAnimationActive_1_)
+    {
+        return p_isTerrainAnimationActive_1_ != TextureUtils.iconWaterStill && p_isTerrainAnimationActive_1_ != TextureUtils.iconWaterFlow ? (p_isTerrainAnimationActive_1_ != TextureUtils.iconLavaStill && p_isTerrainAnimationActive_1_ != TextureUtils.iconLavaFlow ? (p_isTerrainAnimationActive_1_ != TextureUtils.iconFireLayer0 && p_isTerrainAnimationActive_1_ != TextureUtils.iconFireLayer1 ? (p_isTerrainAnimationActive_1_ == TextureUtils.iconPortal ? Config.isAnimatedPortal() : (p_isTerrainAnimationActive_1_ != TextureUtils.iconClock && p_isTerrainAnimationActive_1_ != TextureUtils.iconCompass ? Config.isAnimatedTerrain() : true)) : Config.isAnimatedFire()) : Config.isAnimatedLava()) : Config.isAnimatedWater();
+    }
+
+    public int getCountRegisteredSprites()
+    {
+        return this.counterIndexInMap.getValue();
+    }
+
+    private int detectMaxMipmapLevel(Map p_detectMaxMipmapLevel_1_, IResourceManager p_detectMaxMipmapLevel_2_)
+    {
+        int i = this.detectMinimumSpriteSize(p_detectMaxMipmapLevel_1_, p_detectMaxMipmapLevel_2_, 20);
+
+        if (i < 16)
+        {
+            i = 16;
+        }
+
+        i = MathHelper.func_151236_b(i);
+
+        if (i > 16)
+        {
+            Config.log("Sprite size: " + i);
+        }
+
+        int j = MathHelper.func_151239_c(i);
+
+        if (j < 4)
+        {
+            j = 4;
+        }
+
+        return j;
+    }
+
+    private int detectMinimumSpriteSize(Map p_detectMinimumSpriteSize_1_, IResourceManager p_detectMinimumSpriteSize_2_, int p_detectMinimumSpriteSize_3_)
+    {
+        Map map = new HashMap();
+
+        for (Object e : p_detectMinimumSpriteSize_1_.entrySet())
+        {
+            Entry entry = (Entry) e;
+            TextureAtlasSprite textureatlassprite = (TextureAtlasSprite)entry.getValue();
+            ResourceLocation resourcelocation = new ResourceLocation(textureatlassprite.func_94215_i());
+            ResourceLocation resourcelocation1 = this.completeResourceLocation(resourcelocation);
+
+            if (!textureatlassprite.hasCustomLoader(p_detectMinimumSpriteSize_2_, resourcelocation))
+            {
+                try
+                {
+                    IResource iresource = p_detectMinimumSpriteSize_2_.func_110536_a(resourcelocation1);
+
+                    if (iresource != null)
+                    {
+                        InputStream inputstream = iresource.func_110527_b();
+
+                        if (inputstream != null)
+                        {
+                            Dimension dimension = TextureUtils.getImageSize(inputstream, "png");
+
+                            if (dimension != null)
+                            {
+                                int i = dimension.width;
+                                int j = MathHelper.func_151236_b(i);
+
+                                if (!map.containsKey(Integer.valueOf(j)))
+                                {
+                                    map.put(Integer.valueOf(j), Integer.valueOf(1));
+                                }
+                                else
+                                {
+                                    int k = ((Integer)map.get(Integer.valueOf(j))).intValue();
+                                    map.put(Integer.valueOf(j), Integer.valueOf(k + 1));
+                                }
+                            }
+                        }
+                    }
+                }
+                catch (Exception var17)
+                {
+                    ;
+                }
+            }
+        }
+
+        int l = 0;
+        Set set = map.keySet();
+        Set set1 = new TreeSet(set);
+        int l1;
+
+        for (Iterator iterator = set1.iterator(); iterator.hasNext(); l += l1)
+        {
+            int j1 = ((Integer)iterator.next()).intValue();
+            l1 = ((Integer)map.get(Integer.valueOf(j1))).intValue();
+        }
+
+        int i1 = 16;
+        int k1 = 0;
+        l1 = l * p_detectMinimumSpriteSize_3_ / 100;
+        Iterator iterator1 = set1.iterator();
+
+        while (iterator1.hasNext())
+        {
+            int i2 = ((Integer)iterator1.next()).intValue();
+            int j2 = ((Integer)map.get(Integer.valueOf(i2))).intValue();
+            k1 += j2;
+
+            if (i2 > i1)
+            {
+                i1 = i2;
+            }
+
+            if (k1 > l1)
+            {
+                return i1;
+            }
+        }
+
+        return i1;
+    }
+
+    private int getMinSpriteSize()
+    {
+        int i = 1 << this.field_147636_j;
+
+        if (i < 8)
+        {
+            i = 8;
+        }
+
+        return i;
+    }
+
+    private int[] getMissingImageData(int p_getMissingImageData_1_)
+    {
+        BufferedImage bufferedimage = new BufferedImage(16, 16, 2);
+        bufferedimage.setRGB(0, 0, 16, 16, TextureUtil.field_110999_b, 0, 16);
+        BufferedImage bufferedimage1 = TextureUtils.scaleImage(bufferedimage, p_getMissingImageData_1_);
+        int[] aint = new int[p_getMissingImageData_1_ * p_getMissingImageData_1_];
+        bufferedimage1.getRGB(0, 0, p_getMissingImageData_1_, p_getMissingImageData_1_, aint, 0, p_getMissingImageData_1_);
+        return aint;
+    }
+
+    public boolean isTextureBound()
+    {
+        int i = GlStateManager.getBoundTexture();
+        int j = this.func_110552_b();
+        return i == j;
+    }
+
+    private void updateIconGrid(int p_updateIconGrid_1_, int p_updateIconGrid_2_)
+    {
+        this.iconGridCountX = -1;
+        this.iconGridCountY = -1;
+        this.iconGrid = null;
+
+        if (this.iconGridSize > 0)
+        {
+            this.iconGridCountX = p_updateIconGrid_1_ / this.iconGridSize;
+            this.iconGridCountY = p_updateIconGrid_2_ / this.iconGridSize;
+            this.iconGrid = new TextureAtlasSprite[this.iconGridCountX * this.iconGridCountY];
+            this.iconGridSizeU = 1.0D / (double)this.iconGridCountX;
+            this.iconGridSizeV = 1.0D / (double)this.iconGridCountY;
+
+            for (TextureAtlasSprite textureatlassprite : this.field_94252_e.values())
+            {
+                double d0 = 0.5D / (double)p_updateIconGrid_1_;
+                double d1 = 0.5D / (double)p_updateIconGrid_2_;
+                double d2 = (double)Math.min(textureatlassprite.func_94209_e(), textureatlassprite.func_94212_f()) + d0;
+                double d3 = (double)Math.min(textureatlassprite.func_94206_g(), textureatlassprite.func_94210_h()) + d1;
+                double d4 = (double)Math.max(textureatlassprite.func_94209_e(), textureatlassprite.func_94212_f()) - d0;
+                double d5 = (double)Math.max(textureatlassprite.func_94206_g(), textureatlassprite.func_94210_h()) - d1;
+                int i = (int)(d2 / this.iconGridSizeU);
+                int j = (int)(d3 / this.iconGridSizeV);
+                int k = (int)(d4 / this.iconGridSizeU);
+                int l = (int)(d5 / this.iconGridSizeV);
+
+                for (int i1 = i; i1 <= k; ++i1)
+                {
+                    if (i1 >= 0 && i1 < this.iconGridCountX)
+                    {
+                        for (int j1 = j; j1 <= l; ++j1)
+                        {
+                            if (j1 >= 0 && j1 < this.iconGridCountX)
+                            {
+                                int k1 = j1 * this.iconGridCountX + i1;
+                                this.iconGrid[k1] = textureatlassprite;
+                            }
+                            else
+                            {
+                                Config.warn("Invalid grid V: " + j1 + ", icon: " + textureatlassprite.func_94215_i());
+                            }
+                        }
+                    }
+                    else
+                    {
+                        Config.warn("Invalid grid U: " + i1 + ", icon: " + textureatlassprite.func_94215_i());
+                    }
+                }
+            }
+        }
+    }
+
+    public TextureAtlasSprite getIconByUV(double p_getIconByUV_1_, double p_getIconByUV_3_)
+    {
+        if (this.iconGrid == null)
+        {
+            return null;
+        }
+        else
+        {
+            int i = (int)(p_getIconByUV_1_ / this.iconGridSizeU);
+            int j = (int)(p_getIconByUV_3_ / this.iconGridSizeV);
+            int k = j * this.iconGridCountX + i;
+            return k >= 0 && k <= this.iconGrid.length ? this.iconGrid[k] : null;
+        }
+    }
+
+    private void checkEmissive(ResourceLocation p_checkEmissive_1_, TextureAtlasSprite p_checkEmissive_2_)
+    {
+        String s = EmissiveTextures.getSuffixEmissive();
+
+        if (s != null)
+        {
+            if (!p_checkEmissive_1_.func_110623_a().endsWith(s))
+            {
+                ResourceLocation resourcelocation = new ResourceLocation(p_checkEmissive_1_.func_110624_b(), p_checkEmissive_1_.func_110623_a() + s);
+                ResourceLocation resourcelocation1 = this.completeResourceLocation(resourcelocation);
+
+                if (Config.hasResource(resourcelocation1))
+                {
+                    TextureAtlasSprite textureatlassprite = this.func_174942_a(resourcelocation);
+                    textureatlassprite.isEmissive = true;
+                    p_checkEmissive_2_.spriteEmissive = textureatlassprite;
+                }
+            }
+        }
+    }
+
+    public int getCountAnimations()
+    {
+        return this.field_94258_i.size();
+    }
+
+    public int getCountAnimationsActive()
+    {
+        return this.countAnimationsActive;
+    }
 }
