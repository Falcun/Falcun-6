--- ../src-base/minecraft/net/minecraft/client/settings/GameSettings.java
+++ ../src-work/minecraft/net/minecraft/client/settings/GameSettings.java
@@ -4,39 +4,58 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
+import com.google.common.util.concurrent.ListenableFuture;
 import com.google.gson.Gson;
 import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileReader;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
 import java.io.FileWriter;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import net.minecraft.client.Minecraft;
 import net.minecraft.client.audio.SoundCategory;
 import net.minecraft.client.gui.GuiNewChat;
+import net.minecraft.client.gui.GuiScreen;
+import net.minecraft.client.renderer.OpenGlHelper;
 import net.minecraft.client.renderer.texture.TextureMap;
 import net.minecraft.client.resources.I18n;
 import net.minecraft.client.stream.TwitchStream;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EnumPlayerModelParts;
 import net.minecraft.network.play.client.C15PacketClientSettings;
+import net.minecraft.src.Config;
 import net.minecraft.util.MathHelper;
 import net.minecraft.world.EnumDifficulty;
-import net.minecraftforge.fml.relauncher.Side;
-import net.minecraftforge.fml.relauncher.SideOnly;
+import net.optifine.ClearWater;
+import net.optifine.CustomColors;
+import net.optifine.CustomGuis;
+import net.optifine.CustomSky;
+import net.optifine.DynamicLights;
+import net.optifine.Lang;
+import net.optifine.NaturalTextures;
+import net.optifine.RandomEntities;
+import net.optifine.reflect.Reflector;
+import net.optifine.shaders.Shaders;
+import net.optifine.util.KeyUtils;
+import org.apache.commons.io.IOUtils;
 import org.apache.commons.lang3.ArrayUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.input.Keyboard;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.DisplayMode;
 
-@SideOnly(Side.CLIENT)
-public class GameSettings
+public class GameSettings extends GuiScreen
 {
     private static final Logger field_151454_ax = LogManager.getLogger();
     private static final Gson field_151450_ay = new Gson();
@@ -55,6 +74,8 @@
             return null;
         }
     };
+
+    /** GUI scale values */
     private static final String[] field_74367_ae = new String[] {"options.guiScale.auto", "options.guiScale.small", "options.guiScale.normal", "options.guiScale.large"};
     private static final String[] field_74364_ag = new String[] {"options.particles.all", "options.particles.decreased", "options.particles.minimal"};
     private static final String[] field_98303_au = new String[] {"options.ao.off", "options.ao.min", "options.ao.max"};
@@ -70,24 +91,34 @@
     public boolean field_74337_g;
     public boolean field_151448_g = true;
     public int field_74350_i = 120;
+
+    /** Clouds flag */
     public int field_74345_l = 2;
-    public boolean field_74347_j = true;
+    public boolean field_74347_j = false;
+
+    /** Smooth Lighting */
     public int field_74348_k = 2;
     public List<String> field_151453_l = Lists.<String>newArrayList();
     public List<String> field_183018_l = Lists.<String>newArrayList();
     public EntityPlayer.EnumChatVisibility field_74343_n = EntityPlayer.EnumChatVisibility.FULL;
     public boolean field_74344_o = true;
     public boolean field_74359_p = true;
-    public boolean field_74358_q = true;
+    public boolean field_74358_q = false;
     public float field_74357_r = 1.0F;
-    public boolean field_74355_t = true;
+    public boolean field_74355_t = false;
     public boolean field_74353_u;
-    public boolean field_74352_v = true;
-    public boolean field_178881_t = false;
-    public boolean field_178880_u = true;
+    public boolean field_74352_v = false;
+    public boolean field_178881_t = true;
+    public boolean field_178880_u = false;
     public boolean field_178879_v = false;
     public boolean field_80005_w;
+
+    /**
+     * Whether to show advanced information on item tooltips, toggled by F3+H
+     */
     public boolean field_82882_x;
+
+    /** Whether to pause when the game loses focus, toggled by F3+P */
     public boolean field_82881_y = true;
     private final Set<EnumPlayerModelParts> field_178882_aU = Sets.newHashSet(EnumPlayerModelParts.values());
     public boolean field_85185_A;
@@ -114,7 +145,7 @@
     public int field_152410_T = 0;
     public boolean field_181150_U = true;
     public boolean field_181151_V = true;
-    public boolean field_183509_X = true;
+    public boolean realmsNotifications = true;
     public KeyBinding field_74351_w = new KeyBinding("key.forward", 17, "key.categories.movement");
     public KeyBinding field_74370_x = new KeyBinding("key.left", 30, "key.categories.movement");
     public KeyBinding field_74368_y = new KeyBinding("key.back", 31, "key.categories.movement");
@@ -146,23 +177,120 @@
     public EnumDifficulty field_74318_M;
     public boolean field_74319_N;
     public int field_74320_O;
+
+    /** true if debug info should be displayed instead of version */
     public boolean field_74330_P;
     public boolean field_74329_Q;
     public boolean field_181657_aC;
+
+    /** The lastServer string. */
     public String field_74332_R;
+
+    /** Smooth Camera Toggle */
     public boolean field_74326_T;
     public boolean field_74325_U;
     public float field_74334_X;
     public float field_74333_Y;
     public float field_151452_as;
-    public int field_74335_Z;
+
+    /** GUI scale */
+    public int field_74335_Z = 2;
+
+    /** Determines amount of particles. 0 = All, 1 = Decreased, 2 = Minimal */
     public int field_74362_aa;
+
+    /** Game settings language */
     public String field_74363_ab;
     public boolean field_151455_aw;
+    public int ofFogType = 1;
+    public float ofFogStart = 0.8F;
+    public int ofMipmapType = 0;
+    public boolean ofOcclusionFancy = false;
+    public boolean ofSmoothFps = true;
+    public boolean ofSmoothWorld = Config.isSingleProcessor();
+    public boolean ofLazyChunkLoading = Config.isSingleProcessor();
+    public boolean ofSmartAnimations = true;
+    public float ofAoLevel = 1.0F;
+    public int ofAaLevel = 0;
+    public int ofAfLevel = 0;
+    public int ofClouds = 1;
+    public float ofCloudsHeight = 0.0F;
+    public int ofTrees = 1;
+    public int ofRain = 0;
+    public int ofDroppedItems = 1;
+    public int ofBetterGrass = 3;
+    public int ofAutoSaveTicks = 4000;
+    public boolean ofLagometer = false;
+    public boolean ofProfiler = false;
+    public boolean ofShowFps = false;
+    public boolean ofWeather = true;
+    public boolean ofSky = false;
+    public boolean ofStars = false;
+    public boolean ofSunMoon = false;
+    public int ofVignette = 1;
+    public int ofChunkUpdates = 1;
+    public boolean ofChunkUpdatesDynamic = false;
+    public int ofTime = 0;
+    public boolean ofClearWater = false;
+    public boolean ofBetterSnow = false;
+    public String ofFullscreenMode = "Default";
+    public boolean ofSwampColors = false;
+    public boolean ofRandomEntities = false;
+    public boolean ofSmoothBiomes = false;
+    public boolean ofCustomFonts = false;
+    public boolean ofCustomColors = false;
+    public boolean ofCustomSky = false;
+    public boolean ofShowCapes = false;
+    public int ofConnectedTextures = 2;
+    public boolean ofCustomItems = false;
+    public boolean ofNaturalTextures = false;
+    public boolean ofEmissiveTextures = false;
+    public boolean ofFastMath = true;
+    public boolean ofFastRender = false;
+    public int ofTranslucentBlocks = 1;
+    public boolean ofDynamicFov = false;
+    public boolean ofAlternateBlocks = false;
+    public int ofDynamicLights = 3;
+    public boolean ofCustomEntityModels = false;
+    public boolean ofCustomGuis = false;
+    public boolean ofShowGlErrors = false;
+    public int ofScreenshotSize = 1;
+    public int ofAnimatedWater = 2;
+    public int ofAnimatedLava = 2;
+    public boolean ofAnimatedFire = false;
+    public boolean ofAnimatedPortal = false;
+    public boolean ofAnimatedRedstone = false;
+    public boolean ofAnimatedExplosion = false;
+    public boolean ofAnimatedFlame = false;
+    public boolean ofAnimatedSmoke = false;
+    public boolean ofVoidParticles = false;
+    public boolean ofWaterParticles = false;
+    public boolean ofRainSplash = false;
+    public boolean ofPortalParticles = false;
+    public boolean ofPotionParticles = false;
+    public boolean ofFireworkParticles = false;
+    public boolean ofDrippingWaterLava = false;
+    public boolean ofAnimatedTerrain = false;
+    public boolean ofAnimatedTextures = false;
+    public static final int DEFAULT = 0;
+    public static final int FAST = 1;
+    public static final int FANCY = 2;
+    public static final int OFF = 3;
+    public static final int SMART = 4;
+    public static final int ANIM_ON = 0;
+    public static final int ANIM_GENERATED = 1;
+    public static final int ANIM_OFF = 2;
+    public static final String DEFAULT_STR = "Default";
+    private static final int[] OF_TREES_VALUES = new int[] {0, 1, 4, 2};
+    private static final int[] OF_DYNAMIC_LIGHTS = new int[] {3, 1, 2};
+    private static final String[] KEYS_DYNAMIC_LIGHTS = new String[] {"options.off", "options.graphics.fast", "options.graphics.fancy"};
+    public KeyBinding ofKeyBindZoom;
+    private File optionsFileOF;
+    private boolean needsResourceRefresh;
 
     public GameSettings(Minecraft p_i46326_1_, File p_i46326_2_)
     {
-        this.field_74324_K = (KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.field_74312_F, this.field_74313_G, this.field_74351_w, this.field_74370_x, this.field_74368_y, this.field_74366_z, this.field_74314_A, this.field_74311_E, this.field_151444_V, this.field_74316_C, this.field_151445_Q, this.field_74310_D, this.field_74321_H, this.field_74322_I, this.field_74323_J, this.field_151447_Z, this.field_151457_aa, this.field_151458_ab, this.field_152396_an, this.field_152397_ao, this.field_152398_ap, this.field_152399_aq, this.field_152395_am, this.field_178883_an}, this.field_151456_ac);
+        this.field_74324_K = (KeyBinding[])((KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.field_74312_F, this.field_74313_G, this.field_74351_w, this.field_74370_x, this.field_74368_y, this.field_74366_z, this.field_74314_A, this.field_74311_E, this.field_151444_V, this.field_74316_C, this.field_151445_Q, this.field_74310_D, this.field_74321_H, this.field_74322_I, this.field_74323_J, this.field_151447_Z, this.field_151457_aa, this.field_151458_ab, this.field_152396_an, this.field_152397_ao, this.field_152398_ap, this.field_152399_aq, this.field_152395_am, this.field_178883_an}, this.field_151456_ac));
         this.field_74318_M = EnumDifficulty.NORMAL;
         this.field_74332_R = "";
         this.field_74334_X = 70.0F;
@@ -174,6 +302,17 @@
         if (p_i46326_1_.func_147111_S() && Runtime.getRuntime().maxMemory() >= 1000000000L)
         {
             GameSettings.Options.RENDER_DISTANCE.func_148263_a(32.0F);
+            long i = 1000000L;
+
+            if (Runtime.getRuntime().maxMemory() >= 1500L * i)
+            {
+                GameSettings.Options.RENDER_DISTANCE.func_148263_a(48.0F);
+            }
+
+            if (Runtime.getRuntime().maxMemory() >= 2500L * i)
+            {
+                GameSettings.Options.RENDER_DISTANCE.func_148263_a(64.0F);
+            }
         }
         else
         {
@@ -181,12 +320,19 @@
         }
 
         this.field_151451_c = p_i46326_1_.func_147111_S() ? 12 : 8;
+        this.optionsFileOF = new File(p_i46326_2_, "optionsoffalcun.txt");
+        this.field_74350_i = (int)GameSettings.Options.FRAMERATE_LIMIT.func_148267_f();
+        this.ofKeyBindZoom = new KeyBinding("of.key.zoom", 46, "key.categories.misc");
+        this.field_74324_K = (KeyBinding[])((KeyBinding[])ArrayUtils.add(this.field_74324_K, this.ofKeyBindZoom));
+        KeyUtils.fixKeyConflicts(this.field_74324_K, new KeyBinding[] {this.ofKeyBindZoom});
+        this.field_151451_c = 8;
         this.func_74300_a();
+        Config.initGameSettings(this);
     }
 
     public GameSettings()
     {
-        this.field_74324_K = (KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.field_74312_F, this.field_74313_G, this.field_74351_w, this.field_74370_x, this.field_74368_y, this.field_74366_z, this.field_74314_A, this.field_74311_E, this.field_151444_V, this.field_74316_C, this.field_151445_Q, this.field_74310_D, this.field_74321_H, this.field_74322_I, this.field_74323_J, this.field_151447_Z, this.field_151457_aa, this.field_151458_ab, this.field_152396_an, this.field_152397_ao, this.field_152398_ap, this.field_152399_aq, this.field_152395_am, this.field_178883_an}, this.field_151456_ac);
+        this.field_74324_K = (KeyBinding[])((KeyBinding[])ArrayUtils.addAll(new KeyBinding[] {this.field_74312_F, this.field_74313_G, this.field_74351_w, this.field_74370_x, this.field_74368_y, this.field_74366_z, this.field_74314_A, this.field_74311_E, this.field_151444_V, this.field_74316_C, this.field_151445_Q, this.field_74310_D, this.field_74321_H, this.field_74322_I, this.field_74323_J, this.field_151447_Z, this.field_151457_aa, this.field_151458_ab, this.field_152396_an, this.field_152397_ao, this.field_152398_ap, this.field_152399_aq, this.field_152395_am, this.field_178883_an}, this.field_151456_ac));
         this.field_74318_M = EnumDifficulty.NORMAL;
         this.field_74332_R = "";
         this.field_74334_X = 70.0F;
@@ -194,24 +340,43 @@
         this.field_151455_aw = false;
     }
 
+    /**
+     * Represents a key or mouse button as a string. Args: key
+     */
     public static String func_74298_c(int p_74298_0_)
     {
         return p_74298_0_ < 0 ? I18n.func_135052_a("key.mouseButton", new Object[] {Integer.valueOf(p_74298_0_ + 101)}): (p_74298_0_ < 256 ? Keyboard.getKeyName(p_74298_0_) : String.format("%c", new Object[] {Character.valueOf((char)(p_74298_0_ - 256))}).toUpperCase());
     }
 
+    /**
+     * Returns whether the specified key binding is currently being pressed.
+     */
     public static boolean func_100015_a(KeyBinding p_100015_0_)
     {
         return p_100015_0_.func_151463_i() == 0 ? false : (p_100015_0_.func_151463_i() < 0 ? Mouse.isButtonDown(p_100015_0_.func_151463_i() + 100) : Keyboard.isKeyDown(p_100015_0_.func_151463_i()));
     }
 
+    /**
+     * Sets a key binding and then saves all settings.
+     */
     public void func_151440_a(KeyBinding p_151440_1_, int p_151440_2_)
     {
         p_151440_1_.func_151462_b(p_151440_2_);
         this.func_74303_b();
     }
-
+    
+    private ListenableFuture<Object> scheduleResourceRefresh(final Minecraft instance) {
+        this.needsResourceRefresh = true;
+        return null;
+    }
+    
+    /**
+     * If the specified option is controlled by a slider (float value), this will set the float value.
+     */
     public void func_74304_a(GameSettings.Options p_74304_1_, float p_74304_2_)
     {
+        this.setOptionFloatValueOF(p_74304_1_, p_74304_2_);
+
         if (p_74304_1_ == GameSettings.Options.SENSITIVITY)
         {
             this.field_74341_c = p_74304_2_;
@@ -230,6 +395,15 @@
         if (p_74304_1_ == GameSettings.Options.FRAMERATE_LIMIT)
         {
             this.field_74350_i = (int)p_74304_2_;
+            this.field_74352_v = false;
+
+            if (this.field_74350_i <= 0)
+            {
+                this.field_74350_i = (int)GameSettings.Options.FRAMERATE_LIMIT.func_148267_f();
+                this.field_74352_v = true;
+            }
+
+            this.updateVSync();
         }
 
         if (p_74304_1_ == GameSettings.Options.CHAT_OPACITY)
@@ -272,7 +446,7 @@
                 this.field_74317_L.func_147117_R().func_147633_a(this.field_151442_I);
                 this.field_74317_L.func_110434_K().func_110577_a(TextureMap.field_110575_b);
                 this.field_74317_L.func_147117_R().func_174937_a(false, this.field_151442_I > 0);
-                this.field_74317_L.func_175603_A();
+                scheduleResourceRefresh(field_74317_L);
             }
         }
 
@@ -316,8 +490,13 @@
         }
     }
 
+    /**
+     * For non-float options. Toggles the option on/off, or cycles through the list i.e. render distances.
+     */
     public void func_74306_a(GameSettings.Options p_74306_1_, int p_74306_2_)
     {
+        this.setOptionValueOF(p_74306_1_, p_74306_2_);
+
         if (p_74306_1_ == GameSettings.Options.INVERT_MOUSE)
         {
             this.field_74338_d = !this.field_74338_d;
@@ -325,7 +504,32 @@
 
         if (p_74306_1_ == GameSettings.Options.GUI_SCALE)
         {
-            this.field_74335_Z = this.field_74335_Z + p_74306_2_ & 3;
+            this.field_74335_Z += p_74306_2_;
+
+            if (GuiScreen.func_146272_n())
+            {
+                this.field_74335_Z = 0;
+            }
+
+            DisplayMode displaymode = Config.getLargestDisplayMode();
+            int i = displaymode.getWidth() / 320;
+            int j = displaymode.getHeight() / 240;
+            int k = Math.min(i, j);
+
+            if (this.field_74335_Z < 0)
+            {
+                this.field_74335_Z = k - 1;
+            }
+
+            if (this.field_74317_L.func_152349_b() && this.field_74335_Z % 2 != 0)
+            {
+                this.field_74335_Z += p_74306_2_;
+            }
+
+            if (this.field_74335_Z < 0 || this.field_74335_Z >= k)
+            {
+                this.field_74335_Z = 0;
+            }
         }
 
         if (p_74306_1_ == GameSettings.Options.PARTICLES)
@@ -356,6 +560,12 @@
 
         if (p_74306_1_ == GameSettings.Options.ANAGLYPH)
         {
+            if (!this.field_74337_g && Config.isShaders())
+            {
+                Config.showGuiMessage(Lang.get("of.message.an.shaders1"), Lang.get("of.message.an.shaders2"));
+                return;
+            }
+
             this.field_74337_g = !this.field_74337_g;
             this.field_74317_L.func_110436_a();
         }
@@ -363,6 +573,7 @@
         if (p_74306_1_ == GameSettings.Options.GRAPHICS)
         {
             this.field_74347_j = !this.field_74347_j;
+            this.updateRenderClouds();
             this.field_74317_L.field_71438_f.func_72712_a();
         }
 
@@ -467,7 +678,7 @@
 
         if (p_74306_1_ == GameSettings.Options.REALMS_NOTIFICATIONS)
         {
-            this.field_183509_X = !this.field_183509_X;
+            this.realmsNotifications = !this.realmsNotifications;
         }
 
         this.func_74303_b();
@@ -475,7 +686,8 @@
 
     public float func_74296_a(GameSettings.Options p_74296_1_)
     {
-        return p_74296_1_ == GameSettings.Options.FOV ? this.field_74334_X : (p_74296_1_ == GameSettings.Options.GAMMA ? this.field_74333_Y : (p_74296_1_ == GameSettings.Options.SATURATION ? this.field_151452_as : (p_74296_1_ == GameSettings.Options.SENSITIVITY ? this.field_74341_c : (p_74296_1_ == GameSettings.Options.CHAT_OPACITY ? this.field_74357_r : (p_74296_1_ == GameSettings.Options.CHAT_HEIGHT_FOCUSED ? this.field_96694_H : (p_74296_1_ == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED ? this.field_96693_G : (p_74296_1_ == GameSettings.Options.CHAT_SCALE ? this.field_96691_E : (p_74296_1_ == GameSettings.Options.CHAT_WIDTH ? this.field_96692_F : (p_74296_1_ == GameSettings.Options.FRAMERATE_LIMIT ? (float)this.field_74350_i : (p_74296_1_ == GameSettings.Options.MIPMAP_LEVELS ? (float)this.field_151442_I : (p_74296_1_ == GameSettings.Options.RENDER_DISTANCE ? (float)this.field_151451_c : (p_74296_1_ == GameSettings.Options.STREAM_BYTES_PER_PIXEL ? this.field_152400_J : (p_74296_1_ == GameSettings.Options.STREAM_VOLUME_MIC ? this.field_152401_K : (p_74296_1_ == GameSettings.Options.STREAM_VOLUME_SYSTEM ? this.field_152402_L : (p_74296_1_ == GameSettings.Options.STREAM_KBPS ? this.field_152403_M : (p_74296_1_ == GameSettings.Options.STREAM_FPS ? this.field_152404_N : 0.0F))))))))))))))));
+        float f = this.getOptionFloatValueOF(p_74296_1_);
+        return f != Float.MAX_VALUE ? f : (p_74296_1_ == GameSettings.Options.FOV ? this.field_74334_X : (p_74296_1_ == GameSettings.Options.GAMMA ? this.field_74333_Y : (p_74296_1_ == GameSettings.Options.SATURATION ? this.field_151452_as : (p_74296_1_ == GameSettings.Options.SENSITIVITY ? this.field_74341_c : (p_74296_1_ == GameSettings.Options.CHAT_OPACITY ? this.field_74357_r : (p_74296_1_ == GameSettings.Options.CHAT_HEIGHT_FOCUSED ? this.field_96694_H : (p_74296_1_ == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED ? this.field_96693_G : (p_74296_1_ == GameSettings.Options.CHAT_SCALE ? this.field_96691_E : (p_74296_1_ == GameSettings.Options.CHAT_WIDTH ? this.field_96692_F : (p_74296_1_ == GameSettings.Options.FRAMERATE_LIMIT ? (float)this.field_74350_i : (p_74296_1_ == GameSettings.Options.MIPMAP_LEVELS ? (float)this.field_151442_I : (p_74296_1_ == GameSettings.Options.RENDER_DISTANCE ? (float)this.field_151451_c : (p_74296_1_ == GameSettings.Options.STREAM_BYTES_PER_PIXEL ? this.field_152400_J : (p_74296_1_ == GameSettings.Options.STREAM_VOLUME_MIC ? this.field_152401_K : (p_74296_1_ == GameSettings.Options.STREAM_VOLUME_SYSTEM ? this.field_152402_L : (p_74296_1_ == GameSettings.Options.STREAM_KBPS ? this.field_152403_M : (p_74296_1_ == GameSettings.Options.STREAM_FPS ? this.field_152404_N : 0.0F)))))))))))))))));
     }
 
     public boolean func_74308_b(GameSettings.Options p_74308_1_)
@@ -484,45 +696,67 @@
         {
             case INVERT_MOUSE:
                 return this.field_74338_d;
+
             case VIEW_BOBBING:
                 return this.field_74336_f;
+
             case ANAGLYPH:
                 return this.field_74337_g;
+
             case FBO_ENABLE:
                 return this.field_151448_g;
+
             case CHAT_COLOR:
                 return this.field_74344_o;
+
             case CHAT_LINKS:
                 return this.field_74359_p;
+
             case CHAT_LINKS_PROMPT:
                 return this.field_74358_q;
+
             case SNOOPER_ENABLED:
                 return this.field_74355_t;
+
             case USE_FULLSCREEN:
                 return this.field_74353_u;
+
             case ENABLE_VSYNC:
                 return this.field_74352_v;
+
             case USE_VBO:
                 return this.field_178881_t;
+
             case TOUCHSCREEN:
                 return this.field_85185_A;
+
             case STREAM_SEND_METADATA:
                 return this.field_152406_P;
+
             case FORCE_UNICODE_FONT:
                 return this.field_151455_aw;
+
             case BLOCK_ALTERNATIVES:
                 return this.field_178880_u;
+
             case REDUCED_DEBUG_INFO:
                 return this.field_178879_v;
+
             case ENTITY_SHADOWS:
                 return this.field_181151_V;
+
             case REALMS_NOTIFICATIONS:
-                return this.field_183509_X;
+                return this.realmsNotifications;
+
             default:
                 return false;
         }
     }
 
+    /**
+     * Returns the translation of the given index in the given String array. If the index is smaller than 0 or greater
+     * than/equal to the length of the String array, it is changed to 0.
+     */
     private static String func_74299_a(String[] p_74299_0_, int p_74299_1_)
     {
         if (p_74299_1_ < 0 || p_74299_1_ >= p_74299_0_.length)
@@ -533,87 +767,1831 @@
         return I18n.func_135052_a(p_74299_0_[p_74299_1_], new Object[0]);
     }
 
+    /**
+     * Gets a key binding.
+     */
     public String func_74297_c(GameSettings.Options p_74297_1_)
     {
-        String s = I18n.func_135052_a(p_74297_1_.func_74378_d(), new Object[0]) + ": ";
+        String s = this.getKeyBindingOF(p_74297_1_);
 
-        if (p_74297_1_.func_74380_a())
+        if (s != null)
         {
-            float f1 = this.func_74296_a(p_74297_1_);
-            float f = p_74297_1_.func_148266_c(f1);
-            return p_74297_1_ == GameSettings.Options.SENSITIVITY ? (f == 0.0F ? s + I18n.func_135052_a("options.sensitivity.min", new Object[0]) : (f == 1.0F ? s + I18n.func_135052_a("options.sensitivity.max", new Object[0]) : s + (int)(f * 200.0F) + "%")) : (p_74297_1_ == GameSettings.Options.FOV ? (f1 == 70.0F ? s + I18n.func_135052_a("options.fov.min", new Object[0]) : (f1 == 110.0F ? s + I18n.func_135052_a("options.fov.max", new Object[0]) : s + (int)f1)) : (p_74297_1_ == GameSettings.Options.FRAMERATE_LIMIT ? (f1 == p_74297_1_.field_148272_O ? s + I18n.func_135052_a("options.framerateLimit.max", new Object[0]) : s + (int)f1 + " fps") : (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS ? (f1 == p_74297_1_.field_148271_N ? s + I18n.func_135052_a("options.cloudHeight.min", new Object[0]) : s + ((int)f1 + 128)) : (p_74297_1_ == GameSettings.Options.GAMMA ? (f == 0.0F ? s + I18n.func_135052_a("options.gamma.min", new Object[0]) : (f == 1.0F ? s + I18n.func_135052_a("options.gamma.max", new Object[0]) : s + "+" + (int)(f * 100.0F) + "%")) : (p_74297_1_ == GameSettings.Options.SATURATION ? s + (int)(f * 400.0F) + "%" : (p_74297_1_ == GameSettings.Options.CHAT_OPACITY ? s + (int)(f * 90.0F + 10.0F) + "%" : (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED ? s + GuiNewChat.func_146243_b(f) + "px" : (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_FOCUSED ? s + GuiNewChat.func_146243_b(f) + "px" : (p_74297_1_ == GameSettings.Options.CHAT_WIDTH ? s + GuiNewChat.func_146233_a(f) + "px" : (p_74297_1_ == GameSettings.Options.RENDER_DISTANCE ? s + (int)f1 + " chunks" : (p_74297_1_ == GameSettings.Options.MIPMAP_LEVELS ? (f1 == 0.0F ? s + I18n.func_135052_a("options.off", new Object[0]) : s + (int)f1) : (p_74297_1_ == GameSettings.Options.STREAM_FPS ? s + TwitchStream.func_152948_a(f) + " fps" : (p_74297_1_ == GameSettings.Options.STREAM_KBPS ? s + TwitchStream.func_152946_b(f) + " Kbps" : (p_74297_1_ == GameSettings.Options.STREAM_BYTES_PER_PIXEL ? s + String.format("%.3f bpp", new Object[] {Float.valueOf(TwitchStream.func_152947_c(f))}): (f == 0.0F ? s + I18n.func_135052_a("options.off", new Object[0]) : s + (int)(f * 100.0F) + "%")))))))))))))));
+            return s;
         }
-        else if (p_74297_1_.func_74382_b())
+        else
         {
-            boolean flag = this.func_74308_b(p_74297_1_);
-            return flag ? s + I18n.func_135052_a("options.on", new Object[0]) : s + I18n.func_135052_a("options.off", new Object[0]);
+            String s1 = I18n.func_135052_a(p_74297_1_.func_74378_d(), new Object[0]) + ": ";
+
+            if (p_74297_1_.func_74380_a())
+            {
+                float f1 = this.func_74296_a(p_74297_1_);
+                float f = p_74297_1_.func_148266_c(f1);
+                return p_74297_1_ == GameSettings.Options.MIPMAP_LEVELS && (double)f1 >= 4.0D ? s1 + Lang.get("of.general.max") : (p_74297_1_ == GameSettings.Options.SENSITIVITY ? (f == 0.0F ? s1 + I18n.func_135052_a("options.sensitivity.min", new Object[0]) : (f == 1.0F ? s1 + I18n.func_135052_a("options.sensitivity.max", new Object[0]) : s1 + (int)(f * 200.0F) + "%")) : (p_74297_1_ == GameSettings.Options.FOV ? (f1 == 70.0F ? s1 + I18n.func_135052_a("options.fov.min", new Object[0]) : (f1 == 110.0F ? s1 + I18n.func_135052_a("options.fov.max", new Object[0]) : s1 + (int)f1)) : (p_74297_1_ == GameSettings.Options.FRAMERATE_LIMIT ? (f1 == p_74297_1_.field_148272_O ? s1 + I18n.func_135052_a("options.framerateLimit.max", new Object[0]) : s1 + (int)f1 + " fps") : (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS ? (f1 == p_74297_1_.field_148271_N ? s1 + I18n.func_135052_a("options.cloudHeight.min", new Object[0]) : s1 + ((int)f1 + 128)) : (p_74297_1_ == GameSettings.Options.GAMMA ? (f == 0.0F ? s1 + I18n.func_135052_a("options.gamma.min", new Object[0]) : (f == 1.0F ? s1 + I18n.func_135052_a("options.gamma.max", new Object[0]) : s1 + "+" + (int)(f * 100.0F) + "%")) : (p_74297_1_ == GameSettings.Options.SATURATION ? s1 + (int)(f * 400.0F) + "%" : (p_74297_1_ == GameSettings.Options.CHAT_OPACITY ? s1 + (int)(f * 90.0F + 10.0F) + "%" : (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_UNFOCUSED ? s1 + GuiNewChat.func_146243_b(f) + "px" : (p_74297_1_ == GameSettings.Options.CHAT_HEIGHT_FOCUSED ? s1 + GuiNewChat.func_146243_b(f) + "px" : (p_74297_1_ == GameSettings.Options.CHAT_WIDTH ? s1 + GuiNewChat.func_146233_a(f) + "px" : (p_74297_1_ == GameSettings.Options.RENDER_DISTANCE ? s1 + (int)f1 + " chunks" : (p_74297_1_ == GameSettings.Options.MIPMAP_LEVELS ? (f1 == 0.0F ? s1 + I18n.func_135052_a("options.off", new Object[0]) : s1 + (int)f1) : (p_74297_1_ == GameSettings.Options.STREAM_FPS ? s1 + TwitchStream.func_152948_a(f) + " fps" : (p_74297_1_ == GameSettings.Options.STREAM_KBPS ? s1 + TwitchStream.func_152946_b(f) + " Kbps" : (p_74297_1_ == GameSettings.Options.STREAM_BYTES_PER_PIXEL ? s1 + String.format("%.3f bpp", new Object[] {Float.valueOf(TwitchStream.func_152947_c(f))}): (f == 0.0F ? s1 + I18n.func_135052_a("options.off", new Object[0]) : s1 + (int)(f * 100.0F) + "%"))))))))))))))));
+            }
+            else if (p_74297_1_.func_74382_b())
+            {
+                boolean flag = this.func_74308_b(p_74297_1_);
+                return flag ? s1 + I18n.func_135052_a("options.on", new Object[0]) : s1 + I18n.func_135052_a("options.off", new Object[0]);
+            }
+            else if (p_74297_1_ == GameSettings.Options.GUI_SCALE)
+            {
+                return this.field_74335_Z >= field_74367_ae.length ? s1 + this.field_74335_Z + "x" : s1 + func_74299_a(field_74367_ae, this.field_74335_Z);
+            }
+            else if (p_74297_1_ == GameSettings.Options.CHAT_VISIBILITY)
+            {
+                return s1 + I18n.func_135052_a(this.field_74343_n.func_151429_b(), new Object[0]);
+            }
+            else if (p_74297_1_ == GameSettings.Options.PARTICLES)
+            {
+                return s1 + func_74299_a(field_74364_ag, this.field_74362_aa);
+            }
+            else if (p_74297_1_ == GameSettings.Options.AMBIENT_OCCLUSION)
+            {
+                return s1 + func_74299_a(field_98303_au, this.field_74348_k);
+            }
+            else if (p_74297_1_ == GameSettings.Options.STREAM_COMPRESSION)
+            {
+                return s1 + func_74299_a(field_152391_aS, this.field_152405_O);
+            }
+            else if (p_74297_1_ == GameSettings.Options.STREAM_CHAT_ENABLED)
+            {
+                return s1 + func_74299_a(field_152392_aT, this.field_152408_R);
+            }
+            else if (p_74297_1_ == GameSettings.Options.STREAM_CHAT_USER_FILTER)
+            {
+                return s1 + func_74299_a(field_152393_aU, this.field_152409_S);
+            }
+            else if (p_74297_1_ == GameSettings.Options.STREAM_MIC_TOGGLE_BEHAVIOR)
+            {
+                return s1 + func_74299_a(field_152394_aV, this.field_152410_T);
+            }
+            else if (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS)
+            {
+                return s1 + func_74299_a(field_181149_aW, this.field_74345_l);
+            }
+            else if (p_74297_1_ == GameSettings.Options.GRAPHICS)
+            {
+                if (this.field_74347_j)
+                {
+                    return s1 + I18n.func_135052_a("options.graphics.fancy", new Object[0]);
+                }
+                else
+                {
+                    String s2 = "options.graphics.fast";
+                    return s1 + I18n.func_135052_a("options.graphics.fast", new Object[0]);
+                }
+            }
+            else
+            {
+                return s1;
+            }
         }
-        else if (p_74297_1_ == GameSettings.Options.GUI_SCALE)
+    }
+
+    /**
+     * Loads the options from the options file. It appears that this has replaced the previous 'loadOptions'
+     */
+    public void func_74300_a()
+    {
+        FileInputStream fileinputstream = null;
+        label2:
         {
-            return s + func_74299_a(field_74367_ae, this.field_74335_Z);
+            try
+            {
+                if (this.field_74354_ai.exists())
+                {
+                    BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(fileinputstream = new FileInputStream(this.field_74354_ai)));
+                    String s = "";
+                    this.field_151446_aD.clear();
+
+                    while ((s = bufferedreader.readLine()) != null)
+                    {
+                        try
+                        {
+                            String[] astring = s.split(":");
+
+                            if (astring[0].equals("mouseSensitivity"))
+                            {
+                                this.field_74341_c = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("fov"))
+                            {
+                                this.field_74334_X = this.func_74305_a(astring[1]) * 40.0F + 70.0F;
+                            }
+
+                            if (astring[0].equals("gamma"))
+                            {
+                                this.field_74333_Y = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("saturation"))
+                            {
+                                this.field_151452_as = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("invertYMouse"))
+                            {
+                                this.field_74338_d = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("renderDistance"))
+                            {
+                                this.field_151451_c = Integer.parseInt(astring[1]);
+                            }
+
+                            if (astring[0].equals("guiScale"))
+                            {
+                                this.field_74335_Z = Integer.parseInt(astring[1]);
+                            }
+
+                            if (astring[0].equals("particles"))
+                            {
+                                this.field_74362_aa = Integer.parseInt(astring[1]);
+                            }
+
+                            if (astring[0].equals("bobView"))
+                            {
+                                this.field_74336_f = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("anaglyph3d"))
+                            {
+                                this.field_74337_g = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("maxFps"))
+                            {
+                                this.field_74350_i = Integer.parseInt(astring[1]);
+
+                                if (this.field_74352_v)
+                                {
+                                    this.field_74350_i = (int)GameSettings.Options.FRAMERATE_LIMIT.func_148267_f();
+                                }
+
+                                if (this.field_74350_i <= 0)
+                                {
+                                    this.field_74350_i = (int)GameSettings.Options.FRAMERATE_LIMIT.func_148267_f();
+                                }
+                            }
+
+                            if (astring[0].equals("fboEnable"))
+                            {
+                                this.field_151448_g = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("difficulty"))
+                            {
+                                this.field_74318_M = EnumDifficulty.func_151523_a(Integer.parseInt(astring[1]));
+                            }
+
+                            if (astring[0].equals("fancyGraphics"))
+                            {
+                                this.field_74347_j = astring[1].equals("true");
+                                this.updateRenderClouds();
+                            }
+
+                            if (astring[0].equals("ao"))
+                            {
+                                if (astring[1].equals("true"))
+                                {
+                                    this.field_74348_k = 2;
+                                }
+                                else if (astring[1].equals("false"))
+                                {
+                                    this.field_74348_k = 0;
+                                }
+                                else
+                                {
+                                    this.field_74348_k = Integer.parseInt(astring[1]);
+                                }
+                            }
+
+                            if (astring[0].equals("renderClouds"))
+                            {
+                                if (astring[1].equals("true"))
+                                {
+                                    this.field_74345_l = 2;
+                                }
+                                else if (astring[1].equals("false"))
+                                {
+                                    this.field_74345_l = 0;
+                                }
+                                else if (astring[1].equals("fast"))
+                                {
+                                    this.field_74345_l = 1;
+                                }
+                            }
+
+                            if (astring[0].equals("resourcePacks"))
+                            {
+                                this.field_151453_l = (List)field_151450_ay.fromJson((String)s.substring(s.indexOf(58) + 1), field_151449_az);
+
+                                if (this.field_151453_l == null)
+                                {
+                                    this.field_151453_l = Lists.<String>newArrayList();
+                                }
+                            }
+
+                            if (astring[0].equals("incompatibleResourcePacks"))
+                            {
+                                this.field_183018_l = (List)field_151450_ay.fromJson((String)s.substring(s.indexOf(58) + 1), field_151449_az);
+
+                                if (this.field_183018_l == null)
+                                {
+                                    this.field_183018_l = Lists.<String>newArrayList();
+                                }
+                            }
+
+                            if (astring[0].equals("lastServer") && astring.length >= 2)
+                            {
+                                this.field_74332_R = s.substring(s.indexOf(58) + 1);
+                            }
+
+                            if (astring[0].equals("lang") && astring.length >= 2)
+                            {
+                                this.field_74363_ab = astring[1];
+                            }
+
+                            if (astring[0].equals("chatVisibility"))
+                            {
+                                this.field_74343_n = EntityPlayer.EnumChatVisibility.func_151426_a(Integer.parseInt(astring[1]));
+                            }
+
+                            if (astring[0].equals("chatColors"))
+                            {
+                                this.field_74344_o = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("chatLinks"))
+                            {
+                                this.field_74359_p = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("chatLinksPrompt"))
+                            {
+                                this.field_74358_q = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("chatOpacity"))
+                            {
+                                this.field_74357_r = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("snooperEnabled"))
+                            {
+                                this.field_74355_t = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("fullscreen"))
+                            {
+                                this.field_74353_u = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("enableVsync"))
+                            {
+                                this.field_74352_v = astring[1].equals("true");
+
+                                if (this.field_74352_v)
+                                {
+                                    this.field_74350_i = (int)GameSettings.Options.FRAMERATE_LIMIT.func_148267_f();
+                                }
+
+                                this.updateVSync();
+                            }
+
+                            if (astring[0].equals("useVbo"))
+                            {
+                                this.field_178881_t = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("hideServerAddress"))
+                            {
+                                this.field_80005_w = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("advancedItemTooltips"))
+                            {
+                                this.field_82882_x = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("pauseOnLostFocus"))
+                            {
+                                this.field_82881_y = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("touchscreen"))
+                            {
+                                this.field_85185_A = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("overrideHeight"))
+                            {
+                                this.field_92119_C = Integer.parseInt(astring[1]);
+                            }
+
+                            if (astring[0].equals("overrideWidth"))
+                            {
+                                this.field_92118_B = Integer.parseInt(astring[1]);
+                            }
+
+                            if (astring[0].equals("heldItemTooltips"))
+                            {
+                                this.field_92117_D = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("chatHeightFocused"))
+                            {
+                                this.field_96694_H = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("chatHeightUnfocused"))
+                            {
+                                this.field_96693_G = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("chatScale"))
+                            {
+                                this.field_96691_E = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("chatWidth"))
+                            {
+                                this.field_96692_F = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("showInventoryAchievementHint"))
+                            {
+                                this.field_151441_H = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("mipmapLevels"))
+                            {
+                                this.field_151442_I = Integer.parseInt(astring[1]);
+                            }
+
+                            if (astring[0].equals("streamBytesPerPixel"))
+                            {
+                                this.field_152400_J = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("streamMicVolume"))
+                            {
+                                this.field_152401_K = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("streamSystemVolume"))
+                            {
+                                this.field_152402_L = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("streamKbps"))
+                            {
+                                this.field_152403_M = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("streamFps"))
+                            {
+                                this.field_152404_N = this.func_74305_a(astring[1]);
+                            }
+
+                            if (astring[0].equals("streamCompression"))
+                            {
+                                this.field_152405_O = Integer.parseInt(astring[1]);
+                            }
+
+                            if (astring[0].equals("streamSendMetadata"))
+                            {
+                                this.field_152406_P = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("streamPreferredServer") && astring.length >= 2)
+                            {
+                                this.field_152407_Q = s.substring(s.indexOf(58) + 1);
+                            }
+
+                            if (astring[0].equals("streamChatEnabled"))
+                            {
+                                this.field_152408_R = Integer.parseInt(astring[1]);
+                            }
+
+                            if (astring[0].equals("streamChatUserFilter"))
+                            {
+                                this.field_152409_S = Integer.parseInt(astring[1]);
+                            }
+
+                            if (astring[0].equals("streamMicToggleBehavior"))
+                            {
+                                this.field_152410_T = Integer.parseInt(astring[1]);
+                            }
+
+                            if (astring[0].equals("forceUnicodeFont"))
+                            {
+                                this.field_151455_aw = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("allowBlockAlternatives"))
+                            {
+                                this.field_178880_u = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("reducedDebugInfo"))
+                            {
+                                this.field_178879_v = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("useNativeTransport"))
+                            {
+                                this.field_181150_U = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("entityShadows"))
+                            {
+                                this.field_181151_V = astring[1].equals("true");
+                            }
+
+                            if (astring[0].equals("realmsNotifications"))
+                            {
+                                this.realmsNotifications = astring[1].equals("true");
+                            }
+
+                            for (KeyBinding keybinding : this.field_74324_K)
+                            {
+                                if (astring[0].equals("key_" + keybinding.func_151464_g()))
+                                {
+                                    keybinding.func_151462_b(Integer.parseInt(astring[1]));
+                                }
+                            }
+
+                            for (SoundCategory soundcategory : SoundCategory.values())
+                            {
+                                if (astring[0].equals("soundCategory_" + soundcategory.func_147155_a()))
+                                {
+                                    this.field_151446_aD.put(soundcategory, Float.valueOf(this.func_74305_a(astring[1])));
+                                }
+                            }
+
+                            for (EnumPlayerModelParts enumplayermodelparts : EnumPlayerModelParts.values())
+                            {
+                                if (astring[0].equals("modelPart_" + enumplayermodelparts.func_179329_c()))
+                                {
+                                    this.func_178878_a(enumplayermodelparts, astring[1].equals("true"));
+                                }
+                            }
+                        }
+                        catch (Exception exception)
+                        {
+                            field_151454_ax.warn("Skipping bad option: " + s);
+                            exception.printStackTrace();
+                        }
+                    }
+
+                    KeyBinding.func_74508_b();
+                    bufferedreader.close();
+                    break label2;
+                }
+            }
+            catch (Exception exception1)
+            {
+                field_151454_ax.error((String)"Failed to load options", (Throwable)exception1);
+                break label2;
+            }
+            finally
+            {
+                IOUtils.closeQuietly((InputStream)fileinputstream);
+            }
+
+            return;
         }
-        else if (p_74297_1_ == GameSettings.Options.CHAT_VISIBILITY)
+        this.loadOfOptions();
+    }
+
+    /**
+     * Parses a string into a float.
+     */
+    private float func_74305_a(String p_74305_1_)
+    {
+        return p_74305_1_.equals("true") ? 1.0F : (p_74305_1_.equals("false") ? 0.0F : Float.parseFloat(p_74305_1_));
+    }
+
+    /**
+     * Saves the options to the options file.
+     */
+    public void func_74303_b()
+    {
+        if (Reflector.FMLClientHandler.exists())
         {
-            return s + I18n.func_135052_a(this.field_74343_n.func_151429_b(), new Object[0]);
+            Object object = Reflector.call(Reflector.FMLClientHandler_instance, new Object[0]);
+
+            if (object != null && Reflector.callBoolean(object, Reflector.FMLClientHandler_isLoading, new Object[0]))
+            {
+                return;
+            }
         }
-        else if (p_74297_1_ == GameSettings.Options.PARTICLES)
+
+        try
         {
-            return s + func_74299_a(field_74364_ag, this.field_74362_aa);
+            PrintWriter printwriter = new PrintWriter(new FileWriter(this.field_74354_ai));
+            printwriter.println("invertYMouse:" + this.field_74338_d);
+            printwriter.println("mouseSensitivity:" + this.field_74341_c);
+            printwriter.println("fov:" + (this.field_74334_X - 70.0F) / 40.0F);
+            printwriter.println("gamma:" + this.field_74333_Y);
+            printwriter.println("saturation:" + this.field_151452_as);
+            printwriter.println("renderDistance:" + this.field_151451_c);
+            printwriter.println("guiScale:" + this.field_74335_Z);
+            printwriter.println("particles:" + this.field_74362_aa);
+            printwriter.println("bobView:" + this.field_74336_f);
+            printwriter.println("anaglyph3d:" + this.field_74337_g);
+            printwriter.println("maxFps:" + this.field_74350_i);
+            printwriter.println("fboEnable:" + this.field_151448_g);
+            printwriter.println("difficulty:" + this.field_74318_M.func_151525_a());
+            printwriter.println("fancyGraphics:" + this.field_74347_j);
+            printwriter.println("ao:" + this.field_74348_k);
+
+            switch (this.field_74345_l)
+            {
+                case 0:
+                    printwriter.println("renderClouds:false");
+                    break;
+
+                case 1:
+                    printwriter.println("renderClouds:fast");
+                    break;
+
+                case 2:
+                    printwriter.println("renderClouds:true");
+            }
+
+            printwriter.println("resourcePacks:" + field_151450_ay.toJson((Object)this.field_151453_l));
+            printwriter.println("incompatibleResourcePacks:" + field_151450_ay.toJson((Object)this.field_183018_l));
+            printwriter.println("lastServer:" + this.field_74332_R);
+            printwriter.println("lang:" + this.field_74363_ab);
+            printwriter.println("chatVisibility:" + this.field_74343_n.func_151428_a());
+            printwriter.println("chatColors:" + this.field_74344_o);
+            printwriter.println("chatLinks:" + this.field_74359_p);
+            printwriter.println("chatLinksPrompt:" + this.field_74358_q);
+            printwriter.println("chatOpacity:" + this.field_74357_r);
+            printwriter.println("snooperEnabled:" + this.field_74355_t);
+            printwriter.println("fullscreen:" + this.field_74353_u);
+            printwriter.println("enableVsync:" + this.field_74352_v);
+            printwriter.println("useVbo:" + this.field_178881_t);
+            printwriter.println("hideServerAddress:" + this.field_80005_w);
+            printwriter.println("advancedItemTooltips:" + this.field_82882_x);
+            printwriter.println("pauseOnLostFocus:" + this.field_82881_y);
+            printwriter.println("touchscreen:" + this.field_85185_A);
+            printwriter.println("overrideWidth:" + this.field_92118_B);
+            printwriter.println("overrideHeight:" + this.field_92119_C);
+            printwriter.println("heldItemTooltips:" + this.field_92117_D);
+            printwriter.println("chatHeightFocused:" + this.field_96694_H);
+            printwriter.println("chatHeightUnfocused:" + this.field_96693_G);
+            printwriter.println("chatScale:" + this.field_96691_E);
+            printwriter.println("chatWidth:" + this.field_96692_F);
+            printwriter.println("showInventoryAchievementHint:" + this.field_151441_H);
+            printwriter.println("mipmapLevels:" + this.field_151442_I);
+            printwriter.println("streamBytesPerPixel:" + this.field_152400_J);
+            printwriter.println("streamMicVolume:" + this.field_152401_K);
+            printwriter.println("streamSystemVolume:" + this.field_152402_L);
+            printwriter.println("streamKbps:" + this.field_152403_M);
+            printwriter.println("streamFps:" + this.field_152404_N);
+            printwriter.println("streamCompression:" + this.field_152405_O);
+            printwriter.println("streamSendMetadata:" + this.field_152406_P);
+            printwriter.println("streamPreferredServer:" + this.field_152407_Q);
+            printwriter.println("streamChatEnabled:" + this.field_152408_R);
+            printwriter.println("streamChatUserFilter:" + this.field_152409_S);
+            printwriter.println("streamMicToggleBehavior:" + this.field_152410_T);
+            printwriter.println("forceUnicodeFont:" + this.field_151455_aw);
+            printwriter.println("allowBlockAlternatives:" + this.field_178880_u);
+            printwriter.println("reducedDebugInfo:" + this.field_178879_v);
+            printwriter.println("useNativeTransport:" + this.field_181150_U);
+            printwriter.println("entityShadows:" + this.field_181151_V);
+            printwriter.println("realmsNotifications:" + this.realmsNotifications);
+
+            for (KeyBinding keybinding : this.field_74324_K)
+            {
+                printwriter.println("key_" + keybinding.func_151464_g() + ":" + keybinding.func_151463_i());
+            }
+
+            for (SoundCategory soundcategory : SoundCategory.values())
+            {
+                printwriter.println("soundCategory_" + soundcategory.func_147155_a() + ":" + this.func_151438_a(soundcategory));
+            }
+
+            for (EnumPlayerModelParts enumplayermodelparts : EnumPlayerModelParts.values())
+            {
+                printwriter.println("modelPart_" + enumplayermodelparts.func_179329_c() + ":" + this.field_178882_aU.contains(enumplayermodelparts));
+            }
+
+            printwriter.close();
         }
-        else if (p_74297_1_ == GameSettings.Options.AMBIENT_OCCLUSION)
+        catch (Exception exception)
         {
-            return s + func_74299_a(field_98303_au, this.field_74348_k);
+            field_151454_ax.error((String)"Failed to save options", (Throwable)exception);
         }
-        else if (p_74297_1_ == GameSettings.Options.STREAM_COMPRESSION)
+
+        this.saveOfOptions();
+        this.func_82879_c();
+    }
+
+    public float func_151438_a(SoundCategory p_151438_1_)
+    {
+        return this.field_151446_aD.containsKey(p_151438_1_) ? ((Float)this.field_151446_aD.get(p_151438_1_)).floatValue() : 1.0F;
+    }
+
+    public void func_151439_a(SoundCategory p_151439_1_, float p_151439_2_)
+    {
+        this.field_74317_L.func_147118_V().func_147684_a(p_151439_1_, p_151439_2_);
+        this.field_151446_aD.put(p_151439_1_, Float.valueOf(p_151439_2_));
+    }
+
+    /**
+     * Send a client info packet with settings information to the server
+     */
+    public void func_82879_c()
+    {
+        if (this.field_74317_L.field_71439_g != null)
         {
-            return s + func_74299_a(field_152391_aS, this.field_152405_O);
+            int i = 0;
+
+            for (EnumPlayerModelParts enumplayermodelparts : this.field_178882_aU)
+            {
+                i |= enumplayermodelparts.func_179327_a();
+            }
+
+            this.field_74317_L.field_71439_g.field_71174_a.func_147297_a(new C15PacketClientSettings(this.field_74363_ab, this.field_151451_c, this.field_74343_n, this.field_74344_o, i));
         }
-        else if (p_74297_1_ == GameSettings.Options.STREAM_CHAT_ENABLED)
+    }
+
+    public Set<EnumPlayerModelParts> func_178876_d()
+    {
+        return ImmutableSet.copyOf(this.field_178882_aU);
+    }
+
+    public void func_178878_a(EnumPlayerModelParts p_178878_1_, boolean p_178878_2_)
+    {
+        if (p_178878_2_)
         {
-            return s + func_74299_a(field_152392_aT, this.field_152408_R);
+            this.field_178882_aU.add(p_178878_1_);
         }
-        else if (p_74297_1_ == GameSettings.Options.STREAM_CHAT_USER_FILTER)
+        else
         {
-            return s + func_74299_a(field_152393_aU, this.field_152409_S);
+            this.field_178882_aU.remove(p_178878_1_);
         }
-        else if (p_74297_1_ == GameSettings.Options.STREAM_MIC_TOGGLE_BEHAVIOR)
+
+        this.func_82879_c();
+    }
+
+    public void func_178877_a(EnumPlayerModelParts p_178877_1_)
+    {
+        if (!this.func_178876_d().contains(p_178877_1_))
         {
-            return s + func_74299_a(field_152394_aV, this.field_152410_T);
+            this.field_178882_aU.add(p_178877_1_);
         }
-        else if (p_74297_1_ == GameSettings.Options.RENDER_CLOUDS)
+        else
         {
-            return s + func_74299_a(field_181149_aW, this.field_74345_l);
+            this.field_178882_aU.remove(p_178877_1_);
         }
-        else if (p_74297_1_ == GameSettings.Options.GRAPHICS)
+
+        this.func_82879_c();
+    }
+
+    public int func_181147_e()
+    {
+        return this.field_151451_c >= 4 ? this.field_74345_l : 0;
+    }
+
+    public boolean func_181148_f()
+    {
+        return this.field_181150_U;
+    }
+
+    private void setOptionFloatValueOF(GameSettings.Options p_setOptionFloatValueOF_1_, float p_setOptionFloatValueOF_2_)
+    {
+        if (p_setOptionFloatValueOF_1_ == GameSettings.Options.CLOUD_HEIGHT)
         {
-            if (this.field_74347_j)
+            this.ofCloudsHeight = p_setOptionFloatValueOF_2_;
+            this.field_74317_L.field_71438_f.resetClouds();
+        }
+
+        if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AO_LEVEL)
+        {
+            this.ofAoLevel = p_setOptionFloatValueOF_2_;
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AA_LEVEL)
+        {
+            int i = (int)p_setOptionFloatValueOF_2_;
+
+            if (i > 0 && Config.isShaders())
             {
-                return s + I18n.func_135052_a("options.graphics.fancy", new Object[0]);
+                Config.showGuiMessage(Lang.get("of.message.aa.shaders1"), Lang.get("of.message.aa.shaders2"));
+                return;
             }
+
+            int[] aint = new int[] {0, 2, 4, 6, 8, 12, 16};
+            this.ofAaLevel = 0;
+
+            for (int j = 0; j < aint.length; ++j)
+            {
+                if (i >= aint[j])
+                {
+                    this.ofAaLevel = aint[j];
+                }
+            }
+
+            this.ofAaLevel = Config.limit(this.ofAaLevel, 0, 16);
+        }
+
+        if (p_setOptionFloatValueOF_1_ == GameSettings.Options.AF_LEVEL)
+        {
+            int k = (int)p_setOptionFloatValueOF_2_;
+
+            if (k > 1 && Config.isShaders())
+            {
+                Config.showGuiMessage(Lang.get("of.message.af.shaders1"), Lang.get("of.message.af.shaders2"));
+                return;
+            }
+
+            for (this.ofAfLevel = 1; this.ofAfLevel * 2 <= k; this.ofAfLevel *= 2)
+            {
+                ;
+            }
+
+            this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
+            this.field_74317_L.func_110436_a();
+        }
+
+        if (p_setOptionFloatValueOF_1_ == GameSettings.Options.MIPMAP_TYPE)
+        {
+            int l = (int)p_setOptionFloatValueOF_2_;
+            this.ofMipmapType = Config.limit(l, 0, 3);
+            this.field_74317_L.func_110436_a();
+        }
+
+        if (p_setOptionFloatValueOF_1_ == GameSettings.Options.FULLSCREEN_MODE)
+        {
+            int i1 = (int)p_setOptionFloatValueOF_2_ - 1;
+            String[] astring = Config.getDisplayModeNames();
+
+            if (i1 < 0 || i1 >= astring.length)
+            {
+                this.ofFullscreenMode = "Default";
+                return;
+            }
+
+            this.ofFullscreenMode = astring[i1];
+        }
+    }
+
+    private float getOptionFloatValueOF(GameSettings.Options p_getOptionFloatValueOF_1_)
+    {
+        if (p_getOptionFloatValueOF_1_ == GameSettings.Options.CLOUD_HEIGHT)
+        {
+            return this.ofCloudsHeight;
+        }
+        else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.AO_LEVEL)
+        {
+            return this.ofAoLevel;
+        }
+        else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.AA_LEVEL)
+        {
+            return (float)this.ofAaLevel;
+        }
+        else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.AF_LEVEL)
+        {
+            return (float)this.ofAfLevel;
+        }
+        else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.MIPMAP_TYPE)
+        {
+            return (float)this.ofMipmapType;
+        }
+        else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.FRAMERATE_LIMIT)
+        {
+            return (float)this.field_74350_i == GameSettings.Options.FRAMERATE_LIMIT.func_148267_f() && this.field_74352_v ? 0.0F : (float)this.field_74350_i;
+        }
+        else if (p_getOptionFloatValueOF_1_ == GameSettings.Options.FULLSCREEN_MODE)
+        {
+            if (this.ofFullscreenMode.equals("Default"))
+            {
+                return 0.0F;
+            }
             else
             {
-                String s1 = "options.graphics.fast";
-                return s + I18n.func_135052_a("options.graphics.fast", new Object[0]);
+                List list = Arrays.asList(Config.getDisplayModeNames());
+                int i = list.indexOf(this.ofFullscreenMode);
+                return i < 0 ? 0.0F : (float)(i + 1);
             }
         }
         else
         {
-            return s;
+            return Float.MAX_VALUE;
         }
     }
 
-    public void func_74300_a()
+    private void setOptionValueOF(GameSettings.Options p_setOptionValueOF_1_, int p_setOptionValueOF_2_)
     {
+        if (p_setOptionValueOF_1_ == GameSettings.Options.FOG_FANCY)
+        {
+            switch (this.ofFogType)
+            {
+                case 1:
+                    this.ofFogType = 2;
+
+                    if (!Config.isFancyFogAvailable())
+                    {
+                        this.ofFogType = 3;
+                    }
+
+                    break;
+
+                case 2:
+                    this.ofFogType = 3;
+                    break;
+
+                case 3:
+                    this.ofFogType = 1;
+                    break;
+
+                default:
+                    this.ofFogType = 1;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.FOG_START)
+        {
+            this.ofFogStart += 0.2F;
+
+            if (this.ofFogStart > 0.81F)
+            {
+                this.ofFogStart = 0.2F;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_FPS)
+        {
+            this.ofSmoothFps = !this.ofSmoothFps;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_WORLD)
+        {
+            this.ofSmoothWorld = !this.ofSmoothWorld;
+            Config.updateThreadPriorities();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.CLOUDS)
+        {
+            ++this.ofClouds;
+
+            if (this.ofClouds > 3)
+            {
+                this.ofClouds = 0;
+            }
+
+            this.updateRenderClouds();
+            this.field_74317_L.field_71438_f.resetClouds();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.TREES)
+        {
+            this.ofTrees = nextValue(this.ofTrees, OF_TREES_VALUES);
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.DROPPED_ITEMS)
+        {
+            ++this.ofDroppedItems;
+
+            if (this.ofDroppedItems > 2)
+            {
+                this.ofDroppedItems = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.RAIN)
+        {
+            ++this.ofRain;
+
+            if (this.ofRain > 3)
+            {
+                this.ofRain = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_WATER)
+        {
+            ++this.ofAnimatedWater;
+
+            if (this.ofAnimatedWater == 1)
+            {
+                ++this.ofAnimatedWater;
+            }
+
+            if (this.ofAnimatedWater > 2)
+            {
+                this.ofAnimatedWater = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_LAVA)
+        {
+            ++this.ofAnimatedLava;
+
+            if (this.ofAnimatedLava == 1)
+            {
+                ++this.ofAnimatedLava;
+            }
+
+            if (this.ofAnimatedLava > 2)
+            {
+                this.ofAnimatedLava = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_FIRE)
+        {
+            this.ofAnimatedFire = !this.ofAnimatedFire;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_PORTAL)
+        {
+            this.ofAnimatedPortal = !this.ofAnimatedPortal;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_REDSTONE)
+        {
+            this.ofAnimatedRedstone = !this.ofAnimatedRedstone;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_EXPLOSION)
+        {
+            this.ofAnimatedExplosion = !this.ofAnimatedExplosion;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_FLAME)
+        {
+            this.ofAnimatedFlame = !this.ofAnimatedFlame;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_SMOKE)
+        {
+            this.ofAnimatedSmoke = !this.ofAnimatedSmoke;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.VOID_PARTICLES)
+        {
+            this.ofVoidParticles = !this.ofVoidParticles;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.WATER_PARTICLES)
+        {
+            this.ofWaterParticles = !this.ofWaterParticles;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.PORTAL_PARTICLES)
+        {
+            this.ofPortalParticles = !this.ofPortalParticles;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.POTION_PARTICLES)
+        {
+            this.ofPotionParticles = !this.ofPotionParticles;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.FIREWORK_PARTICLES)
+        {
+            this.ofFireworkParticles = !this.ofFireworkParticles;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.DRIPPING_WATER_LAVA)
+        {
+            this.ofDrippingWaterLava = !this.ofDrippingWaterLava;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_TERRAIN)
+        {
+            this.ofAnimatedTerrain = !this.ofAnimatedTerrain;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ANIMATED_TEXTURES)
+        {
+            this.ofAnimatedTextures = !this.ofAnimatedTextures;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.RAIN_SPLASH)
+        {
+            this.ofRainSplash = !this.ofRainSplash;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.LAGOMETER)
+        {
+            this.ofLagometer = !this.ofLagometer;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.SHOW_FPS)
+        {
+            this.ofShowFps = !this.ofShowFps;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.AUTOSAVE_TICKS)
+        {
+            int i = 900;
+            this.ofAutoSaveTicks = Math.max(this.ofAutoSaveTicks / i * i, i);
+            this.ofAutoSaveTicks *= 2;
+
+            if (this.ofAutoSaveTicks > 32 * i)
+            {
+                this.ofAutoSaveTicks = i;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.BETTER_GRASS)
+        {
+            ++this.ofBetterGrass;
+
+            if (this.ofBetterGrass > 3)
+            {
+                this.ofBetterGrass = 1;
+            }
+
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.CONNECTED_TEXTURES)
+        {
+            ++this.ofConnectedTextures;
+
+            if (this.ofConnectedTextures > 3)
+            {
+                this.ofConnectedTextures = 1;
+            }
+
+            if (this.ofConnectedTextures == 2)
+            {
+                this.field_74317_L.field_71438_f.func_72712_a();
+            }
+            else
+            {
+                this.field_74317_L.func_110436_a();
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.WEATHER)
+        {
+            this.ofWeather = !this.ofWeather;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.SKY)
+        {
+            this.ofSky = !this.ofSky;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.STARS)
+        {
+            this.ofStars = !this.ofStars;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.SUN_MOON)
+        {
+            this.ofSunMoon = !this.ofSunMoon;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.VIGNETTE)
+        {
+            ++this.ofVignette;
+
+            if (this.ofVignette > 2)
+            {
+                this.ofVignette = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.CHUNK_UPDATES)
+        {
+            ++this.ofChunkUpdates;
+
+            if (this.ofChunkUpdates > 5)
+            {
+                this.ofChunkUpdates = 1;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.CHUNK_UPDATES_DYNAMIC)
+        {
+            this.ofChunkUpdatesDynamic = !this.ofChunkUpdatesDynamic;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.TIME)
+        {
+            ++this.ofTime;
+
+            if (this.ofTime > 2)
+            {
+                this.ofTime = 0;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.CLEAR_WATER)
+        {
+            this.ofClearWater = !this.ofClearWater;
+            this.updateWaterOpacity();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.PROFILER)
+        {
+            this.ofProfiler = !this.ofProfiler;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.BETTER_SNOW)
+        {
+            this.ofBetterSnow = !this.ofBetterSnow;
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.SWAMP_COLORS)
+        {
+            this.ofSwampColors = !this.ofSwampColors;
+            CustomColors.updateUseDefaultGrassFoliageColors();
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.RANDOM_ENTITIES)
+        {
+            this.ofRandomEntities = !this.ofRandomEntities;
+            RandomEntities.update();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.SMOOTH_BIOMES)
+        {
+            this.ofSmoothBiomes = !this.ofSmoothBiomes;
+            CustomColors.updateUseDefaultGrassFoliageColors();
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_FONTS)
+        {
+            this.ofCustomFonts = !this.ofCustomFonts;
+            this.field_74317_L.field_71466_p.func_110549_a(Config.getResourceManager());
+            this.field_74317_L.field_71464_q.func_110549_a(Config.getResourceManager());
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_COLORS)
+        {
+            this.ofCustomColors = !this.ofCustomColors;
+            CustomColors.update();
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_ITEMS)
+        {
+            this.ofCustomItems = !this.ofCustomItems;
+            this.field_74317_L.func_110436_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_SKY)
+        {
+            this.ofCustomSky = !this.ofCustomSky;
+            CustomSky.update();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.SHOW_CAPES)
+        {
+            this.ofShowCapes = !this.ofShowCapes;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.NATURAL_TEXTURES)
+        {
+            this.ofNaturalTextures = !this.ofNaturalTextures;
+            NaturalTextures.update();
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.EMISSIVE_TEXTURES)
+        {
+            this.ofEmissiveTextures = !this.ofEmissiveTextures;
+            this.field_74317_L.func_110436_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_MATH)
+        {
+            this.ofFastMath = !this.ofFastMath;
+            MathHelper.fastMath = this.ofFastMath;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.FAST_RENDER)
+        {
+            if (!this.ofFastRender && Config.isShaders())
+            {
+                Config.showGuiMessage(Lang.get("of.message.fr.shaders1"), Lang.get("of.message.fr.shaders2"));
+                return;
+            }
+
+            this.ofFastRender = !this.ofFastRender;
+
+            if (this.ofFastRender)
+            {
+                this.field_74317_L.field_71460_t.func_181022_b();
+            }
+
+            Config.updateFramebufferSize();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.TRANSLUCENT_BLOCKS)
+        {
+            if (this.ofTranslucentBlocks == 0)
+            {
+                this.ofTranslucentBlocks = 1;
+            }
+            else if (this.ofTranslucentBlocks == 1)
+            {
+                this.ofTranslucentBlocks = 2;
+            }
+            else if (this.ofTranslucentBlocks == 2)
+            {
+                this.ofTranslucentBlocks = 0;
+            }
+            else
+            {
+                this.ofTranslucentBlocks = 0;
+            }
+
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.LAZY_CHUNK_LOADING)
+        {
+            this.ofLazyChunkLoading = !this.ofLazyChunkLoading;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.SMART_ANIMATIONS)
+        {
+            this.ofSmartAnimations = !this.ofSmartAnimations;
+            this.field_74317_L.field_71438_f.func_72712_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.DYNAMIC_FOV)
+        {
+            this.ofDynamicFov = !this.ofDynamicFov;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ALTERNATE_BLOCKS)
+        {
+            this.ofAlternateBlocks = !this.ofAlternateBlocks;
+            this.field_74317_L.func_110436_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.DYNAMIC_LIGHTS)
+        {
+            this.ofDynamicLights = nextValue(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
+            DynamicLights.removeLights(this.field_74317_L.field_71438_f);
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.SCREENSHOT_SIZE)
+        {
+            ++this.ofScreenshotSize;
+
+            if (this.ofScreenshotSize > 4)
+            {
+                this.ofScreenshotSize = 1;
+            }
+
+            if (!OpenGlHelper.func_148822_b())
+            {
+                this.ofScreenshotSize = 1;
+            }
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_ENTITY_MODELS)
+        {
+            this.ofCustomEntityModels = !this.ofCustomEntityModels;
+            this.field_74317_L.func_110436_a();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.CUSTOM_GUIS)
+        {
+            this.ofCustomGuis = !this.ofCustomGuis;
+            CustomGuis.update();
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.SHOW_GL_ERRORS)
+        {
+            this.ofShowGlErrors = !this.ofShowGlErrors;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.HELD_ITEM_TOOLTIPS)
+        {
+            this.field_92117_D = !this.field_92117_D;
+        }
+
+        if (p_setOptionValueOF_1_ == GameSettings.Options.ADVANCED_TOOLTIPS)
+        {
+            this.field_82882_x = !this.field_82882_x;
+        }
+    }
+
+    private String getKeyBindingOF(GameSettings.Options p_getKeyBindingOF_1_)
+    {
+        String s = I18n.func_135052_a(p_getKeyBindingOF_1_.func_74378_d(), new Object[0]) + ": ";
+
+        if (s == null)
+        {
+            s = p_getKeyBindingOF_1_.func_74378_d();
+        }
+
+        if (p_getKeyBindingOF_1_ == GameSettings.Options.RENDER_DISTANCE)
+        {
+            int i1 = (int)this.func_74296_a(p_getKeyBindingOF_1_);
+            String s1 = I18n.func_135052_a("options.renderDistance.tiny", new Object[0]);
+            int i = 2;
+
+            if (i1 >= 4)
+            {
+                s1 = I18n.func_135052_a("options.renderDistance.short", new Object[0]);
+                i = 4;
+            }
+
+            if (i1 >= 8)
+            {
+                s1 = I18n.func_135052_a("options.renderDistance.normal", new Object[0]);
+                i = 8;
+            }
+
+            if (i1 >= 16)
+            {
+                s1 = I18n.func_135052_a("options.renderDistance.far", new Object[0]);
+                i = 16;
+            }
+
+            if (i1 >= 32)
+            {
+                s1 = Lang.get("of.options.renderDistance.extreme");
+                i = 32;
+            }
+
+            if (i1 >= 48)
+            {
+                s1 = Lang.get("of.options.renderDistance.insane");
+                i = 48;
+            }
+
+            if (i1 >= 64)
+            {
+                s1 = Lang.get("of.options.renderDistance.ludicrous");
+                i = 64;
+            }
+
+            int j = this.field_151451_c - i;
+            String s2 = s1;
+
+            if (j > 0)
+            {
+                s2 = s1 + "+";
+            }
+
+            return s + i1 + " " + s2 + "";
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.FOG_FANCY)
+        {
+            switch (this.ofFogType)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                case 3:
+                    return s + Lang.getOff();
+
+                default:
+                    return s + Lang.getOff();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.FOG_START)
+        {
+            return s + this.ofFogStart;
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.MIPMAP_TYPE)
+        {
+            switch (this.ofMipmapType)
+            {
+                case 0:
+                    return s + Lang.get("of.options.mipmap.nearest");
+
+                case 1:
+                    return s + Lang.get("of.options.mipmap.linear");
+
+                case 2:
+                    return s + Lang.get("of.options.mipmap.bilinear");
+
+                case 3:
+                    return s + Lang.get("of.options.mipmap.trilinear");
+
+                default:
+                    return s + "of.options.mipmap.nearest";
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_FPS)
+        {
+            return this.ofSmoothFps ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_WORLD)
+        {
+            return this.ofSmoothWorld ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.CLOUDS)
+        {
+            switch (this.ofClouds)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                case 3:
+                    return s + Lang.getOff();
+
+                default:
+                    return s + Lang.getDefault();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.TREES)
+        {
+            switch (this.ofTrees)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                case 3:
+                default:
+                    return s + Lang.getDefault();
+
+                case 4:
+                    return s + Lang.get("of.general.smart");
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.DROPPED_ITEMS)
+        {
+            switch (this.ofDroppedItems)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                default:
+                    return s + Lang.getDefault();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.RAIN)
+        {
+            switch (this.ofRain)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                case 3:
+                    return s + Lang.getOff();
+
+                default:
+                    return s + Lang.getDefault();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_WATER)
+        {
+            switch (this.ofAnimatedWater)
+            {
+                case 1:
+                    return s + Lang.get("of.options.animation.dynamic");
+
+                case 2:
+                    return s + Lang.getOff();
+
+                default:
+                    return s + Lang.getOn();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_LAVA)
+        {
+            switch (this.ofAnimatedLava)
+            {
+                case 1:
+                    return s + Lang.get("of.options.animation.dynamic");
+
+                case 2:
+                    return s + Lang.getOff();
+
+                default:
+                    return s + Lang.getOn();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_FIRE)
+        {
+            return this.ofAnimatedFire ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_PORTAL)
+        {
+            return this.ofAnimatedPortal ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_REDSTONE)
+        {
+            return this.ofAnimatedRedstone ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_EXPLOSION)
+        {
+            return this.ofAnimatedExplosion ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_FLAME)
+        {
+            return this.ofAnimatedFlame ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_SMOKE)
+        {
+            return this.ofAnimatedSmoke ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.VOID_PARTICLES)
+        {
+            return this.ofVoidParticles ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.WATER_PARTICLES)
+        {
+            return this.ofWaterParticles ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.PORTAL_PARTICLES)
+        {
+            return this.ofPortalParticles ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.POTION_PARTICLES)
+        {
+            return this.ofPotionParticles ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.FIREWORK_PARTICLES)
+        {
+            return this.ofFireworkParticles ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.DRIPPING_WATER_LAVA)
+        {
+            return this.ofDrippingWaterLava ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_TERRAIN)
+        {
+            return this.ofAnimatedTerrain ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ANIMATED_TEXTURES)
+        {
+            return this.ofAnimatedTextures ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.RAIN_SPLASH)
+        {
+            return this.ofRainSplash ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.LAGOMETER)
+        {
+            return this.ofLagometer ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.SHOW_FPS)
+        {
+            return this.ofShowFps ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.AUTOSAVE_TICKS)
+        {
+            int l = 900;
+            return this.ofAutoSaveTicks <= l ? s + Lang.get("of.options.save.45s") : (this.ofAutoSaveTicks <= 2 * l ? s + Lang.get("of.options.save.90s") : (this.ofAutoSaveTicks <= 4 * l ? s + Lang.get("of.options.save.3min") : (this.ofAutoSaveTicks <= 8 * l ? s + Lang.get("of.options.save.6min") : (this.ofAutoSaveTicks <= 16 * l ? s + Lang.get("of.options.save.12min") : s + Lang.get("of.options.save.24min")))));
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.BETTER_GRASS)
+        {
+            switch (this.ofBetterGrass)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                default:
+                    return s + Lang.getOff();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.CONNECTED_TEXTURES)
+        {
+            switch (this.ofConnectedTextures)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                default:
+                    return s + Lang.getOff();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.WEATHER)
+        {
+            return this.ofWeather ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.SKY)
+        {
+            return this.ofSky ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.STARS)
+        {
+            return this.ofStars ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.SUN_MOON)
+        {
+            return this.ofSunMoon ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.VIGNETTE)
+        {
+            switch (this.ofVignette)
+            {
+                case 1:
+                    return s + Lang.getFast();
+
+                case 2:
+                    return s + Lang.getFancy();
+
+                default:
+                    return s + Lang.getDefault();
+            }
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.CHUNK_UPDATES)
+        {
+            return s + this.ofChunkUpdates;
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.CHUNK_UPDATES_DYNAMIC)
+        {
+            return this.ofChunkUpdatesDynamic ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.TIME)
+        {
+            return this.ofTime == 1 ? s + Lang.get("of.options.time.dayOnly") : (this.ofTime == 2 ? s + Lang.get("of.options.time.nightOnly") : s + Lang.getDefault());
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.CLEAR_WATER)
+        {
+            return this.ofClearWater ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.AA_LEVEL)
+        {
+            String s3 = "";
+
+            if (this.ofAaLevel != Config.getAntialiasingLevel())
+            {
+                s3 = " (" + Lang.get("of.general.restart") + ")";
+            }
+
+            return this.ofAaLevel == 0 ? s + Lang.getOff() + s3 : s + this.ofAaLevel + s3;
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.AF_LEVEL)
+        {
+            return this.ofAfLevel == 1 ? s + Lang.getOff() : s + this.ofAfLevel;
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.PROFILER)
+        {
+            return this.ofProfiler ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.BETTER_SNOW)
+        {
+            return this.ofBetterSnow ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.SWAMP_COLORS)
+        {
+            return this.ofSwampColors ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.RANDOM_ENTITIES)
+        {
+            return this.ofRandomEntities ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMOOTH_BIOMES)
+        {
+            return this.ofSmoothBiomes ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_FONTS)
+        {
+            return this.ofCustomFonts ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_COLORS)
+        {
+            return this.ofCustomColors ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_SKY)
+        {
+            return this.ofCustomSky ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.SHOW_CAPES)
+        {
+            return this.ofShowCapes ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_ITEMS)
+        {
+            return this.ofCustomItems ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.NATURAL_TEXTURES)
+        {
+            return this.ofNaturalTextures ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.EMISSIVE_TEXTURES)
+        {
+            return this.ofEmissiveTextures ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.FAST_MATH)
+        {
+            return this.ofFastMath ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.FAST_RENDER)
+        {
+            return this.ofFastRender ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.TRANSLUCENT_BLOCKS)
+        {
+            return this.ofTranslucentBlocks == 1 ? s + Lang.getFast() : (this.ofTranslucentBlocks == 2 ? s + Lang.getFancy() : s + Lang.getDefault());
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.LAZY_CHUNK_LOADING)
+        {
+            return this.ofLazyChunkLoading ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.SMART_ANIMATIONS)
+        {
+            return this.ofSmartAnimations ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.DYNAMIC_FOV)
+        {
+            return this.ofDynamicFov ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ALTERNATE_BLOCKS)
+        {
+            return this.ofAlternateBlocks ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.DYNAMIC_LIGHTS)
+        {
+            int k = indexOf(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
+            return s + func_74299_a(KEYS_DYNAMIC_LIGHTS, k);
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.SCREENSHOT_SIZE)
+        {
+            return this.ofScreenshotSize <= 1 ? s + Lang.getDefault() : s + this.ofScreenshotSize + "x";
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_ENTITY_MODELS)
+        {
+            return this.ofCustomEntityModels ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.CUSTOM_GUIS)
+        {
+            return this.ofCustomGuis ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.SHOW_GL_ERRORS)
+        {
+            return this.ofShowGlErrors ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.FULLSCREEN_MODE)
+        {
+            return this.ofFullscreenMode.equals("Default") ? s + Lang.getDefault() : s + this.ofFullscreenMode;
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.HELD_ITEM_TOOLTIPS)
+        {
+            return this.field_92117_D ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.ADVANCED_TOOLTIPS)
+        {
+            return this.field_82882_x ? s + Lang.getOn() : s + Lang.getOff();
+        }
+        else if (p_getKeyBindingOF_1_ == GameSettings.Options.FRAMERATE_LIMIT)
+        {
+            float f = this.func_74296_a(p_getKeyBindingOF_1_);
+            return f == 0.0F ? s + Lang.get("of.options.framerateLimit.vsync") : (f == p_getKeyBindingOF_1_.field_148272_O ? s + I18n.func_135052_a("options.framerateLimit.max", new Object[0]) : s + (int)f + " fps");
+        }
+        else
+        {
+            return null;
+        }
+    }
+
+    public void loadOfOptions()
+    {
         try
         {
-            if (!this.field_74354_ai.exists())
+            File file1 = this.optionsFileOF;
+
+            if (!file1.exists())
             {
+                file1 = this.field_74354_ai;
+            }
+
+            if (!file1.exists())
+            {
                 return;
             }
 
-            BufferedReader bufferedreader = new BufferedReader(new FileReader(this.field_74354_ai));
+            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(new FileInputStream(file1), "UTF-8"));
             String s = "";
-            this.field_151446_aD.clear();
 
             while ((s = bufferedreader.readLine()) != null)
             {
@@ -621,549 +2599,708 @@
                 {
                     String[] astring = s.split(":");
 
-                    if (astring[0].equals("mouseSensitivity"))
+                    if (astring[0].equals("ofRenderDistanceChunks") && astring.length >= 2)
                     {
-                        this.field_74341_c = this.func_74305_a(astring[1]);
+                        this.field_151451_c = Integer.valueOf(astring[1]).intValue();
+                        this.field_151451_c = Config.limit(this.field_151451_c, 2, 1024);
                     }
 
-                    if (astring[0].equals("fov"))
+                    if (astring[0].equals("ofFogType") && astring.length >= 2)
                     {
-                        this.field_74334_X = this.func_74305_a(astring[1]) * 40.0F + 70.0F;
+                        this.ofFogType = Integer.valueOf(astring[1]).intValue();
+                        this.ofFogType = Config.limit(this.ofFogType, 1, 3);
                     }
 
-                    if (astring[0].equals("gamma"))
+                    if (astring[0].equals("ofFogStart") && astring.length >= 2)
                     {
-                        this.field_74333_Y = this.func_74305_a(astring[1]);
+                        this.ofFogStart = Float.valueOf(astring[1]).floatValue();
+
+                        if (this.ofFogStart < 0.2F)
+                        {
+                            this.ofFogStart = 0.2F;
+                        }
+
+                        if (this.ofFogStart > 0.81F)
+                        {
+                            this.ofFogStart = 0.8F;
+                        }
                     }
 
-                    if (astring[0].equals("saturation"))
+                    if (astring[0].equals("ofMipmapType") && astring.length >= 2)
                     {
-                        this.field_151452_as = this.func_74305_a(astring[1]);
+                        this.ofMipmapType = Integer.valueOf(astring[1]).intValue();
+                        this.ofMipmapType = Config.limit(this.ofMipmapType, 0, 3);
                     }
 
-                    if (astring[0].equals("invertYMouse"))
+                    if (astring[0].equals("ofOcclusionFancy") && astring.length >= 2)
                     {
-                        this.field_74338_d = astring[1].equals("true");
+                        this.ofOcclusionFancy = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("renderDistance"))
+                    if (astring[0].equals("ofSmoothFps") && astring.length >= 2)
                     {
-                        this.field_151451_c = Integer.parseInt(astring[1]);
+                        this.ofSmoothFps = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("guiScale"))
+                    if (astring[0].equals("ofSmoothWorld") && astring.length >= 2)
                     {
-                        this.field_74335_Z = Integer.parseInt(astring[1]);
+                        this.ofSmoothWorld = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("particles"))
+                    if (astring[0].equals("ofAoLevel") && astring.length >= 2)
                     {
-                        this.field_74362_aa = Integer.parseInt(astring[1]);
+                        this.ofAoLevel = Float.valueOf(astring[1]).floatValue();
+                        this.ofAoLevel = Config.limit(this.ofAoLevel, 0.0F, 1.0F);
                     }
 
-                    if (astring[0].equals("bobView"))
+                    if (astring[0].equals("ofClouds") && astring.length >= 2)
                     {
-                        this.field_74336_f = astring[1].equals("true");
+                        this.ofClouds = Integer.valueOf(astring[1]).intValue();
+                        this.ofClouds = Config.limit(this.ofClouds, 0, 3);
+                        this.updateRenderClouds();
                     }
 
-                    if (astring[0].equals("anaglyph3d"))
+                    if (astring[0].equals("ofCloudsHeight") && astring.length >= 2)
                     {
-                        this.field_74337_g = astring[1].equals("true");
+                        this.ofCloudsHeight = Float.valueOf(astring[1]).floatValue();
+                        this.ofCloudsHeight = Config.limit(this.ofCloudsHeight, 0.0F, 1.0F);
                     }
 
-                    if (astring[0].equals("maxFps"))
+                    if (astring[0].equals("ofTrees") && astring.length >= 2)
                     {
-                        this.field_74350_i = Integer.parseInt(astring[1]);
+                        this.ofTrees = Integer.valueOf(astring[1]).intValue();
+                        this.ofTrees = limit(this.ofTrees, OF_TREES_VALUES);
                     }
 
-                    if (astring[0].equals("fboEnable"))
+                    if (astring[0].equals("ofDroppedItems") && astring.length >= 2)
                     {
-                        this.field_151448_g = astring[1].equals("true");
+                        this.ofDroppedItems = Integer.valueOf(astring[1]).intValue();
+                        this.ofDroppedItems = Config.limit(this.ofDroppedItems, 0, 2);
                     }
 
-                    if (astring[0].equals("difficulty"))
+                    if (astring[0].equals("ofRain") && astring.length >= 2)
                     {
-                        this.field_74318_M = EnumDifficulty.func_151523_a(Integer.parseInt(astring[1]));
+                        this.ofRain = Integer.valueOf(astring[1]).intValue();
+                        this.ofRain = Config.limit(this.ofRain, 0, 3);
                     }
 
-                    if (astring[0].equals("fancyGraphics"))
+                    if (astring[0].equals("ofAnimatedWater") && astring.length >= 2)
                     {
-                        this.field_74347_j = astring[1].equals("true");
+                        this.ofAnimatedWater = Integer.valueOf(astring[1]).intValue();
+                        this.ofAnimatedWater = Config.limit(this.ofAnimatedWater, 0, 2);
                     }
 
-                    if (astring[0].equals("ao"))
+                    if (astring[0].equals("ofAnimatedLava") && astring.length >= 2)
                     {
-                        if (astring[1].equals("true"))
-                        {
-                            this.field_74348_k = 2;
-                        }
-                        else if (astring[1].equals("false"))
-                        {
-                            this.field_74348_k = 0;
-                        }
-                        else
-                        {
-                            this.field_74348_k = Integer.parseInt(astring[1]);
-                        }
+                        this.ofAnimatedLava = Integer.valueOf(astring[1]).intValue();
+                        this.ofAnimatedLava = Config.limit(this.ofAnimatedLava, 0, 2);
                     }
 
-                    if (astring[0].equals("renderClouds"))
+                    if (astring[0].equals("ofAnimatedFire") && astring.length >= 2)
                     {
-                        if (astring[1].equals("true"))
-                        {
-                            this.field_74345_l = 2;
-                        }
-                        else if (astring[1].equals("false"))
-                        {
-                            this.field_74345_l = 0;
-                        }
-                        else if (astring[1].equals("fast"))
-                        {
-                            this.field_74345_l = 1;
-                        }
+                        this.ofAnimatedFire = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("resourcePacks"))
+                    if (astring[0].equals("ofAnimatedPortal") && astring.length >= 2)
                     {
-                        this.field_151453_l = (List)field_151450_ay.fromJson((String)s.substring(s.indexOf(58) + 1), field_151449_az);
+                        this.ofAnimatedPortal = Boolean.valueOf(astring[1]).booleanValue();
+                    }
 
-                        if (this.field_151453_l == null)
-                        {
-                            this.field_151453_l = Lists.<String>newArrayList();
-                        }
+                    if (astring[0].equals("ofAnimatedRedstone") && astring.length >= 2)
+                    {
+                        this.ofAnimatedRedstone = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("incompatibleResourcePacks"))
+                    if (astring[0].equals("ofAnimatedExplosion") && astring.length >= 2)
                     {
-                        this.field_183018_l = (List)field_151450_ay.fromJson((String)s.substring(s.indexOf(58) + 1), field_151449_az);
+                        this.ofAnimatedExplosion = Boolean.valueOf(astring[1]).booleanValue();
+                    }
 
-                        if (this.field_183018_l == null)
-                        {
-                            this.field_183018_l = Lists.<String>newArrayList();
-                        }
+                    if (astring[0].equals("ofAnimatedFlame") && astring.length >= 2)
+                    {
+                        this.ofAnimatedFlame = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("lastServer") && astring.length >= 2)
+                    if (astring[0].equals("ofAnimatedSmoke") && astring.length >= 2)
                     {
-                        this.field_74332_R = s.substring(s.indexOf(58) + 1);
+                        this.ofAnimatedSmoke = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("lang") && astring.length >= 2)
+                    if (astring[0].equals("ofVoidParticles") && astring.length >= 2)
                     {
-                        this.field_74363_ab = astring[1];
+                        this.ofVoidParticles = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("chatVisibility"))
+                    if (astring[0].equals("ofWaterParticles") && astring.length >= 2)
                     {
-                        this.field_74343_n = EntityPlayer.EnumChatVisibility.func_151426_a(Integer.parseInt(astring[1]));
+                        this.ofWaterParticles = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("chatColors"))
+                    if (astring[0].equals("ofPortalParticles") && astring.length >= 2)
                     {
-                        this.field_74344_o = astring[1].equals("true");
+                        this.ofPortalParticles = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("chatLinks"))
+                    if (astring[0].equals("ofPotionParticles") && astring.length >= 2)
                     {
-                        this.field_74359_p = astring[1].equals("true");
+                        this.ofPotionParticles = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("chatLinksPrompt"))
+                    if (astring[0].equals("ofFireworkParticles") && astring.length >= 2)
                     {
-                        this.field_74358_q = astring[1].equals("true");
+                        this.ofFireworkParticles = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("chatOpacity"))
+                    if (astring[0].equals("ofDrippingWaterLava") && astring.length >= 2)
                     {
-                        this.field_74357_r = this.func_74305_a(astring[1]);
+                        this.ofDrippingWaterLava = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("snooperEnabled"))
+                    if (astring[0].equals("ofAnimatedTerrain") && astring.length >= 2)
                     {
-                        this.field_74355_t = astring[1].equals("true");
+                        this.ofAnimatedTerrain = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("fullscreen"))
+                    if (astring[0].equals("ofAnimatedTextures") && astring.length >= 2)
                     {
-                        this.field_74353_u = astring[1].equals("true");
+                        this.ofAnimatedTextures = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("enableVsync"))
+                    if (astring[0].equals("ofRainSplash") && astring.length >= 2)
                     {
-                        this.field_74352_v = astring[1].equals("true");
+                        this.ofRainSplash = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("useVbo"))
+                    if (astring[0].equals("ofLagometer") && astring.length >= 2)
                     {
-                        this.field_178881_t = astring[1].equals("true");
+                        this.ofLagometer = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("hideServerAddress"))
+                    if (astring[0].equals("ofShowFps") && astring.length >= 2)
                     {
-                        this.field_80005_w = astring[1].equals("true");
+                        this.ofShowFps = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("advancedItemTooltips"))
+                    if (astring[0].equals("ofAutoSaveTicks") && astring.length >= 2)
                     {
-                        this.field_82882_x = astring[1].equals("true");
+                        this.ofAutoSaveTicks = Integer.valueOf(astring[1]).intValue();
+                        this.ofAutoSaveTicks = Config.limit(this.ofAutoSaveTicks, 40, 40000);
                     }
 
-                    if (astring[0].equals("pauseOnLostFocus"))
+                    if (astring[0].equals("ofBetterGrass") && astring.length >= 2)
                     {
-                        this.field_82881_y = astring[1].equals("true");
+                        this.ofBetterGrass = Integer.valueOf(astring[1]).intValue();
+                        this.ofBetterGrass = Config.limit(this.ofBetterGrass, 1, 3);
                     }
 
-                    if (astring[0].equals("touchscreen"))
+                    if (astring[0].equals("ofConnectedTextures") && astring.length >= 2)
                     {
-                        this.field_85185_A = astring[1].equals("true");
+                        this.ofConnectedTextures = Integer.valueOf(astring[1]).intValue();
+                        this.ofConnectedTextures = Config.limit(this.ofConnectedTextures, 1, 3);
                     }
 
-                    if (astring[0].equals("overrideHeight"))
+                    if (astring[0].equals("ofWeather") && astring.length >= 2)
                     {
-                        this.field_92119_C = Integer.parseInt(astring[1]);
+                        this.ofWeather = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("overrideWidth"))
+                    if (astring[0].equals("ofSky") && astring.length >= 2)
                     {
-                        this.field_92118_B = Integer.parseInt(astring[1]);
+                        this.ofSky = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("heldItemTooltips"))
+                    if (astring[0].equals("ofStars") && astring.length >= 2)
                     {
-                        this.field_92117_D = astring[1].equals("true");
+                        this.ofStars = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("chatHeightFocused"))
+                    if (astring[0].equals("ofSunMoon") && astring.length >= 2)
                     {
-                        this.field_96694_H = this.func_74305_a(astring[1]);
+                        this.ofSunMoon = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("chatHeightUnfocused"))
+                    if (astring[0].equals("ofVignette") && astring.length >= 2)
                     {
-                        this.field_96693_G = this.func_74305_a(astring[1]);
+                        this.ofVignette = Integer.valueOf(astring[1]).intValue();
+                        this.ofVignette = Config.limit(this.ofVignette, 0, 2);
                     }
 
-                    if (astring[0].equals("chatScale"))
+                    if (astring[0].equals("ofChunkUpdates") && astring.length >= 2)
                     {
-                        this.field_96691_E = this.func_74305_a(astring[1]);
+                        this.ofChunkUpdates = Integer.valueOf(astring[1]).intValue();
+                        this.ofChunkUpdates = Config.limit(this.ofChunkUpdates, 1, 5);
                     }
 
-                    if (astring[0].equals("chatWidth"))
+                    if (astring[0].equals("ofChunkUpdatesDynamic") && astring.length >= 2)
                     {
-                        this.field_96692_F = this.func_74305_a(astring[1]);
+                        this.ofChunkUpdatesDynamic = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("showInventoryAchievementHint"))
+                    if (astring[0].equals("ofTime") && astring.length >= 2)
                     {
-                        this.field_151441_H = astring[1].equals("true");
+                        this.ofTime = Integer.valueOf(astring[1]).intValue();
+                        this.ofTime = Config.limit(this.ofTime, 0, 2);
                     }
 
-                    if (astring[0].equals("mipmapLevels"))
+                    if (astring[0].equals("ofClearWater") && astring.length >= 2)
                     {
-                        this.field_151442_I = Integer.parseInt(astring[1]);
+                        this.ofClearWater = Boolean.valueOf(astring[1]).booleanValue();
+                        this.updateWaterOpacity();
                     }
 
-                    if (astring[0].equals("streamBytesPerPixel"))
+                    if (astring[0].equals("ofAaLevel") && astring.length >= 2)
                     {
-                        this.field_152400_J = this.func_74305_a(astring[1]);
+                        this.ofAaLevel = Integer.valueOf(astring[1]).intValue();
+                        this.ofAaLevel = Config.limit(this.ofAaLevel, 0, 16);
                     }
 
-                    if (astring[0].equals("streamMicVolume"))
+                    if (astring[0].equals("ofAfLevel") && astring.length >= 2)
                     {
-                        this.field_152401_K = this.func_74305_a(astring[1]);
+                        this.ofAfLevel = Integer.valueOf(astring[1]).intValue();
+                        this.ofAfLevel = Config.limit(this.ofAfLevel, 1, 16);
                     }
 
-                    if (astring[0].equals("streamSystemVolume"))
+                    if (astring[0].equals("ofProfiler") && astring.length >= 2)
                     {
-                        this.field_152402_L = this.func_74305_a(astring[1]);
+                        this.ofProfiler = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("streamKbps"))
+                    if (astring[0].equals("ofBetterSnow") && astring.length >= 2)
                     {
-                        this.field_152403_M = this.func_74305_a(astring[1]);
+                        this.ofBetterSnow = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("streamFps"))
+                    if (astring[0].equals("ofSwampColors") && astring.length >= 2)
                     {
-                        this.field_152404_N = this.func_74305_a(astring[1]);
+                        this.ofSwampColors = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("streamCompression"))
+                    if (astring[0].equals("ofRandomEntities") && astring.length >= 2)
                     {
-                        this.field_152405_O = Integer.parseInt(astring[1]);
+                        this.ofRandomEntities = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("streamSendMetadata"))
+                    if (astring[0].equals("ofSmoothBiomes") && astring.length >= 2)
                     {
-                        this.field_152406_P = astring[1].equals("true");
+                        this.ofSmoothBiomes = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("streamPreferredServer") && astring.length >= 2)
+                    if (astring[0].equals("ofCustomFonts") && astring.length >= 2)
                     {
-                        this.field_152407_Q = s.substring(s.indexOf(58) + 1);
+                        this.ofCustomFonts = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("streamChatEnabled"))
+                    if (astring[0].equals("ofCustomColors") && astring.length >= 2)
                     {
-                        this.field_152408_R = Integer.parseInt(astring[1]);
+                        this.ofCustomColors = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("streamChatUserFilter"))
+                    if (astring[0].equals("ofCustomItems") && astring.length >= 2)
                     {
-                        this.field_152409_S = Integer.parseInt(astring[1]);
+                        this.ofCustomItems = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("streamMicToggleBehavior"))
+                    if (astring[0].equals("ofCustomSky") && astring.length >= 2)
                     {
-                        this.field_152410_T = Integer.parseInt(astring[1]);
+                        this.ofCustomSky = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("forceUnicodeFont"))
+                    if (astring[0].equals("ofShowCapes") && astring.length >= 2)
                     {
-                        this.field_151455_aw = astring[1].equals("true");
+                        this.ofShowCapes = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("allowBlockAlternatives"))
+                    if (astring[0].equals("ofNaturalTextures") && astring.length >= 2)
                     {
-                        this.field_178880_u = astring[1].equals("true");
+                        this.ofNaturalTextures = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("reducedDebugInfo"))
+                    if (astring[0].equals("ofEmissiveTextures") && astring.length >= 2)
                     {
-                        this.field_178879_v = astring[1].equals("true");
+                        this.ofEmissiveTextures = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("useNativeTransport"))
+                    if (astring[0].equals("ofLazyChunkLoading") && astring.length >= 2)
                     {
-                        this.field_181150_U = astring[1].equals("true");
+                        this.ofLazyChunkLoading = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("entityShadows"))
+                    if (astring[0].equals("ofSmartAnimations") && astring.length >= 2)
                     {
-                        this.field_181151_V = astring[1].equals("true");
+                        this.ofSmartAnimations = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    if (astring[0].equals("realmsNotifications"))
+                    if (astring[0].equals("ofDynamicFov") && astring.length >= 2)
                     {
-                        this.field_183509_X = astring[1].equals("true");
+                        this.ofDynamicFov = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    for (KeyBinding keybinding : this.field_74324_K)
+                    if (astring[0].equals("ofAlternateBlocks") && astring.length >= 2)
                     {
-                        if (astring[0].equals("key_" + keybinding.func_151464_g()))
-                        {
-                            keybinding.func_151462_b(Integer.parseInt(astring[1]));
-                        }
+                        this.ofAlternateBlocks = Boolean.valueOf(astring[1]).booleanValue();
                     }
 
-                    for (SoundCategory soundcategory : SoundCategory.values())
+                    if (astring[0].equals("ofDynamicLights") && astring.length >= 2)
                     {
-                        if (astring[0].equals("soundCategory_" + soundcategory.func_147155_a()))
-                        {
-                            this.field_151446_aD.put(soundcategory, Float.valueOf(this.func_74305_a(astring[1])));
-                        }
+                        this.ofDynamicLights = Integer.valueOf(astring[1]).intValue();
+                        this.ofDynamicLights = limit(this.ofDynamicLights, OF_DYNAMIC_LIGHTS);
                     }
 
-                    for (EnumPlayerModelParts enumplayermodelparts : EnumPlayerModelParts.values())
+                    if (astring[0].equals("ofScreenshotSize") && astring.length >= 2)
                     {
-                        if (astring[0].equals("modelPart_" + enumplayermodelparts.func_179329_c()))
-                        {
-                            this.func_178878_a(enumplayermodelparts, astring[1].equals("true"));
-                        }
+                        this.ofScreenshotSize = Integer.valueOf(astring[1]).intValue();
+                        this.ofScreenshotSize = Config.limit(this.ofScreenshotSize, 1, 4);
                     }
+
+                    if (astring[0].equals("ofCustomEntityModels") && astring.length >= 2)
+                    {
+                        this.ofCustomEntityModels = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofCustomGuis") && astring.length >= 2)
+                    {
+                        this.ofCustomGuis = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofShowGlErrors") && astring.length >= 2)
+                    {
+                        this.ofShowGlErrors = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofFullscreenMode") && astring.length >= 2)
+                    {
+                        this.ofFullscreenMode = astring[1];
+                    }
+
+                    if (astring[0].equals("ofFastMath") && astring.length >= 2)
+                    {
+                        this.ofFastMath = Boolean.valueOf(astring[1]).booleanValue();
+                        MathHelper.fastMath = this.ofFastMath;
+                    }
+
+                    if (astring[0].equals("ofFastRender") && astring.length >= 2)
+                    {
+                        this.ofFastRender = Boolean.valueOf(astring[1]).booleanValue();
+                    }
+
+                    if (astring[0].equals("ofTranslucentBlocks") && astring.length >= 2)
+                    {
+                        this.ofTranslucentBlocks = Integer.valueOf(astring[1]).intValue();
+                        this.ofTranslucentBlocks = Config.limit(this.ofTranslucentBlocks, 0, 2);
+                    }
+
+                    if (astring[0].equals("key_" + this.ofKeyBindZoom.func_151464_g()))
+                    {
+                        this.ofKeyBindZoom.func_151462_b(Integer.parseInt(astring[1]));
+                    }
                 }
-                catch (Exception var8)
+                catch (Exception exception)
                 {
-                    field_151454_ax.warn("Skipping bad option: " + s);
+                    Config.dbg("Skipping bad option: " + s);
+                    exception.printStackTrace();
                 }
             }
 
+            KeyUtils.fixKeyConflicts(this.field_74324_K, new KeyBinding[] {this.ofKeyBindZoom});
             KeyBinding.func_74508_b();
             bufferedreader.close();
         }
-        catch (Exception exception)
+        catch (Exception exception1)
         {
-            field_151454_ax.error((String)"Failed to load options", (Throwable)exception);
+            Config.warn("Failed to load options");
+            exception1.printStackTrace();
         }
     }
 
-    private float func_74305_a(String p_74305_1_)
+    public void saveOfOptions()
     {
-        return p_74305_1_.equals("true") ? 1.0F : (p_74305_1_.equals("false") ? 0.0F : Float.parseFloat(p_74305_1_));
-    }
-
-    public void func_74303_b()
-    {
         try
         {
-            PrintWriter printwriter = new PrintWriter(new FileWriter(this.field_74354_ai));
-            printwriter.println("invertYMouse:" + this.field_74338_d);
-            printwriter.println("mouseSensitivity:" + this.field_74341_c);
-            printwriter.println("fov:" + (this.field_74334_X - 70.0F) / 40.0F);
-            printwriter.println("gamma:" + this.field_74333_Y);
-            printwriter.println("saturation:" + this.field_151452_as);
-            printwriter.println("renderDistance:" + this.field_151451_c);
-            printwriter.println("guiScale:" + this.field_74335_Z);
-            printwriter.println("particles:" + this.field_74362_aa);
-            printwriter.println("bobView:" + this.field_74336_f);
-            printwriter.println("anaglyph3d:" + this.field_74337_g);
-            printwriter.println("maxFps:" + this.field_74350_i);
-            printwriter.println("fboEnable:" + this.field_151448_g);
-            printwriter.println("difficulty:" + this.field_74318_M.func_151525_a());
-            printwriter.println("fancyGraphics:" + this.field_74347_j);
-            printwriter.println("ao:" + this.field_74348_k);
-
-            switch (this.field_74345_l)
-            {
-                case 0:
-                    printwriter.println("renderClouds:false");
-                    break;
-                case 1:
-                    printwriter.println("renderClouds:fast");
-                    break;
-                case 2:
-                    printwriter.println("renderClouds:true");
-            }
-
-            printwriter.println("resourcePacks:" + field_151450_ay.toJson((Object)this.field_151453_l));
-            printwriter.println("incompatibleResourcePacks:" + field_151450_ay.toJson((Object)this.field_183018_l));
-            printwriter.println("lastServer:" + this.field_74332_R);
-            printwriter.println("lang:" + this.field_74363_ab);
-            printwriter.println("chatVisibility:" + this.field_74343_n.func_151428_a());
-            printwriter.println("chatColors:" + this.field_74344_o);
-            printwriter.println("chatLinks:" + this.field_74359_p);
-            printwriter.println("chatLinksPrompt:" + this.field_74358_q);
-            printwriter.println("chatOpacity:" + this.field_74357_r);
-            printwriter.println("snooperEnabled:" + this.field_74355_t);
-            printwriter.println("fullscreen:" + this.field_74353_u);
-            printwriter.println("enableVsync:" + this.field_74352_v);
-            printwriter.println("useVbo:" + this.field_178881_t);
-            printwriter.println("hideServerAddress:" + this.field_80005_w);
-            printwriter.println("advancedItemTooltips:" + this.field_82882_x);
-            printwriter.println("pauseOnLostFocus:" + this.field_82881_y);
-            printwriter.println("touchscreen:" + this.field_85185_A);
-            printwriter.println("overrideWidth:" + this.field_92118_B);
-            printwriter.println("overrideHeight:" + this.field_92119_C);
-            printwriter.println("heldItemTooltips:" + this.field_92117_D);
-            printwriter.println("chatHeightFocused:" + this.field_96694_H);
-            printwriter.println("chatHeightUnfocused:" + this.field_96693_G);
-            printwriter.println("chatScale:" + this.field_96691_E);
-            printwriter.println("chatWidth:" + this.field_96692_F);
-            printwriter.println("showInventoryAchievementHint:" + this.field_151441_H);
-            printwriter.println("mipmapLevels:" + this.field_151442_I);
-            printwriter.println("streamBytesPerPixel:" + this.field_152400_J);
-            printwriter.println("streamMicVolume:" + this.field_152401_K);
-            printwriter.println("streamSystemVolume:" + this.field_152402_L);
-            printwriter.println("streamKbps:" + this.field_152403_M);
-            printwriter.println("streamFps:" + this.field_152404_N);
-            printwriter.println("streamCompression:" + this.field_152405_O);
-            printwriter.println("streamSendMetadata:" + this.field_152406_P);
-            printwriter.println("streamPreferredServer:" + this.field_152407_Q);
-            printwriter.println("streamChatEnabled:" + this.field_152408_R);
-            printwriter.println("streamChatUserFilter:" + this.field_152409_S);
-            printwriter.println("streamMicToggleBehavior:" + this.field_152410_T);
-            printwriter.println("forceUnicodeFont:" + this.field_151455_aw);
-            printwriter.println("allowBlockAlternatives:" + this.field_178880_u);
-            printwriter.println("reducedDebugInfo:" + this.field_178879_v);
-            printwriter.println("useNativeTransport:" + this.field_181150_U);
-            printwriter.println("entityShadows:" + this.field_181151_V);
-            printwriter.println("realmsNotifications:" + this.field_183509_X);
-
-            for (KeyBinding keybinding : this.field_74324_K)
-            {
-                printwriter.println("key_" + keybinding.func_151464_g() + ":" + keybinding.func_151463_i());
-            }
-
-            for (SoundCategory soundcategory : SoundCategory.values())
-            {
-                printwriter.println("soundCategory_" + soundcategory.func_147155_a() + ":" + this.func_151438_a(soundcategory));
-            }
-
-            for (EnumPlayerModelParts enumplayermodelparts : EnumPlayerModelParts.values())
-            {
-                printwriter.println("modelPart_" + enumplayermodelparts.func_179329_c() + ":" + this.field_178882_aU.contains(enumplayermodelparts));
-            }
-
+            PrintWriter printwriter = new PrintWriter(new OutputStreamWriter(new FileOutputStream(this.optionsFileOF), "UTF-8"));
+            printwriter.println("ofFogType:" + this.ofFogType);
+            printwriter.println("ofFogStart:" + this.ofFogStart);
+            printwriter.println("ofMipmapType:" + this.ofMipmapType);
+            printwriter.println("ofOcclusionFancy:" + this.ofOcclusionFancy);
+            printwriter.println("ofSmoothFps:" + this.ofSmoothFps);
+            printwriter.println("ofSmoothWorld:" + this.ofSmoothWorld);
+            printwriter.println("ofAoLevel:" + this.ofAoLevel);
+            printwriter.println("ofClouds:" + this.ofClouds);
+            printwriter.println("ofCloudsHeight:" + this.ofCloudsHeight);
+            printwriter.println("ofTrees:" + this.ofTrees);
+            printwriter.println("ofDroppedItems:" + this.ofDroppedItems);
+            printwriter.println("ofRain:" + this.ofRain);
+            printwriter.println("ofAnimatedWater:" + this.ofAnimatedWater);
+            printwriter.println("ofAnimatedLava:" + this.ofAnimatedLava);
+            printwriter.println("ofAnimatedFire:" + this.ofAnimatedFire);
+            printwriter.println("ofAnimatedPortal:" + this.ofAnimatedPortal);
+            printwriter.println("ofAnimatedRedstone:" + this.ofAnimatedRedstone);
+            printwriter.println("ofAnimatedExplosion:" + this.ofAnimatedExplosion);
+            printwriter.println("ofAnimatedFlame:" + this.ofAnimatedFlame);
+            printwriter.println("ofAnimatedSmoke:" + this.ofAnimatedSmoke);
+            printwriter.println("ofVoidParticles:" + this.ofVoidParticles);
+            printwriter.println("ofWaterParticles:" + this.ofWaterParticles);
+            printwriter.println("ofPortalParticles:" + this.ofPortalParticles);
+            printwriter.println("ofPotionParticles:" + this.ofPotionParticles);
+            printwriter.println("ofFireworkParticles:" + this.ofFireworkParticles);
+            printwriter.println("ofDrippingWaterLava:" + this.ofDrippingWaterLava);
+            printwriter.println("ofAnimatedTerrain:" + this.ofAnimatedTerrain);
+            printwriter.println("ofAnimatedTextures:" + this.ofAnimatedTextures);
+            printwriter.println("ofRainSplash:" + this.ofRainSplash);
+            printwriter.println("ofLagometer:" + this.ofLagometer);
+            printwriter.println("ofShowFps:" + this.ofShowFps);
+            printwriter.println("ofAutoSaveTicks:" + this.ofAutoSaveTicks);
+            printwriter.println("ofBetterGrass:" + this.ofBetterGrass);
+            printwriter.println("ofConnectedTextures:" + this.ofConnectedTextures);
+            printwriter.println("ofWeather:" + this.ofWeather);
+            printwriter.println("ofSky:" + this.ofSky);
+            printwriter.println("ofStars:" + this.ofStars);
+            printwriter.println("ofSunMoon:" + this.ofSunMoon);
+            printwriter.println("ofVignette:" + this.ofVignette);
+            printwriter.println("ofChunkUpdates:" + this.ofChunkUpdates);
+            printwriter.println("ofChunkUpdatesDynamic:" + this.ofChunkUpdatesDynamic);
+            printwriter.println("ofTime:" + this.ofTime);
+            printwriter.println("ofClearWater:" + this.ofClearWater);
+            printwriter.println("ofAaLevel:" + this.ofAaLevel);
+            printwriter.println("ofAfLevel:" + this.ofAfLevel);
+            printwriter.println("ofProfiler:" + this.ofProfiler);
+            printwriter.println("ofBetterSnow:" + this.ofBetterSnow);
+            printwriter.println("ofSwampColors:" + this.ofSwampColors);
+            printwriter.println("ofRandomEntities:" + this.ofRandomEntities);
+            printwriter.println("ofSmoothBiomes:" + this.ofSmoothBiomes);
+            printwriter.println("ofCustomFonts:" + this.ofCustomFonts);
+            printwriter.println("ofCustomColors:" + this.ofCustomColors);
+            printwriter.println("ofCustomItems:" + this.ofCustomItems);
+            printwriter.println("ofCustomSky:" + this.ofCustomSky);
+            printwriter.println("ofShowCapes:" + this.ofShowCapes);
+            printwriter.println("ofNaturalTextures:" + this.ofNaturalTextures);
+            printwriter.println("ofEmissiveTextures:" + this.ofEmissiveTextures);
+            printwriter.println("ofLazyChunkLoading:" + this.ofLazyChunkLoading);
+            printwriter.println("ofSmartAnimations:" + this.ofSmartAnimations);
+            printwriter.println("ofDynamicFov:" + this.ofDynamicFov);
+            printwriter.println("ofAlternateBlocks:" + this.ofAlternateBlocks);
+            printwriter.println("ofDynamicLights:" + this.ofDynamicLights);
+            printwriter.println("ofScreenshotSize:" + this.ofScreenshotSize);
+            printwriter.println("ofCustomEntityModels:" + this.ofCustomEntityModels);
+            printwriter.println("ofCustomGuis:" + this.ofCustomGuis);
+            printwriter.println("ofShowGlErrors:" + this.ofShowGlErrors);
+            printwriter.println("ofFullscreenMode:" + this.ofFullscreenMode);
+            printwriter.println("ofFastMath:" + this.ofFastMath);
+            printwriter.println("ofFastRender:" + this.ofFastRender);
+            printwriter.println("ofTranslucentBlocks:" + this.ofTranslucentBlocks);
+            printwriter.println("key_" + this.ofKeyBindZoom.func_151464_g() + ":" + this.ofKeyBindZoom.func_151463_i());
             printwriter.close();
         }
         catch (Exception exception)
         {
-            field_151454_ax.error((String)"Failed to save options", (Throwable)exception);
+            Config.warn("Failed to save options");
+            exception.printStackTrace();
         }
+    }
 
-        this.func_82879_c();
+    private void updateRenderClouds()
+    {
+        switch (this.ofClouds)
+        {
+            case 1:
+                this.field_74345_l = 1;
+                break;
+
+            case 2:
+                this.field_74345_l = 2;
+                break;
+
+            case 3:
+                this.field_74345_l = 0;
+                break;
+
+            default:
+                if (this.field_74347_j)
+                {
+                    this.field_74345_l = 2;
+                }
+                else
+                {
+                    this.field_74345_l = 1;
+                }
+        }
     }
 
-    public float func_151438_a(SoundCategory p_151438_1_)
+    public void resetSettings()
     {
-        return this.field_151446_aD.containsKey(p_151438_1_) ? ((Float)this.field_151446_aD.get(p_151438_1_)).floatValue() : 1.0F;
+        this.field_151451_c = 8;
+        this.field_74336_f = true;
+        this.field_74337_g = false;
+        this.field_74350_i = (int)GameSettings.Options.FRAMERATE_LIMIT.func_148267_f();
+        this.field_74352_v = false;
+        this.updateVSync();
+        this.field_151442_I = 4;
+        this.field_74347_j = true;
+        this.field_74348_k = 2;
+        this.field_74345_l = 2;
+        this.field_74334_X = 70.0F;
+        this.field_74333_Y = 0.0F;
+        this.field_74335_Z = 0;
+        this.field_74362_aa = 0;
+        this.field_92117_D = true;
+        this.field_178881_t = false;
+        this.field_151455_aw = false;
+        this.ofFogType = 1;
+        this.ofFogStart = 0.8F;
+        this.ofMipmapType = 0;
+        this.ofOcclusionFancy = false;
+        this.ofSmartAnimations = false;
+        this.ofSmoothFps = false;
+        Config.updateAvailableProcessors();
+        this.ofSmoothWorld = Config.isSingleProcessor();
+        this.ofLazyChunkLoading = false;
+        this.ofFastMath = false;
+        this.ofFastRender = false;
+        this.ofTranslucentBlocks = 0;
+        this.ofDynamicFov = true;
+        this.ofAlternateBlocks = true;
+        this.ofDynamicLights = 3;
+        this.ofScreenshotSize = 1;
+        this.ofCustomEntityModels = true;
+        this.ofCustomGuis = true;
+        this.ofShowGlErrors = true;
+        this.ofAoLevel = 1.0F;
+        this.ofAaLevel = 0;
+        this.ofAfLevel = 1;
+        this.ofClouds = 0;
+        this.ofCloudsHeight = 0.0F;
+        this.ofTrees = 0;
+        this.ofRain = 0;
+        this.ofBetterGrass = 3;
+        this.ofAutoSaveTicks = 4000;
+        this.ofLagometer = false;
+        this.ofShowFps = false;
+        this.ofProfiler = false;
+        this.ofWeather = true;
+        this.ofSky = true;
+        this.ofStars = true;
+        this.ofSunMoon = true;
+        this.ofVignette = 0;
+        this.ofChunkUpdates = 1;
+        this.ofChunkUpdatesDynamic = false;
+        this.ofTime = 0;
+        this.ofClearWater = false;
+        this.ofBetterSnow = false;
+        this.ofFullscreenMode = "Default";
+        this.ofSwampColors = true;
+        this.ofRandomEntities = true;
+        this.ofSmoothBiomes = true;
+        this.ofCustomFonts = true;
+        this.ofCustomColors = true;
+        this.ofCustomItems = true;
+        this.ofCustomSky = true;
+        this.ofShowCapes = true;
+        this.ofConnectedTextures = 2;
+        this.ofNaturalTextures = false;
+        this.ofEmissiveTextures = true;
+        this.ofAnimatedWater = 0;
+        this.ofAnimatedLava = 0;
+        this.ofAnimatedFire = true;
+        this.ofAnimatedPortal = true;
+        this.ofAnimatedRedstone = true;
+        this.ofAnimatedExplosion = true;
+        this.ofAnimatedFlame = true;
+        this.ofAnimatedSmoke = true;
+        this.ofVoidParticles = true;
+        this.ofWaterParticles = true;
+        this.ofRainSplash = true;
+        this.ofPortalParticles = true;
+        this.ofPotionParticles = true;
+        this.ofFireworkParticles = true;
+        this.ofDrippingWaterLava = true;
+        this.ofAnimatedTerrain = true;
+        this.ofAnimatedTextures = true;
+        Shaders.setShaderPack("OFF");
+        Shaders.configAntialiasingLevel = 0;
+        Shaders.uninit();
+        Shaders.storeConfig();
+        this.updateWaterOpacity();
+        this.field_74317_L.func_110436_a();
+        this.func_74303_b();
     }
 
-    public void func_151439_a(SoundCategory p_151439_1_, float p_151439_2_)
+    public void updateVSync()
     {
-        this.field_74317_L.func_147118_V().func_147684_a(p_151439_1_, p_151439_2_);
-        this.field_151446_aD.put(p_151439_1_, Float.valueOf(p_151439_2_));
+        Display.setVSyncEnabled(this.field_74352_v);
     }
 
-    public void func_82879_c()
+    private void updateWaterOpacity()
     {
-        if (this.field_74317_L.field_71439_g != null)
+        if (Config.isIntegratedServerRunning())
         {
-            int i = 0;
-
-            for (EnumPlayerModelParts enumplayermodelparts : this.field_178882_aU)
-            {
-                i |= enumplayermodelparts.func_179327_a();
-            }
-
-            this.field_74317_L.field_71439_g.field_71174_a.func_147297_a(new C15PacketClientSettings(this.field_74363_ab, this.field_151451_c, this.field_74343_n, this.field_74344_o, i));
+            Config.waterOpacityChanged = true;
         }
+
+        ClearWater.updateWaterOpacity(this, this.field_74317_L.field_71441_e);
     }
 
-    public Set<EnumPlayerModelParts> func_178876_d()
+    public void setAllAnimations(boolean p_setAllAnimations_1_)
     {
-        return ImmutableSet.copyOf(this.field_178882_aU);
+        int i = p_setAllAnimations_1_ ? 0 : 2;
+        this.ofAnimatedWater = i;
+        this.ofAnimatedLava = i;
+        this.ofAnimatedFire = p_setAllAnimations_1_;
+        this.ofAnimatedPortal = p_setAllAnimations_1_;
+        this.ofAnimatedRedstone = p_setAllAnimations_1_;
+        this.ofAnimatedExplosion = p_setAllAnimations_1_;
+        this.ofAnimatedFlame = p_setAllAnimations_1_;
+        this.ofAnimatedSmoke = p_setAllAnimations_1_;
+        this.ofVoidParticles = p_setAllAnimations_1_;
+        this.ofWaterParticles = p_setAllAnimations_1_;
+        this.ofRainSplash = p_setAllAnimations_1_;
+        this.ofPortalParticles = p_setAllAnimations_1_;
+        this.ofPotionParticles = p_setAllAnimations_1_;
+        this.ofFireworkParticles = p_setAllAnimations_1_;
+        this.field_74362_aa = p_setAllAnimations_1_ ? 0 : 2;
+        this.ofDrippingWaterLava = p_setAllAnimations_1_;
+        this.ofAnimatedTerrain = p_setAllAnimations_1_;
+        this.ofAnimatedTextures = p_setAllAnimations_1_;
     }
 
-    public void func_178878_a(EnumPlayerModelParts p_178878_1_, boolean p_178878_2_)
+    private static int nextValue(int p_nextValue_0_, int[] p_nextValue_1_)
     {
-        if (p_178878_2_)
+        int i = indexOf(p_nextValue_0_, p_nextValue_1_);
+
+        if (i < 0)
         {
-            this.field_178882_aU.add(p_178878_1_);
+            return p_nextValue_1_[0];
         }
         else
         {
-            this.field_178882_aU.remove(p_178878_1_);
-        }
+            ++i;
 
-        this.func_82879_c();
-    }
+            if (i >= p_nextValue_1_.length)
+            {
+                i = 0;
+            }
 
-    public void func_178877_a(EnumPlayerModelParts p_178877_1_)
-    {
-        if (!this.func_178876_d().contains(p_178877_1_))
-        {
-            this.field_178882_aU.add(p_178877_1_);
+            return p_nextValue_1_[i];
         }
-        else
-        {
-            this.field_178882_aU.remove(p_178877_1_);
-        }
-
-        this.func_82879_c();
     }
 
-    public int func_181147_e()
+    private static int limit(int p_limit_0_, int[] p_limit_1_)
     {
-        return this.field_151451_c >= 4 ? this.field_74345_l : 0;
+        int i = indexOf(p_limit_0_, p_limit_1_);
+        return i < 0 ? p_limit_1_[0] : p_limit_0_;
     }
 
-    public boolean func_181148_f()
+    private static int indexOf(int p_indexOf_0_, int[] p_indexOf_1_)
     {
-        return this.field_181150_U;
+        for (int i = 0; i < p_indexOf_1_.length; ++i)
+        {
+            if (p_indexOf_1_[i] == p_indexOf_0_)
+            {
+                return i;
+            }
+        }
+
+        return -1;
     }
 
-    @SideOnly(Side.CLIENT)
     public static enum Options
     {
         INVERT_MOUSE("options.invertMouse", false, true),
@@ -1174,7 +3311,7 @@
         RENDER_DISTANCE("options.renderDistance", true, false, 2.0F, 16.0F, 1.0F),
         VIEW_BOBBING("options.viewBobbing", false, true),
         ANAGLYPH("options.anaglyph", false, true),
-        FRAMERATE_LIMIT("options.framerateLimit", true, false, 10.0F, 260.0F, 10.0F),
+        FRAMERATE_LIMIT("options.framerateLimit", true, false, 0.0F, 260.0F, 5.0F),
         FBO_ENABLE("options.fboEnable", false, true),
         RENDER_CLOUDS("options.renderClouds", false, false),
         GRAPHICS("options.graphics", false, false),
@@ -1210,7 +3347,78 @@
         BLOCK_ALTERNATIVES("options.blockAlternatives", false, true),
         REDUCED_DEBUG_INFO("options.reducedDebugInfo", false, true),
         ENTITY_SHADOWS("options.entityShadows", false, true),
-        REALMS_NOTIFICATIONS("options.realmsNotifications", false, true);
+        REALMS_NOTIFICATIONS("options.realmsNotifications", false, true),
+        FOG_FANCY("of.options.FOG_FANCY", false, false),
+        FOG_START("of.options.FOG_START", false, false),
+        MIPMAP_TYPE("of.options.MIPMAP_TYPE", true, false, 0.0F, 3.0F, 1.0F),
+        SMOOTH_FPS("of.options.SMOOTH_FPS", false, false),
+        CLOUDS("of.options.CLOUDS", false, false),
+        CLOUD_HEIGHT("of.options.CLOUD_HEIGHT", true, false),
+        TREES("of.options.TREES", false, false),
+        RAIN("of.options.RAIN", false, false),
+        ANIMATED_WATER("of.options.ANIMATED_WATER", false, false),
+        ANIMATED_LAVA("of.options.ANIMATED_LAVA", false, false),
+        ANIMATED_FIRE("of.options.ANIMATED_FIRE", false, false),
+        ANIMATED_PORTAL("of.options.ANIMATED_PORTAL", false, false),
+        AO_LEVEL("of.options.AO_LEVEL", true, false),
+        LAGOMETER("of.options.LAGOMETER", false, false),
+        SHOW_FPS("of.options.SHOW_FPS", false, false),
+        AUTOSAVE_TICKS("of.options.AUTOSAVE_TICKS", false, false),
+        BETTER_GRASS("of.options.BETTER_GRASS", false, false),
+        ANIMATED_REDSTONE("of.options.ANIMATED_REDSTONE", false, false),
+        ANIMATED_EXPLOSION("of.options.ANIMATED_EXPLOSION", false, false),
+        ANIMATED_FLAME("of.options.ANIMATED_FLAME", false, false),
+        ANIMATED_SMOKE("of.options.ANIMATED_SMOKE", false, false),
+        WEATHER("of.options.WEATHER", false, false),
+        SKY("of.options.SKY", false, false),
+        STARS("of.options.STARS", false, false),
+        SUN_MOON("of.options.SUN_MOON", false, false),
+        VIGNETTE("of.options.VIGNETTE", false, false),
+        CHUNK_UPDATES("of.options.CHUNK_UPDATES", false, false),
+        CHUNK_UPDATES_DYNAMIC("of.options.CHUNK_UPDATES_DYNAMIC", false, false),
+        TIME("of.options.TIME", false, false),
+        CLEAR_WATER("of.options.CLEAR_WATER", false, false),
+        SMOOTH_WORLD("of.options.SMOOTH_WORLD", false, false),
+        VOID_PARTICLES("of.options.VOID_PARTICLES", false, false),
+        WATER_PARTICLES("of.options.WATER_PARTICLES", false, false),
+        RAIN_SPLASH("of.options.RAIN_SPLASH", false, false),
+        PORTAL_PARTICLES("of.options.PORTAL_PARTICLES", false, false),
+        POTION_PARTICLES("of.options.POTION_PARTICLES", false, false),
+        FIREWORK_PARTICLES("of.options.FIREWORK_PARTICLES", false, false),
+        PROFILER("of.options.PROFILER", false, false),
+        DRIPPING_WATER_LAVA("of.options.DRIPPING_WATER_LAVA", false, false),
+        BETTER_SNOW("of.options.BETTER_SNOW", false, false),
+        FULLSCREEN_MODE("of.options.FULLSCREEN_MODE", true, false, 0.0F, (float)Config.getDisplayModes().length, 1.0F),
+        ANIMATED_TERRAIN("of.options.ANIMATED_TERRAIN", false, false),
+        SWAMP_COLORS("of.options.SWAMP_COLORS", false, false),
+        RANDOM_ENTITIES("of.options.RANDOM_ENTITIES", false, false),
+        SMOOTH_BIOMES("of.options.SMOOTH_BIOMES", false, false),
+        CUSTOM_FONTS("of.options.CUSTOM_FONTS", false, false),
+        CUSTOM_COLORS("of.options.CUSTOM_COLORS", false, false),
+        SHOW_CAPES("of.options.SHOW_CAPES", false, false),
+        CONNECTED_TEXTURES("of.options.CONNECTED_TEXTURES", false, false),
+        CUSTOM_ITEMS("of.options.CUSTOM_ITEMS", false, false),
+        AA_LEVEL("of.options.AA_LEVEL", true, false, 0.0F, 16.0F, 1.0F),
+        AF_LEVEL("of.options.AF_LEVEL", true, false, 1.0F, 16.0F, 1.0F),
+        ANIMATED_TEXTURES("of.options.ANIMATED_TEXTURES", false, false),
+        NATURAL_TEXTURES("of.options.NATURAL_TEXTURES", false, false),
+        EMISSIVE_TEXTURES("of.options.EMISSIVE_TEXTURES", false, false),
+        HELD_ITEM_TOOLTIPS("of.options.HELD_ITEM_TOOLTIPS", false, false),
+        DROPPED_ITEMS("of.options.DROPPED_ITEMS", false, false),
+        LAZY_CHUNK_LOADING("of.options.LAZY_CHUNK_LOADING", false, false),
+        CUSTOM_SKY("of.options.CUSTOM_SKY", false, false),
+        FAST_MATH("of.options.FAST_MATH", false, false),
+        FAST_RENDER("of.options.FAST_RENDER", false, false),
+        TRANSLUCENT_BLOCKS("of.options.TRANSLUCENT_BLOCKS", false, false),
+        DYNAMIC_FOV("of.options.DYNAMIC_FOV", false, false),
+        DYNAMIC_LIGHTS("of.options.DYNAMIC_LIGHTS", false, false),
+        ALTERNATE_BLOCKS("of.options.ALTERNATE_BLOCKS", false, false),
+        CUSTOM_ENTITY_MODELS("of.options.CUSTOM_ENTITY_MODELS", false, false),
+        ADVANCED_TOOLTIPS("of.options.ADVANCED_TOOLTIPS", false, false),
+        SCREENSHOT_SIZE("of.options.SCREENSHOT_SIZE", false, false),
+        CUSTOM_GUIS("of.options.CUSTOM_GUIS", false, false),
+        SHOW_GL_ERRORS("of.options.SHOW_GL_ERRORS", false, false),
+        SMART_ANIMATIONS("of.options.SMART_ANIMATIONS", false, false);
 
         private final boolean field_74385_A;
         private final boolean field_74386_B;
@@ -1303,4 +3511,11 @@
             return p_148264_1_;
         }
     }
+
+    public void onSettingsGuiClosed() {
+        if (this.needsResourceRefresh) {
+            this.field_74317_L.func_175603_A();
+            this.needsResourceRefresh = false;
+        }
+	}
 }
